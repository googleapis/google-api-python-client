{
  "parameters": {
    "quotaUser": {
      "type": "string",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "location": "query"
    },
    "upload_protocol": {
      "type": "string",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "location": "query"
    },
    "fields": {
      "description": "Selector specifying which fields to include in a partial response.",
      "location": "query",
      "type": "string"
    },
    "access_token": {
      "description": "OAuth access token.",
      "type": "string",
      "location": "query"
    },
    "key": {
      "type": "string",
      "location": "query",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
    },
    "$.xgafv": {
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "location": "query",
      "type": "string",
      "description": "V1 error format.",
      "enum": [
        "1",
        "2"
      ]
    },
    "prettyPrint": {
      "type": "boolean",
      "description": "Returns response with indentations and line breaks.",
      "location": "query",
      "default": "true"
    },
    "callback": {
      "location": "query",
      "type": "string",
      "description": "JSONP"
    },
    "alt": {
      "default": "json",
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "type": "string",
      "location": "query",
      "description": "Data format for response.",
      "enum": [
        "json",
        "media",
        "proto"
      ]
    },
    "uploadType": {
      "type": "string",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "location": "query"
    },
    "oauth_token": {
      "description": "OAuth 2.0 token for the current user.",
      "type": "string",
      "location": "query"
    }
  },
  "servicePath": "",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/drive.file": {
          "description": "View and manage Google Drive files and folders that you have opened or created with this app"
        },
        "https://www.googleapis.com/auth/drive": {
          "description": "See, edit, create, and delete all of your Google Drive files"
        },
        "https://www.googleapis.com/auth/drive.readonly": {
          "description": "See and download all your Google Drive files"
        },
        "https://www.googleapis.com/auth/spreadsheets": {
          "description": "See, edit, create, and delete your spreadsheets in Google Drive"
        },
        "https://www.googleapis.com/auth/tables": {
          "description": "See, edit, create, and delete your tables in Tables by Area 120"
        },
        "https://www.googleapis.com/auth/spreadsheets.readonly": {
          "description": "View your Google Spreadsheets"
        }
      }
    }
  },
  "resources": {
    "workspaces": {
      "methods": {
        "list": {
          "flatPath": "v1alpha1/workspaces",
          "response": {
            "$ref": "ListWorkspacesResponse"
          },
          "id": "area120tables.workspaces.list",
          "scopes": [
            "https://www.googleapis.com/auth/drive",
            "https://www.googleapis.com/auth/drive.file",
            "https://www.googleapis.com/auth/drive.readonly",
            "https://www.googleapis.com/auth/spreadsheets",
            "https://www.googleapis.com/auth/spreadsheets.readonly",
            "https://www.googleapis.com/auth/tables"
          ],
          "path": "v1alpha1/workspaces",
          "parameterOrder": [],
          "httpMethod": "GET",
          "parameters": {
            "pageToken": {
              "description": "A page token, received from a previous `ListWorkspaces` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListWorkspaces` must match the call that provided the page token.",
              "location": "query",
              "type": "string"
            },
            "pageSize": {
              "description": "The maximum number of workspaces to return. The service may return fewer than this value. If unspecified, at most 10 workspaces are returned. The maximum value is 25; values above 25 are coerced to 25.",
              "format": "int32",
              "type": "integer",
              "location": "query"
            }
          },
          "description": "Lists workspaces for the user."
        },
        "get": {
          "flatPath": "v1alpha1/workspaces/{workspacesId}",
          "parameters": {
            "name": {
              "pattern": "^workspaces/[^/]+$",
              "type": "string",
              "location": "path",
              "description": "Required. The name of the workspace to retrieve. Format: workspaces/{workspace}",
              "required": true
            }
          },
          "httpMethod": "GET",
          "response": {
            "$ref": "Workspace"
          },
          "path": "v1alpha1/{+name}",
          "parameterOrder": [
            "name"
          ],
          "id": "area120tables.workspaces.get",
          "description": "Gets a workspace. Returns NOT_FOUND if the workspace does not exist.",
          "scopes": [
            "https://www.googleapis.com/auth/drive",
            "https://www.googleapis.com/auth/drive.file",
            "https://www.googleapis.com/auth/drive.readonly",
            "https://www.googleapis.com/auth/spreadsheets",
            "https://www.googleapis.com/auth/spreadsheets.readonly",
            "https://www.googleapis.com/auth/tables"
          ]
        }
      }
    },
    "tables": {
      "methods": {
        "list": {
          "description": "Lists tables for the user.",
          "flatPath": "v1alpha1/tables",
          "response": {
            "$ref": "ListTablesResponse"
          },
          "parameters": {
            "pageToken": {
              "description": "A page token, received from a previous `ListTables` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListTables` must match the call that provided the page token.",
              "location": "query",
              "type": "string"
            },
            "pageSize": {
              "format": "int32",
              "type": "integer",
              "location": "query",
              "description": "The maximum number of tables to return. The service may return fewer than this value. If unspecified, at most 20 tables are returned. The maximum value is 100; values above 100 are coerced to 100."
            }
          },
          "id": "area120tables.tables.list",
          "path": "v1alpha1/tables",
          "parameterOrder": [],
          "scopes": [
            "https://www.googleapis.com/auth/drive",
            "https://www.googleapis.com/auth/drive.file",
            "https://www.googleapis.com/auth/drive.readonly",
            "https://www.googleapis.com/auth/spreadsheets",
            "https://www.googleapis.com/auth/spreadsheets.readonly",
            "https://www.googleapis.com/auth/tables"
          ],
          "httpMethod": "GET"
        },
        "get": {
          "id": "area120tables.tables.get",
          "description": "Gets a table. Returns NOT_FOUND if the table does not exist.",
          "scopes": [
            "https://www.googleapis.com/auth/drive",
            "https://www.googleapis.com/auth/drive.file",
            "https://www.googleapis.com/auth/drive.readonly",
            "https://www.googleapis.com/auth/spreadsheets",
            "https://www.googleapis.com/auth/spreadsheets.readonly",
            "https://www.googleapis.com/auth/tables"
          ],
          "parameters": {
            "name": {
              "required": true,
              "pattern": "^tables/[^/]+$",
              "type": "string",
              "location": "path",
              "description": "Required. The name of the table to retrieve. Format: tables/{table}"
            }
          },
          "parameterOrder": [
            "name"
          ],
          "httpMethod": "GET",
          "flatPath": "v1alpha1/tables/{tablesId}",
          "path": "v1alpha1/{+name}",
          "response": {
            "$ref": "Table"
          }
        }
      },
      "resources": {
        "rows": {
          "methods": {
            "batchUpdate": {
              "flatPath": "v1alpha1/tables/{tablesId}/rows:batchUpdate",
              "description": "Updates multiple rows.",
              "response": {
                "$ref": "BatchUpdateRowsResponse"
              },
              "request": {
                "$ref": "BatchUpdateRowsRequest"
              },
              "path": "v1alpha1/{+parent}/rows:batchUpdate",
              "httpMethod": "POST",
              "parameterOrder": [
                "parent"
              ],
              "parameters": {
                "parent": {
                  "required": true,
                  "location": "path",
                  "type": "string",
                  "pattern": "^tables/[^/]+$",
                  "description": "Required. The parent table shared by all rows being updated. Format: tables/{table}"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/drive",
                "https://www.googleapis.com/auth/drive.file",
                "https://www.googleapis.com/auth/spreadsheets",
                "https://www.googleapis.com/auth/tables"
              ],
              "id": "area120tables.tables.rows.batchUpdate"
            },
            "list": {
              "id": "area120tables.tables.rows.list",
              "response": {
                "$ref": "ListRowsResponse"
              },
              "description": "Lists rows in a table. Returns NOT_FOUND if the table does not exist.",
              "httpMethod": "GET",
              "parameters": {
                "view": {
                  "location": "query",
                  "type": "string",
                  "enum": [
                    "VIEW_UNSPECIFIED",
                    "COLUMN_ID_VIEW"
                  ],
                  "enumDescriptions": [
                    "Defaults to user entered text.",
                    "Uses internally generated column id to identify values."
                  ],
                  "description": "Optional. Column key to use for values in the row. Defaults to user entered name."
                },
                "pageToken": {
                  "location": "query",
                  "description": "A page token, received from a previous `ListRows` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListRows` must match the call that provided the page token.",
                  "type": "string"
                },
                "pageSize": {
                  "location": "query",
                  "type": "integer",
                  "format": "int32",
                  "description": "The maximum number of rows to return. The service may return fewer than this value. If unspecified, at most 50 rows are returned. The maximum value is 1,000; values above 1,000 are coerced to 1,000."
                },
                "parent": {
                  "pattern": "^tables/[^/]+$",
                  "type": "string",
                  "required": true,
                  "description": "Required. The parent table. Format: tables/{table}",
                  "location": "path"
                }
              },
              "flatPath": "v1alpha1/tables/{tablesId}/rows",
              "scopes": [
                "https://www.googleapis.com/auth/drive",
                "https://www.googleapis.com/auth/drive.file",
                "https://www.googleapis.com/auth/drive.readonly",
                "https://www.googleapis.com/auth/spreadsheets",
                "https://www.googleapis.com/auth/spreadsheets.readonly",
                "https://www.googleapis.com/auth/tables"
              ],
              "parameterOrder": [
                "parent"
              ],
              "path": "v1alpha1/{+parent}/rows"
            },
            "delete": {
              "parameterOrder": [
                "name"
              ],
              "id": "area120tables.tables.rows.delete",
              "parameters": {
                "name": {
                  "description": "Required. The name of the row to delete. Format: tables/{table}/rows/{row}",
                  "required": true,
                  "location": "path",
                  "type": "string",
                  "pattern": "^tables/[^/]+/rows/[^/]+$"
                }
              },
              "response": {
                "$ref": "Empty"
              },
              "scopes": [
                "https://www.googleapis.com/auth/drive",
                "https://www.googleapis.com/auth/drive.file",
                "https://www.googleapis.com/auth/spreadsheets",
                "https://www.googleapis.com/auth/tables"
              ],
              "path": "v1alpha1/{+name}",
              "flatPath": "v1alpha1/tables/{tablesId}/rows/{rowsId}",
              "description": "Deletes a row.",
              "httpMethod": "DELETE"
            },
            "batchDelete": {
              "parameters": {
                "parent": {
                  "location": "path",
                  "pattern": "^tables/[^/]+$",
                  "description": "Required. The parent table shared by all rows being deleted. Format: tables/{table}",
                  "required": true,
                  "type": "string"
                }
              },
              "id": "area120tables.tables.rows.batchDelete",
              "response": {
                "$ref": "Empty"
              },
              "path": "v1alpha1/{+parent}/rows:batchDelete",
              "request": {
                "$ref": "BatchDeleteRowsRequest"
              },
              "parameterOrder": [
                "parent"
              ],
              "httpMethod": "POST",
              "flatPath": "v1alpha1/tables/{tablesId}/rows:batchDelete",
              "scopes": [
                "https://www.googleapis.com/auth/drive",
                "https://www.googleapis.com/auth/drive.file",
                "https://www.googleapis.com/auth/spreadsheets",
                "https://www.googleapis.com/auth/tables"
              ],
              "description": "Deletes multiple rows."
            },
            "create": {
              "response": {
                "$ref": "Row"
              },
              "parameterOrder": [
                "parent"
              ],
              "request": {
                "$ref": "Row"
              },
              "id": "area120tables.tables.rows.create",
              "parameters": {
                "parent": {
                  "pattern": "^tables/[^/]+$",
                  "type": "string",
                  "description": "Required. The parent table where this row will be created. Format: tables/{table}",
                  "location": "path",
                  "required": true
                },
                "view": {
                  "type": "string",
                  "enum": [
                    "VIEW_UNSPECIFIED",
                    "COLUMN_ID_VIEW"
                  ],
                  "description": "Optional. Column key to use for values in the row. Defaults to user entered name.",
                  "location": "query",
                  "enumDescriptions": [
                    "Defaults to user entered text.",
                    "Uses internally generated column id to identify values."
                  ]
                }
              },
              "httpMethod": "POST",
              "scopes": [
                "https://www.googleapis.com/auth/drive",
                "https://www.googleapis.com/auth/drive.file",
                "https://www.googleapis.com/auth/spreadsheets",
                "https://www.googleapis.com/auth/tables"
              ],
              "path": "v1alpha1/{+parent}/rows",
              "description": "Creates a row.",
              "flatPath": "v1alpha1/tables/{tablesId}/rows"
            },
            "patch": {
              "id": "area120tables.tables.rows.patch",
              "parameters": {
                "view": {
                  "enumDescriptions": [
                    "Defaults to user entered text.",
                    "Uses internally generated column id to identify values."
                  ],
                  "location": "query",
                  "type": "string",
                  "enum": [
                    "VIEW_UNSPECIFIED",
                    "COLUMN_ID_VIEW"
                  ],
                  "description": "Optional. Column key to use for values in the row. Defaults to user entered name."
                },
                "updateMask": {
                  "format": "google-fieldmask",
                  "description": "The list of fields to update.",
                  "location": "query",
                  "type": "string"
                },
                "name": {
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "pattern": "^tables/[^/]+/rows/[^/]+$",
                  "description": "The resource name of the row. Row names have the form `tables/{table}/rows/{row}`. The name is ignored when creating a row."
                }
              },
              "request": {
                "$ref": "Row"
              },
              "description": "Updates a row.",
              "httpMethod": "PATCH",
              "flatPath": "v1alpha1/tables/{tablesId}/rows/{rowsId}",
              "scopes": [
                "https://www.googleapis.com/auth/drive",
                "https://www.googleapis.com/auth/drive.file",
                "https://www.googleapis.com/auth/spreadsheets",
                "https://www.googleapis.com/auth/tables"
              ],
              "parameterOrder": [
                "name"
              ],
              "response": {
                "$ref": "Row"
              },
              "path": "v1alpha1/{+name}"
            },
            "batchCreate": {
              "id": "area120tables.tables.rows.batchCreate",
              "request": {
                "$ref": "BatchCreateRowsRequest"
              },
              "parameters": {
                "parent": {
                  "pattern": "^tables/[^/]+$",
                  "location": "path",
                  "type": "string",
                  "required": true,
                  "description": "Required. The parent table where the rows will be created. Format: tables/{table}"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/drive",
                "https://www.googleapis.com/auth/drive.file",
                "https://www.googleapis.com/auth/spreadsheets",
                "https://www.googleapis.com/auth/tables"
              ],
              "parameterOrder": [
                "parent"
              ],
              "response": {
                "$ref": "BatchCreateRowsResponse"
              },
              "httpMethod": "POST",
              "flatPath": "v1alpha1/tables/{tablesId}/rows:batchCreate",
              "path": "v1alpha1/{+parent}/rows:batchCreate",
              "description": "Creates multiple rows."
            },
            "get": {
              "httpMethod": "GET",
              "flatPath": "v1alpha1/tables/{tablesId}/rows/{rowsId}",
              "id": "area120tables.tables.rows.get",
              "parameters": {
                "name": {
                  "description": "Required. The name of the row to retrieve. Format: tables/{table}/rows/{row}",
                  "pattern": "^tables/[^/]+/rows/[^/]+$",
                  "location": "path",
                  "type": "string",
                  "required": true
                },
                "view": {
                  "location": "query",
                  "description": "Optional. Column key to use for values in the row. Defaults to user entered name.",
                  "enum": [
                    "VIEW_UNSPECIFIED",
                    "COLUMN_ID_VIEW"
                  ],
                  "type": "string",
                  "enumDescriptions": [
                    "Defaults to user entered text.",
                    "Uses internally generated column id to identify values."
                  ]
                }
              },
              "description": "Gets a row. Returns NOT_FOUND if the row does not exist in the table.",
              "response": {
                "$ref": "Row"
              },
              "path": "v1alpha1/{+name}",
              "parameterOrder": [
                "name"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/drive",
                "https://www.googleapis.com/auth/drive.file",
                "https://www.googleapis.com/auth/drive.readonly",
                "https://www.googleapis.com/auth/spreadsheets",
                "https://www.googleapis.com/auth/spreadsheets.readonly",
                "https://www.googleapis.com/auth/tables"
              ]
            }
          }
        }
      }
    }
  },
  "baseUrl": "https://area120tables.googleapis.com/",
  "schemas": {
    "BatchDeleteRowsRequest": {
      "description": "Request message for TablesService.BatchDeleteRows",
      "type": "object",
      "id": "BatchDeleteRowsRequest",
      "properties": {
        "names": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Required. The names of the rows to delete. All rows must belong to the parent table or else the entire batch will fail. A maximum of 500 rows can be deleted in a batch. Format: tables/{table}/rows/{row}"
        }
      }
    },
    "UpdateRowRequest": {
      "id": "UpdateRowRequest",
      "type": "object",
      "properties": {
        "view": {
          "type": "string",
          "enum": [
            "VIEW_UNSPECIFIED",
            "COLUMN_ID_VIEW"
          ],
          "enumDescriptions": [
            "Defaults to user entered text.",
            "Uses internally generated column id to identify values."
          ],
          "description": "Optional. Column key to use for values in the row. Defaults to user entered name."
        },
        "updateMask": {
          "description": "The list of fields to update.",
          "type": "string",
          "format": "google-fieldmask"
        },
        "row": {
          "$ref": "Row",
          "description": "Required. The row to update."
        }
      },
      "description": "Request message for TablesService.UpdateRow."
    },
    "CreateRowRequest": {
      "properties": {
        "parent": {
          "type": "string",
          "description": "Required. The parent table where this row will be created. Format: tables/{table}"
        },
        "row": {
          "description": "Required. The row to create.",
          "$ref": "Row"
        },
        "view": {
          "enumDescriptions": [
            "Defaults to user entered text.",
            "Uses internally generated column id to identify values."
          ],
          "enum": [
            "VIEW_UNSPECIFIED",
            "COLUMN_ID_VIEW"
          ],
          "description": "Optional. Column key to use for values in the row. Defaults to user entered name.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "CreateRowRequest",
      "description": "Request message for TablesService.CreateRow."
    },
    "ListRowsResponse": {
      "type": "object",
      "properties": {
        "nextPageToken": {
          "description": "A token, which can be sent as `page_token` to retrieve the next page. If this field is empty, there are no subsequent pages.",
          "type": "string"
        },
        "rows": {
          "type": "array",
          "description": "The rows from the specified table.",
          "items": {
            "$ref": "Row"
          }
        }
      },
      "id": "ListRowsResponse",
      "description": "Response message for TablesService.ListRows."
    },
    "LabeledItem": {
      "description": "A single item in a labeled column.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Display string as entered by user.",
          "type": "string"
        },
        "id": {
          "description": "Internal id associated with the item.",
          "type": "string"
        }
      },
      "id": "LabeledItem"
    },
    "BatchUpdateRowsResponse": {
      "type": "object",
      "description": "Response message for TablesService.BatchUpdateRows.",
      "id": "BatchUpdateRowsResponse",
      "properties": {
        "rows": {
          "type": "array",
          "items": {
            "$ref": "Row"
          },
          "description": "The updated rows."
        }
      }
    },
    "ListTablesResponse": {
      "type": "object",
      "id": "ListTablesResponse",
      "properties": {
        "tables": {
          "type": "array",
          "description": "The list of tables.",
          "items": {
            "$ref": "Table"
          }
        },
        "nextPageToken": {
          "type": "string",
          "description": "A token, which can be sent as `page_token` to retrieve the next page. If this field is empty, there are no subsequent pages."
        }
      },
      "description": "Response message for TablesService.ListTables."
    },
    "BatchUpdateRowsRequest": {
      "id": "BatchUpdateRowsRequest",
      "type": "object",
      "description": "Request message for TablesService.BatchUpdateRows.",
      "properties": {
        "requests": {
          "type": "array",
          "items": {
            "$ref": "UpdateRowRequest"
          },
          "description": "Required. The request messages specifying the rows to update. A maximum of 500 rows can be modified in a single batch."
        }
      }
    },
    "Workspace": {
      "id": "Workspace",
      "description": "A single workspace.",
      "type": "object",
      "properties": {
        "tables": {
          "items": {
            "$ref": "Table"
          },
          "type": "array",
          "description": "The list of tables in the workspace."
        },
        "displayName": {
          "description": "The human readable title of the workspace.",
          "type": "string"
        },
        "name": {
          "description": "The resource name of the workspace. Workspace names have the form `workspaces/{workspace}`.",
          "type": "string"
        }
      }
    },
    "ListWorkspacesResponse": {
      "id": "ListWorkspacesResponse",
      "description": "Response message for TablesService.ListWorkspaces.",
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "A token, which can be sent as `page_token` to retrieve the next page. If this field is empty, there are no subsequent pages."
        },
        "workspaces": {
          "description": "The list of workspaces.",
          "items": {
            "$ref": "Workspace"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "BatchCreateRowsResponse": {
      "type": "object",
      "description": "Response message for TablesService.BatchCreateRows.",
      "properties": {
        "rows": {
          "type": "array",
          "items": {
            "$ref": "Row"
          },
          "description": "The created rows."
        }
      },
      "id": "BatchCreateRowsResponse"
    },
    "Empty": {
      "type": "object",
      "properties": {},
      "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`.",
      "id": "Empty"
    },
    "Table": {
      "id": "Table",
      "properties": {
        "columns": {
          "description": "List of columns in this table. Order of columns matches the display order.",
          "type": "array",
          "items": {
            "$ref": "ColumnDescription"
          }
        },
        "name": {
          "type": "string",
          "description": "The resource name of the table. Table names have the form `tables/{table}`."
        },
        "displayName": {
          "type": "string",
          "description": "The human readable title of the table."
        }
      },
      "type": "object",
      "description": "A single table."
    },
    "BatchCreateRowsRequest": {
      "type": "object",
      "id": "BatchCreateRowsRequest",
      "properties": {
        "requests": {
          "type": "array",
          "items": {
            "$ref": "CreateRowRequest"
          },
          "description": "Required. The request message specifying the rows to create. A maximum of 500 rows can be created in a single batch."
        }
      },
      "description": "Request message for TablesService.BatchCreateRows."
    },
    "RelationshipDetails": {
      "type": "object",
      "properties": {
        "linkedTable": {
          "description": "The name of the table this relationship is linked to.",
          "type": "string"
        }
      },
      "id": "RelationshipDetails",
      "description": "Details about a relationship column."
    },
    "ColumnDescription": {
      "description": "Details on a column in the table.",
      "id": "ColumnDescription",
      "properties": {
        "id": {
          "type": "string",
          "description": "Internal id for a column."
        },
        "dataType": {
          "description": "Data type of the column Supported types are auto_id, boolean, boolean_list, creator, create_timestamp, date, dropdown, location, integer, integer_list, number, number_list, person, person_list, tags, check_list, text, text_list, update_timestamp, updater, relationship, file_attachment_list. These types directly map to the column types supported on Tables website.",
          "type": "string"
        },
        "relationshipDetails": {
          "$ref": "RelationshipDetails",
          "description": "Optional. Additional details about a relationship column. Specified when data_type is relationship."
        },
        "lookupDetails": {
          "$ref": "LookupDetails",
          "description": "Optional. Indicates that this is a lookup column whose value is derived from the relationship column specified in the details. Lookup columns can not be updated directly. To change the value you must update the associated relationship column."
        },
        "labels": {
          "description": "Optional. Range of labeled values for the column. Some columns like tags and drop-downs limit the values to a set of possible values. We return the range of values in such cases to help clients implement better user data validation.",
          "type": "array",
          "items": {
            "$ref": "LabeledItem"
          }
        },
        "name": {
          "description": "column name",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Row": {
      "properties": {
        "values": {
          "additionalProperties": {
            "type": "any"
          },
          "type": "object",
          "description": "The values of the row. This is a map of column key to value. Key is user entered name(default) or the internal column id based on the view in the request."
        },
        "name": {
          "type": "string",
          "description": "The resource name of the row. Row names have the form `tables/{table}/rows/{row}`. The name is ignored when creating a row."
        }
      },
      "id": "Row",
      "description": "A single row in a table.",
      "type": "object"
    },
    "LookupDetails": {
      "properties": {
        "relationshipColumn": {
          "type": "string",
          "description": "The name of the relationship column associated with the lookup."
        },
        "relationshipColumnId": {
          "type": "string",
          "description": "The id of the relationship column."
        }
      },
      "description": "Details about a lookup column whose value comes from the associated relationship.",
      "id": "LookupDetails",
      "type": "object"
    }
  },
  "revision": "20210113",
  "ownerName": "Google",
  "mtlsRootUrl": "https://area120tables.mtls.googleapis.com/",
  "rootUrl": "https://area120tables.googleapis.com/",
  "batchPath": "batch",
  "version_module": true,
  "kind": "discovery#restDescription",
  "fullyEncodeReservedExpansion": true,
  "id": "area120tables:v1alpha1",
  "canonicalName": "Area120 Tables",
  "description": "",
  "version": "v1alpha1",
  "documentationLink": "https://support.google.com/area120-tables/answer/10011390",
  "basePath": "",
  "title": "Area120 Tables API",
  "discoveryVersion": "v1",
  "ownerDomain": "google.com",
  "icons": {
    "x32": "http://www.google.com/images/icons/product/search-32.gif",
    "x16": "http://www.google.com/images/icons/product/search-16.gif"
  },
  "protocol": "rest",
  "name": "area120tables"
}
