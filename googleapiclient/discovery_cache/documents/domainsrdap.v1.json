{
  "batchPath": "batch",
  "ownerDomain": "google.com",
  "servicePath": "",
  "protocol": "rest",
  "title": "Domains RDAP API",
  "fullyEncodeReservedExpansion": true,
  "baseUrl": "https://domainsrdap.googleapis.com/",
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
  },
  "resources": {
    "v1": {
      "methods": {
        "getHelp": {
          "parameterOrder": [],
          "path": "v1/help",
          "flatPath": "v1/help",
          "parameters": {},
          "httpMethod": "GET",
          "id": "domainsrdap.getHelp",
          "response": {
            "$ref": "HttpBody"
          },
          "description": "Get help information for the RDAP API, including links to documentation."
        },
        "getIp": {
          "parameterOrder": [],
          "flatPath": "v1/ip",
          "parameters": {},
          "httpMethod": "GET",
          "path": "v1/ip",
          "description": "The RDAP API recognizes this command from the RDAP specification but does not support it. The response is a formatted 501 error.",
          "response": {
            "$ref": "HttpBody"
          },
          "id": "domainsrdap.getIp"
        },
        "getNameservers": {
          "description": "The RDAP API recognizes this command from the RDAP specification but does not support it. The response is a formatted 501 error.",
          "httpMethod": "GET",
          "parameterOrder": [],
          "parameters": {},
          "response": {
            "$ref": "RdapResponse"
          },
          "id": "domainsrdap.getNameservers",
          "path": "v1/nameservers",
          "flatPath": "v1/nameservers"
        },
        "getEntities": {
          "flatPath": "v1/entities",
          "description": "The RDAP API recognizes this command from the RDAP specification but does not support it. The response is a formatted 501 error.",
          "parameterOrder": [],
          "httpMethod": "GET",
          "id": "domainsrdap.getEntities",
          "response": {
            "$ref": "RdapResponse"
          },
          "parameters": {},
          "path": "v1/entities"
        },
        "getDomains": {
          "parameters": {},
          "response": {
            "$ref": "RdapResponse"
          },
          "parameterOrder": [],
          "description": "The RDAP API recognizes this command from the RDAP specification but does not support it. The response is a formatted 501 error.",
          "path": "v1/domains",
          "id": "domainsrdap.getDomains",
          "httpMethod": "GET",
          "flatPath": "v1/domains"
        }
      }
    },
    "nameserver": {
      "methods": {
        "get": {
          "description": "The RDAP API recognizes this command from the RDAP specification but does not support it. The response is a formatted 501 error.",
          "flatPath": "v1/nameserver/{nameserverId}",
          "id": "domainsrdap.nameserver.get",
          "httpMethod": "GET",
          "parameters": {
            "nameserverId": {
              "type": "string",
              "required": true,
              "location": "path"
            }
          },
          "response": {
            "$ref": "RdapResponse"
          },
          "parameterOrder": [
            "nameserverId"
          ],
          "path": "v1/nameserver/{nameserverId}"
        }
      }
    },
    "domain": {
      "methods": {
        "get": {
          "path": "v1/domain/{+domainName}",
          "description": "Look up RDAP information for a domain by name.",
          "id": "domainsrdap.domain.get",
          "httpMethod": "GET",
          "response": {
            "$ref": "HttpBody"
          },
          "parameters": {
            "domainName": {
              "required": true,
              "description": "Full domain name to look up. Example: \"example.com\"",
              "type": "string",
              "location": "path",
              "pattern": "^[^/]+$"
            }
          },
          "parameterOrder": [
            "domainName"
          ],
          "flatPath": "v1/domain/{domainId}"
        }
      }
    },
    "ip": {
      "methods": {
        "get": {
          "response": {
            "$ref": "RdapResponse"
          },
          "id": "domainsrdap.ip.get",
          "description": "The RDAP API recognizes this command from the RDAP specification but does not support it. The response is a formatted 501 error.",
          "path": "v1/ip/{ipId}/{ipId1}",
          "parameterOrder": [
            "ipId",
            "ipId1"
          ],
          "httpMethod": "GET",
          "flatPath": "v1/ip/{ipId}/{ipId1}",
          "parameters": {
            "ipId1": {
              "type": "string",
              "required": true,
              "location": "path"
            },
            "ipId": {
              "location": "path",
              "type": "string",
              "required": true
            }
          }
        }
      }
    },
    "autnum": {
      "methods": {
        "get": {
          "path": "v1/autnum/{autnumId}",
          "id": "domainsrdap.autnum.get",
          "httpMethod": "GET",
          "flatPath": "v1/autnum/{autnumId}",
          "description": "The RDAP API recognizes this command from the RDAP specification but does not support it. The response is a formatted 501 error.",
          "parameterOrder": [
            "autnumId"
          ],
          "response": {
            "$ref": "RdapResponse"
          },
          "parameters": {
            "autnumId": {
              "type": "string",
              "required": true,
              "location": "path"
            }
          }
        }
      }
    },
    "entity": {
      "methods": {
        "get": {
          "id": "domainsrdap.entity.get",
          "response": {
            "$ref": "RdapResponse"
          },
          "flatPath": "v1/entity/{entityId}",
          "path": "v1/entity/{entityId}",
          "parameterOrder": [
            "entityId"
          ],
          "description": "The RDAP API recognizes this command from the RDAP specification but does not support it. The response is a formatted 501 error.",
          "httpMethod": "GET",
          "parameters": {
            "entityId": {
              "location": "path",
              "type": "string",
              "required": true
            }
          }
        }
      }
    }
  },
  "basePath": "",
  "version": "v1",
  "parameters": {
    "prettyPrint": {
      "type": "boolean",
      "description": "Returns response with indentations and line breaks.",
      "location": "query",
      "default": "true"
    },
    "upload_protocol": {
      "location": "query",
      "type": "string",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
    },
    "access_token": {
      "description": "OAuth access token.",
      "location": "query",
      "type": "string"
    },
    "oauth_token": {
      "description": "OAuth 2.0 token for the current user.",
      "type": "string",
      "location": "query"
    },
    "$.xgafv": {
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "type": "string",
      "location": "query",
      "description": "V1 error format.",
      "enum": [
        "1",
        "2"
      ]
    },
    "quotaUser": {
      "location": "query",
      "type": "string",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
    },
    "alt": {
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "type": "string",
      "location": "query",
      "default": "json",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "description": "Data format for response."
    },
    "callback": {
      "type": "string",
      "location": "query",
      "description": "JSONP"
    },
    "key": {
      "type": "string",
      "location": "query",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
    },
    "fields": {
      "type": "string",
      "location": "query",
      "description": "Selector specifying which fields to include in a partial response."
    },
    "uploadType": {
      "location": "query",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "type": "string"
    }
  },
  "mtlsRootUrl": "https://domainsrdap.mtls.googleapis.com/",
  "canonicalName": "Domains RDAP",
  "discoveryVersion": "v1",
  "version_module": true,
  "description": "Read-only public API that lets users search for information about domain names.",
  "rootUrl": "https://domainsrdap.googleapis.com/",
  "documentationLink": "https://developers.google.com/domains/rdap/",
  "id": "domainsrdap:v1",
  "revision": "20200803",
  "ownerName": "Google",
  "schemas": {
    "RdapResponse": {
      "properties": {
        "lang": {
          "description": "Error language code. Error response info fields are defined in [section 6 of RFC 7483](https://tools.ietf.org/html/rfc7483#section-6).",
          "type": "string"
        },
        "rdapConformance": {
          "description": "RDAP conformance level.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "errorCode": {
          "type": "integer",
          "format": "int32",
          "description": "Error HTTP code. Example: \"501\"."
        },
        "notices": {
          "items": {
            "$ref": "Notice"
          },
          "type": "array",
          "description": "Notices applying to this response."
        },
        "title": {
          "description": "Error title.",
          "type": "string"
        },
        "description": {
          "description": "Error description.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "jsonResponse": {
          "$ref": "HttpBody",
          "description": "HTTP response with content type set to \"application/json+rdap\"."
        }
      },
      "description": "Response to a general RDAP query.",
      "id": "RdapResponse",
      "type": "object"
    },
    "Link": {
      "type": "object",
      "id": "Link",
      "description": "Links object defined in [section 4.2 of RFC 7483](https://tools.ietf.org/html/rfc7483#section-4.2).",
      "properties": {
        "type": {
          "type": "string",
          "description": "Content type of the link. Example: \"application/json\"."
        },
        "title": {
          "description": "Title of this link. Example: \"title\".",
          "type": "string"
        },
        "href": {
          "type": "string",
          "description": "Target URL of a link. Example: \"http://example.com/previous\"."
        },
        "hreflang": {
          "description": "Language code of a link. Example: \"en\".",
          "type": "string"
        },
        "rel": {
          "type": "string",
          "description": "Relation type of a link. Example: \"previous\"."
        },
        "value": {
          "description": "URL giving context for the link. Example: \"http://example.com/current\".",
          "type": "string"
        },
        "media": {
          "type": "string",
          "description": "Media type of the link destination. Example: \"screen\"."
        }
      }
    },
    "Notice": {
      "description": "Notices object defined in [section 4.3 of RFC 7483](https://tools.ietf.org/html/rfc7483#section-4.3).",
      "properties": {
        "links": {
          "items": {
            "$ref": "Link"
          },
          "type": "array",
          "description": "Link to a document containing more information."
        },
        "type": {
          "description": "Type values defined in [section 10.2.1 of RFC 7483](https://tools.ietf.org/html/rfc7483#section-10.2.1) specific to a whole response: \"result set truncated due to authorization\", \"result set truncated due to excessive load\", \"result set truncated due to unexplainable reasons\".",
          "type": "string"
        },
        "description": {
          "type": "array",
          "description": "Description of the notice.",
          "items": {
            "type": "string"
          }
        },
        "title": {
          "type": "string",
          "description": "Title of a notice. Example: \"Terms of Service\"."
        }
      },
      "id": "Notice",
      "type": "object"
    },
    "HttpBody": {
      "type": "object",
      "id": "HttpBody",
      "properties": {
        "extensions": {
          "type": "array",
          "items": {
            "additionalProperties": {
              "type": "any",
              "description": "Properties of the object. Contains field @type with type URL."
            },
            "type": "object"
          },
          "description": "Application specific response metadata. Must be set in the first response for streaming APIs."
        },
        "contentType": {
          "description": "The HTTP Content-Type header value specifying the content type of the body.",
          "type": "string"
        },
        "data": {
          "description": "The HTTP request/response body as raw binary.",
          "format": "byte",
          "type": "string"
        }
      },
      "description": "Message that represents an arbitrary HTTP body. It should only be used for payload formats that can't be represented as JSON, such as raw binary or an HTML page. This message can be used both in streaming and non-streaming API methods in the request as well as the response. It can be used as a top-level request field, which is convenient if one wants to extract parameters from either the URL or HTTP template into the request fields and also want access to the raw HTTP body. Example: message GetResourceRequest { // A unique request id. string request_id = 1; // The raw HTTP body is bound to this field. google.api.HttpBody http_body = 2; } service ResourceService { rpc GetResource(GetResourceRequest) returns (google.api.HttpBody); rpc UpdateResource(google.api.HttpBody) returns (google.protobuf.Empty); } Example with streaming methods: service CaldavService { rpc GetCalendar(stream google.api.HttpBody) returns (stream google.api.HttpBody); rpc UpdateCalendar(stream google.api.HttpBody) returns (stream google.api.HttpBody); } Use of this type only changes how the request and response bodies are handled, all other features will continue to work unchanged."
    }
  },
  "kind": "discovery#restDescription",
  "name": "domainsrdap"
}
