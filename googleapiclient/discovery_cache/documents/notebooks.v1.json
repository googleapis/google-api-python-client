{
  "name": "notebooks",
  "schemas": {
    "TestIamPermissionsRequest": {
      "description": "Request message for `TestIamPermissions` method.",
      "type": "object",
      "id": "TestIamPermissionsRequest",
      "properties": {
        "permissions": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "The set of permissions to check for the `resource`. Permissions with wildcards (such as '*' or 'storage.*') are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions)."
        }
      }
    },
    "ShieldedInstanceConfig": {
      "description": "A set of Shielded Instance options. Check [Images using supported Shielded VM features] Not all combinations are valid.",
      "type": "object",
      "properties": {
        "enableIntegrityMonitoring": {
          "type": "boolean",
          "description": "Defines whether the instance has integrity monitoring enabled. Enables monitoring and attestation of the boot integrity of the instance. The attestation is performed against the integrity policy baseline. This baseline is initially derived from the implicitly trusted boot image when the instance is created. Enabled by default."
        },
        "enableVtpm": {
          "type": "boolean",
          "description": "Defines whether the instance has the vTPM enabled. Enabled by default."
        },
        "enableSecureBoot": {
          "type": "boolean",
          "description": "Defines whether the instance has Secure Boot enabled. Secure Boot helps ensure that the system only runs authentic software by verifying the digital signature of all boot components, and halting the boot process if signature verification fails. Disabled by default."
        }
      },
      "id": "ShieldedInstanceConfig"
    },
    "TestIamPermissionsResponse": {
      "properties": {
        "permissions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A subset of `TestPermissionsRequest.permissions` that the caller is allowed."
        }
      },
      "description": "Response message for `TestIamPermissions` method.",
      "type": "object",
      "id": "TestIamPermissionsResponse"
    },
    "ContainerImage": {
      "type": "object",
      "id": "ContainerImage",
      "description": "Definition of a container image for starting a notebook instance with the environment installed in a container.",
      "properties": {
        "tag": {
          "type": "string",
          "description": "The tag of the container image. If not specified, this defaults to the latest tag."
        },
        "repository": {
          "description": "Required. The path to the container image repository. For example: `gcr.io/{project_id}/{image_name}`",
          "type": "string"
        }
      }
    },
    "UpgradeInstanceRequest": {
      "id": "UpgradeInstanceRequest",
      "type": "object",
      "description": "Request for upgrading a notebook instance",
      "properties": {}
    },
    "ListLocationsResponse": {
      "type": "object",
      "description": "The response message for Locations.ListLocations.",
      "properties": {
        "nextPageToken": {
          "description": "The standard List next-page token.",
          "type": "string"
        },
        "locations": {
          "type": "array",
          "items": {
            "$ref": "Location"
          },
          "description": "A list of locations that matches the specified filter in the request."
        }
      },
      "id": "ListLocationsResponse"
    },
    "SetInstanceLabelsRequest": {
      "id": "SetInstanceLabelsRequest",
      "type": "object",
      "properties": {
        "labels": {
          "description": "Labels to apply to this instance. These can be later modified by the setLabels method",
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        }
      },
      "description": "Request for setting instance labels."
    },
    "ListOperationsResponse": {
      "type": "object",
      "properties": {
        "operations": {
          "description": "A list of operations that matches the specified filter in the request.",
          "items": {
            "$ref": "Operation"
          },
          "type": "array"
        },
        "nextPageToken": {
          "description": "The standard List next-page token.",
          "type": "string"
        }
      },
      "id": "ListOperationsResponse",
      "description": "The response message for Operations.ListOperations."
    },
    "ListEnvironmentsResponse": {
      "type": "object",
      "properties": {
        "environments": {
          "items": {
            "$ref": "Environment"
          },
          "type": "array",
          "description": "A list of returned environments."
        },
        "nextPageToken": {
          "type": "string",
          "description": "A page token that can be used to continue listing from the last result in the next list call."
        },
        "unreachable": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Locations that could not be reached."
        }
      },
      "description": "Response for listing environments.",
      "id": "ListEnvironmentsResponse"
    },
    "SetIamPolicyRequest": {
      "description": "Request message for `SetIamPolicy` method.",
      "type": "object",
      "id": "SetIamPolicyRequest",
      "properties": {
        "policy": {
          "description": "REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Cloud Platform services (such as Projects) might reject them.",
          "$ref": "Policy"
        }
      }
    },
    "ListInstancesResponse": {
      "description": "Response for listing notebook instances.",
      "properties": {
        "unreachable": {
          "items": {
            "type": "string"
          },
          "description": "Locations that could not be reached. For example, ['us-west1-a', 'us-central1-b']. A ListInstancesResponse will only contain either instances or unreachables,",
          "type": "array"
        },
        "nextPageToken": {
          "description": "Page token that can be used to continue listing from the last result in the next list call.",
          "type": "string"
        },
        "instances": {
          "type": "array",
          "items": {
            "$ref": "Instance"
          },
          "description": "A list of returned instances."
        }
      },
      "type": "object",
      "id": "ListInstancesResponse"
    },
    "SetInstanceAcceleratorRequest": {
      "type": "object",
      "properties": {
        "type": {
          "description": "Required. Type of this accelerator.",
          "enumDescriptions": [
            "Accelerator type is not specified.",
            "Accelerator type is Nvidia Tesla K80.",
            "Accelerator type is Nvidia Tesla P100.",
            "Accelerator type is Nvidia Tesla V100.",
            "Accelerator type is Nvidia Tesla P4.",
            "Accelerator type is Nvidia Tesla T4.",
            "Accelerator type is Nvidia Tesla A100.",
            "Accelerator type is NVIDIA Tesla T4 Virtual Workstations.",
            "Accelerator type is NVIDIA Tesla P100 Virtual Workstations.",
            "Accelerator type is NVIDIA Tesla P4 Virtual Workstations.",
            "(Coming soon) Accelerator type is TPU V2.",
            "(Coming soon) Accelerator type is TPU V3."
          ],
          "type": "string",
          "enum": [
            "ACCELERATOR_TYPE_UNSPECIFIED",
            "NVIDIA_TESLA_K80",
            "NVIDIA_TESLA_P100",
            "NVIDIA_TESLA_V100",
            "NVIDIA_TESLA_P4",
            "NVIDIA_TESLA_T4",
            "NVIDIA_TESLA_A100",
            "NVIDIA_TESLA_T4_VWS",
            "NVIDIA_TESLA_P100_VWS",
            "NVIDIA_TESLA_P4_VWS",
            "TPU_V2",
            "TPU_V3"
          ]
        },
        "coreCount": {
          "type": "string",
          "description": "Required. Count of cores of this accelerator. Note that not all combinations of `type` and `core_count` are valid. Check [GPUs on Compute Engine](https://cloud.google.com/compute/docs/gpus/#gpus-list) to find a valid combination. TPUs are not supported.",
          "format": "int64"
        }
      },
      "id": "SetInstanceAcceleratorRequest",
      "description": "Request for setting instance accelerator."
    },
    "Disk": {
      "type": "object",
      "description": "An instance-attached disk resource.",
      "properties": {
        "index": {
          "description": "A zero-based index to this disk, where 0 is reserved for the boot disk. If you have many disks attached to an instance, each disk would have a unique index number.",
          "type": "string",
          "format": "int64"
        },
        "autoDelete": {
          "type": "boolean",
          "description": "Indicates whether the disk will be auto-deleted when the instance is deleted (but not when the disk is detached from the instance)."
        },
        "diskSizeGb": {
          "type": "string",
          "format": "int64",
          "description": "Indicates the size of the disk in base-2 GB."
        },
        "guestOsFeatures": {
          "description": "Indicates a list of features to enable on the guest operating system. Applicable only for bootable images. Read Enabling guest operating system features to see a list of available options.",
          "type": "array",
          "items": {
            "$ref": "GuestOsFeature"
          }
        },
        "deviceName": {
          "description": "Indicates a unique device name of your choice that is reflected into the /dev/disk/by-id/google-* tree of a Linux operating system running within the instance. This name can be used to reference the device for mounting, resizing, and so on, from within the instance. If not specified, the server chooses a default device name to apply to this disk, in the form persistent-disk-x, where x is a number assigned by Google Compute Engine.This field is only applicable for persistent disks.",
          "type": "string"
        },
        "licenses": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of publicly visible licenses. Reserved for Google's use. A License represents billing and aggregate usage data for public and marketplace images."
        },
        "mode": {
          "type": "string",
          "description": "The mode in which to attach this disk, either READ_WRITE or READ_ONLY. If not specified, the default is to attach the disk in READ_WRITE mode. Valid values: READ_ONLY READ_WRITE"
        },
        "interface": {
          "type": "string",
          "description": "Indicates the disk interface to use for attaching this disk, which is either SCSI or NVME. The default is SCSI. Persistent disks must always use SCSI and the request will fail if you attempt to attach a persistent disk in any other format than SCSI. Local SSDs can use either NVME or SCSI. For performance characteristics of SCSI over NVMe, see Local SSD performance. Valid values: NVME SCSI"
        },
        "boot": {
          "type": "boolean",
          "description": "Indicates that this is a boot disk. The virtual machine will use the first partition of the disk for its root filesystem."
        },
        "type": {
          "type": "string",
          "description": "Indicates the type of the disk, either SCRATCH or PERSISTENT. Valid values: PERSISTENT SCRATCH"
        },
        "kind": {
          "type": "string",
          "description": "Type of the resource. Always compute#attachedDisk for attached disks."
        },
        "source": {
          "type": "string",
          "description": "Indicates a valid partial or full URL to an existing Persistent Disk resource."
        }
      },
      "id": "Disk"
    },
    "SetInstanceMachineTypeRequest": {
      "id": "SetInstanceMachineTypeRequest",
      "type": "object",
      "properties": {
        "machineType": {
          "description": "Required. The [Compute Engine machine type](https://cloud.google.com/compute/docs/machine-types).",
          "type": "string"
        }
      },
      "description": "Request for setting instance machine type."
    },
    "IsInstanceUpgradeableResponse": {
      "type": "object",
      "description": "Response for checking if a notebook instance is upgradeable.",
      "id": "IsInstanceUpgradeableResponse",
      "properties": {
        "upgradeVersion": {
          "type": "string",
          "description": "The version this instance will be upgraded to if calling the upgrade endpoint. This field will only be populated if field upgradeable is true."
        },
        "upgradeable": {
          "type": "boolean",
          "description": "If an instance is upgradeable."
        },
        "upgradeInfo": {
          "description": "Additional information about upgrade.",
          "type": "string"
        }
      }
    },
    "CancelOperationRequest": {
      "properties": {},
      "type": "object",
      "description": "The request message for Operations.CancelOperation.",
      "id": "CancelOperationRequest"
    },
    "ReportInstanceInfoRequest": {
      "properties": {
        "metadata": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "The metadata reported to Notebooks API. This will be merged to the instance metadata store"
        },
        "vmId": {
          "description": "Required. The VM hardware token for authenticating the VM. https://cloud.google.com/compute/docs/instances/verifying-instance-identity",
          "type": "string"
        }
      },
      "description": "Request for notebook instances to report information to Notebooks API.",
      "id": "ReportInstanceInfoRequest",
      "type": "object"
    },
    "ExecutionTemplate": {
      "type": "object",
      "id": "ExecutionTemplate",
      "description": "The description a notebook execution workload.",
      "properties": {
        "outputNotebookFolder": {
          "description": "Path to the notebook folder to write to. Must be in a Google Cloud Storage bucket path. Format: gs://{project_id}/{folder} Ex: gs://notebook_user/scheduled_notebooks",
          "type": "string"
        },
        "paramsYamlFile": {
          "type": "string",
          "description": "Parameters to be overridden in the notebook during execution. Ref https://papermill.readthedocs.io/en/latest/usage-parameterize.html on how to specifying parameters in the input notebook and pass them here in an YAML file. Ex: gs://notebook_user/scheduled_notebooks/sentiment_notebook_params.yaml"
        },
        "masterType": {
          "type": "string",
          "description": "Specifies the type of virtual machine to use for your training job's master worker. You must specify this field when `scaleTier` is set to `CUSTOM`. You can use certain Compute Engine machine types directly in this field. The following types are supported: - `n1-standard-4` - `n1-standard-8` - `n1-standard-16` - `n1-standard-32` - `n1-standard-64` - `n1-standard-96` - `n1-highmem-2` - `n1-highmem-4` - `n1-highmem-8` - `n1-highmem-16` - `n1-highmem-32` - `n1-highmem-64` - `n1-highmem-96` - `n1-highcpu-16` - `n1-highcpu-32` - `n1-highcpu-64` - `n1-highcpu-96` Alternatively, you can use the following legacy machine types: - `standard` - `large_model` - `complex_model_s` - `complex_model_m` - `complex_model_l` - `standard_gpu` - `complex_model_m_gpu` - `complex_model_l_gpu` - `standard_p100` - `complex_model_m_p100` - `standard_v100` - `large_model_v100` - `complex_model_m_v100` - `complex_model_l_v100` Finally, if you want to use a TPU for training, specify `cloud_tpu` in this field. Learn more about the [special configuration options for training with TPU."
        },
        "labels": {
          "description": "Labels for execution. If execution is scheduled, a field included will be 'nbs-scheduled'. Otherwise, it is an immediate execution, and an included field will be 'nbs-immediate'. Use fields to efficiently index between various types of executions.",
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "acceleratorConfig": {
          "description": "Configuration (count and accelerator type) for hardware running notebook execution.",
          "$ref": "SchedulerAcceleratorConfig"
        },
        "scaleTier": {
          "type": "string",
          "enum": [
            "SCALE_TIER_UNSPECIFIED",
            "BASIC",
            "STANDARD_1",
            "PREMIUM_1",
            "BASIC_GPU",
            "BASIC_TPU",
            "CUSTOM"
          ],
          "enumDescriptions": [
            "Unspecified Scale Tier.",
            "A single worker instance. This tier is suitable for learning how to use Cloud ML, and for experimenting with new models using small datasets.",
            "Many workers and a few parameter servers.",
            "A large number of workers with many parameter servers.",
            "A single worker instance with a K80 GPU.",
            "A single worker instance with a Cloud TPU.",
            "The CUSTOM tier is not a set tier, but rather enables you to use your own cluster specification. When you use this tier, set values to configure your processing cluster according to these guidelines: * You _must_ set `TrainingInput.masterType` to specify the type of machine to use for your master node. This is the only required setting. * You _may_ set `TrainingInput.workerCount` to specify the number of workers to use. If you specify one or more workers, you _must_ also set `TrainingInput.workerType` to specify the type of machine to use for your worker nodes. * You _may_ set `TrainingInput.parameterServerCount` to specify the number of parameter servers to use. If you specify one or more parameter servers, you _must_ also set `TrainingInput.parameterServerType` to specify the type of machine to use for your parameter servers. Note that all of your workers must use the same machine type, which can be different from your parameter server type and master type. Your parameter servers must likewise use the same machine type, which can be different from your worker type and master type."
          ],
          "description": "Required. Scale tier of the hardware used for notebook execution."
        },
        "containerImageUri": {
          "description": "Container Image URI to a DLVM Example: 'gcr.io/deeplearning-platform-release/base-cu100' More examples can be found at: https://cloud.google.com/ai-platform/deep-learning-containers/docs/choosing-container",
          "type": "string"
        },
        "inputNotebookFile": {
          "type": "string",
          "description": "Path to the notebook file to execute. Must be in a Google Cloud Storage bucket. Format: gs://{project_id}/{folder}/{notebook_file_name} Ex: gs://notebook_user/scheduled_notebooks/sentiment_notebook.ipynb"
        }
      }
    },
    "GetInstanceHealthResponse": {
      "properties": {
        "healthState": {
          "enumDescriptions": [
            "The instance substate is unknown.",
            "The instance is known to be in an healthy state (for example, critical daemons are running) Applies to ACTIVE state.",
            "The instance is known to be in an unhealthy state (for example, critical daemons are not running) Applies to ACTIVE state.",
            "The instance has not installed health monitoring agent. Applies to ACTIVE state.",
            "The instance health monitoring agent is not running. Applies to ACTIVE state."
          ],
          "type": "string",
          "readOnly": true,
          "enum": [
            "HEALTH_STATE_UNSPECIFIED",
            "HEALTHY",
            "UNHEALTHY",
            "AGENT_NOT_INSTALLED",
            "AGENT_NOT_RUNNING"
          ],
          "description": "Output only. Runtime health_state."
        },
        "healthInfo": {
          "description": "Output only. Additional information about instance health. Example: healthInfo\": { \"docker_proxy_agent_status\": \"1\", \"docker_status\": \"1\", \"jupyterlab_api_status\": \"-1\", \"jupyterlab_status\": \"-1\", \"updated\": \"2020-10-18 09:40:03.573409\" }",
          "type": "object",
          "readOnly": true,
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "description": "Response for checking if a notebook instance is healthy.",
      "type": "object",
      "id": "GetInstanceHealthResponse"
    },
    "UpgradeInstanceInternalRequest": {
      "type": "object",
      "description": "Request for upgrading a notebook instance from within the VM",
      "id": "UpgradeInstanceInternalRequest",
      "properties": {
        "vmId": {
          "type": "string",
          "description": "Required. The VM hardware token for authenticating the VM. https://cloud.google.com/compute/docs/instances/verifying-instance-identity"
        }
      }
    },
    "OperationMetadata": {
      "properties": {
        "endTime": {
          "type": "string",
          "description": "The time the operation finished running.",
          "format": "google-datetime"
        },
        "requestedCancellation": {
          "type": "boolean",
          "description": "Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`."
        },
        "verb": {
          "type": "string",
          "description": "Name of the verb executed by the operation."
        },
        "endpoint": {
          "description": "API endpoint name of this operation.",
          "type": "string"
        },
        "apiVersion": {
          "type": "string",
          "description": "API version used to start the operation."
        },
        "statusMessage": {
          "type": "string",
          "description": "Human-readable status of the operation, if any."
        },
        "createTime": {
          "description": "The time the operation was created.",
          "type": "string",
          "format": "google-datetime"
        },
        "target": {
          "description": "Server-defined resource path for the target of the operation.",
          "type": "string"
        }
      },
      "description": "Represents the metadata of the long-running operation.",
      "id": "OperationMetadata",
      "type": "object"
    },
    "Status": {
      "type": "object",
      "id": "Status",
      "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
      "properties": {
        "details": {
          "items": {
            "type": "object",
            "additionalProperties": {
              "description": "Properties of the object. Contains field @type with type URL.",
              "type": "any"
            }
          },
          "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use.",
          "type": "array"
        },
        "message": {
          "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.",
          "type": "string"
        },
        "code": {
          "type": "integer",
          "format": "int32",
          "description": "The status code, which should be an enum value of google.rpc.Code."
        }
      }
    },
    "Execution": {
      "properties": {
        "createTime": {
          "type": "string",
          "description": "Output only. Time the Execution was instantiated.",
          "format": "google-datetime",
          "readOnly": true
        },
        "displayName": {
          "description": "Output only. Name used for UI purposes. Name can only contain alphanumeric characters and underscores '_'.",
          "type": "string",
          "readOnly": true
        },
        "description": {
          "type": "string",
          "description": "A brief description of this execution."
        },
        "state": {
          "description": "Output only. State of the underlying AI Platform job.",
          "readOnly": true,
          "type": "string",
          "enumDescriptions": [
            "The job state is unspecified.",
            "The job has been just created and processing has not yet begun.",
            "The service is preparing to execution the job.",
            "The job is in progress.",
            "The job completed successfully.",
            "The job failed. `error_message` should contain the details of the failure.",
            "The job is being cancelled. `error_message` should describe the reason for the cancellation.",
            "The job has been cancelled. `error_message` should describe the reason for the cancellation."
          ],
          "enum": [
            "STATE_UNSPECIFIED",
            "QUEUED",
            "PREPARING",
            "RUNNING",
            "SUCCEEDED",
            "FAILED",
            "CANCELLING",
            "CANCELLED"
          ]
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. The resource name of the execute. Format: `projects/{project_id}/locations/{location}/execution/{execution_id}"
        },
        "updateTime": {
          "description": "Output only. Time the Execution was last updated.",
          "type": "string",
          "readOnly": true,
          "format": "google-datetime"
        },
        "outputNotebookFile": {
          "description": "Output notebook file generated by this execution",
          "type": "string"
        },
        "executionTemplate": {
          "$ref": "ExecutionTemplate",
          "description": "execute metadata including name, hardware spec, region, labels, etc."
        }
      },
      "description": "The definition of a single executed notebook.",
      "type": "object",
      "id": "Execution"
    },
    "StartInstanceRequest": {
      "type": "object",
      "id": "StartInstanceRequest",
      "description": "Request for starting a notebook instance",
      "properties": {}
    },
    "Instance": {
      "type": "object",
      "id": "Instance",
      "description": "The definition of a notebook instance.",
      "properties": {
        "installGpuDriver": {
          "type": "boolean",
          "description": "Whether the end user authorizes Google Cloud to install GPU driver on this instance. If this field is empty or set to false, the GPU driver won't be installed. Only applicable to instances with GPUs."
        },
        "state": {
          "readOnly": true,
          "enum": [
            "STATE_UNSPECIFIED",
            "STARTING",
            "PROVISIONING",
            "ACTIVE",
            "STOPPING",
            "STOPPED",
            "DELETED",
            "UPGRADING",
            "INITIALIZING",
            "REGISTERING"
          ],
          "type": "string",
          "description": "Output only. The state of this instance.",
          "enumDescriptions": [
            "State is not specified.",
            "The control logic is starting the instance.",
            "The control logic is installing required frameworks and registering the instance with notebook proxy",
            "The instance is running.",
            "The control logic is stopping the instance.",
            "The instance is stopped.",
            "The instance is deleted.",
            "The instance is upgrading.",
            "The instance is being created.",
            "The instance is getting registered."
          ]
        },
        "bootDiskSizeGb": {
          "description": "Input only. The size of the boot disk in GB attached to this instance, up to a maximum of 64000 GB (64 TB). The minimum recommended value is 100 GB. If not specified, this defaults to 100.",
          "format": "int64",
          "type": "string"
        },
        "containerImage": {
          "description": "Use a container image to start the notebook instance.",
          "$ref": "ContainerImage"
        },
        "subnet": {
          "type": "string",
          "description": "The name of the subnet that this instance is in. Format: `projects/{project_id}/regions/{region}/subnetworks/{subnetwork_id}`"
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Labels to apply to this instance. These can be later modified by the setLabels method."
        },
        "createTime": {
          "description": "Output only. Instance creation time.",
          "readOnly": true,
          "format": "google-datetime",
          "type": "string"
        },
        "upgradeHistory": {
          "description": "The upgrade history of this instance.",
          "items": {
            "$ref": "UpgradeHistoryEntry"
          },
          "type": "array"
        },
        "metadata": {
          "description": "Custom metadata to apply to this instance.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "serviceAccount": {
          "type": "string",
          "description": "The service account on this instance, giving access to other Google Cloud services. You can use any service account within the same project, but you must have the service account user permission to use the instance. If not specified, the [Compute Engine default service account](https://cloud.google.com/compute/docs/access/service-accounts#default_service_account) is used."
        },
        "machineType": {
          "type": "string",
          "description": "Required. The [Compute Engine machine type](/compute/docs/machine-types) of this instance."
        },
        "network": {
          "type": "string",
          "description": "The name of the VPC that this instance is in. Format: `projects/{project_id}/global/networks/{network_id}`"
        },
        "instanceOwners": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Input only. The owner of this instance after creation. Format: `alias@example.com` Currently supports one owner only. If not specified, all of the service account users of your VM instance's service account can use the instance."
        },
        "postStartupScript": {
          "description": "Path to a Bash script that automatically runs after a notebook instance fully boots up. The path must be a URL or Cloud Storage path (gs://path-to-file/file-name).",
          "type": "string"
        },
        "proxyUri": {
          "description": "Output only. The proxy endpoint that is used to access the Jupyter notebook.",
          "type": "string",
          "readOnly": true
        },
        "tags": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Optional. The Compute Engine tags to add to runtime (see [Tagging instances](https://cloud.google.com/compute/docs/label-or-tag-resources#tags))."
        },
        "bootDiskType": {
          "type": "string",
          "enumDescriptions": [
            "Disk type not set.",
            "Standard persistent disk type.",
            "SSD persistent disk type.",
            "Balanced persistent disk type."
          ],
          "enum": [
            "DISK_TYPE_UNSPECIFIED",
            "PD_STANDARD",
            "PD_SSD",
            "PD_BALANCED"
          ],
          "description": "Input only. The type of the boot disk attached to this instance, defaults to standard persistent disk (`PD_STANDARD`)."
        },
        "disks": {
          "type": "array",
          "description": "Output only. Attached disks to notebook instance.",
          "readOnly": true,
          "items": {
            "$ref": "Disk"
          }
        },
        "kmsKey": {
          "description": "Input only. The KMS key used to encrypt the disks, only applicable if disk_encryption is CMEK. Format: `projects/{project_id}/locations/{location}/keyRings/{key_ring_id}/cryptoKeys/{key_id}` Learn more about [using your own encryption keys](/kms/docs/quickstart).",
          "type": "string"
        },
        "noRemoveDataDisk": {
          "description": "Input only. If true, the data disk will not be auto deleted when deleting the instance.",
          "type": "boolean"
        },
        "name": {
          "description": "Output only. The name of this notebook instance. Format: `projects/{project_id}/locations/{location}/instances/{instance_id}`",
          "readOnly": true,
          "type": "string"
        },
        "updateTime": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. Instance update time.",
          "format": "google-datetime"
        },
        "noProxyAccess": {
          "description": "If true, the notebook instance will not register with the proxy.",
          "type": "boolean"
        },
        "shieldedInstanceConfig": {
          "description": "Optional. Shielded VM configuration. [Images using supported Shielded VM features] (https://cloud.google.com/compute/docs/instances/modifying-shielded-vm).",
          "$ref": "ShieldedInstanceConfig"
        },
        "noPublicIp": {
          "type": "boolean",
          "description": "If true, no public IP will be assigned to this instance."
        },
        "customGpuDriverPath": {
          "description": "Specify a custom Cloud Storage path where the GPU driver is stored. If not specified, we'll automatically choose from official GPU drivers.",
          "type": "string"
        },
        "dataDiskType": {
          "description": "Input only. The type of the data disk attached to this instance, defaults to standard persistent disk (`PD_STANDARD`).",
          "enumDescriptions": [
            "Disk type not set.",
            "Standard persistent disk type.",
            "SSD persistent disk type.",
            "Balanced persistent disk type."
          ],
          "enum": [
            "DISK_TYPE_UNSPECIFIED",
            "PD_STANDARD",
            "PD_SSD",
            "PD_BALANCED"
          ],
          "type": "string"
        },
        "diskEncryption": {
          "enumDescriptions": [
            "Disk encryption is not specified.",
            "Use Google managed encryption keys to encrypt the boot disk.",
            "Use customer managed encryption keys to encrypt the boot disk."
          ],
          "enum": [
            "DISK_ENCRYPTION_UNSPECIFIED",
            "GMEK",
            "CMEK"
          ],
          "type": "string",
          "description": "Input only. Disk encryption method used on the boot and data disks, defaults to GMEK."
        },
        "serviceAccountScopes": {
          "description": "Optional. The URIs of service account scopes to be included in Compute Engine instances. If not specified, the following [scopes](https://cloud.google.com/compute/docs/access/service-accounts#accesscopesiam) are defined: - https://www.googleapis.com/auth/cloud-platform - https://www.googleapis.com/auth/userinfo.email If not using default scopes, you need at least: https://www.googleapis.com/auth/compute",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "acceleratorConfig": {
          "description": "The hardware accelerator used on this instance. If you use accelerators, make sure that your configuration has [enough vCPUs and memory to support the `machine_type` you have selected](/compute/docs/gpus/#gpus-list).",
          "$ref": "AcceleratorConfig"
        },
        "vmImage": {
          "description": "Use a Compute Engine VM image to start the notebook instance.",
          "$ref": "VmImage"
        },
        "dataDiskSizeGb": {
          "format": "int64",
          "description": "Input only. The size of the data disk in GB attached to this instance, up to a maximum of 64000 GB (64 TB). You can choose the size of the data disk based on how big your notebooks and data are. If not specified, this defaults to 100.",
          "type": "string"
        }
      }
    },
    "ResetInstanceRequest": {
      "properties": {},
      "description": "Request for reseting a notebook instance",
      "type": "object",
      "id": "ResetInstanceRequest"
    },
    "Binding": {
      "id": "Binding",
      "type": "object",
      "properties": {
        "condition": {
          "$ref": "Expr",
          "description": "The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the members in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies)."
        },
        "role": {
          "type": "string",
          "description": "Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`."
        },
        "members": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Specifies the identities requesting access for a Cloud Platform resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. "
        }
      },
      "description": "Associates `members` with a `role`."
    },
    "Environment": {
      "id": "Environment",
      "type": "object",
      "properties": {
        "postStartupScript": {
          "type": "string",
          "description": "Path to a Bash script that automatically runs after a notebook instance fully boots up. The path must be a URL or Cloud Storage path. Example: `\"gs://path-to-file/file-name\"`"
        },
        "displayName": {
          "description": "Display name of this environment for the UI.",
          "type": "string"
        },
        "vmImage": {
          "$ref": "VmImage",
          "description": "Use a Compute Engine VM image to start the notebook instance."
        },
        "description": {
          "description": "A brief description of this environment.",
          "type": "string"
        },
        "createTime": {
          "description": "Output only. The time at which this environment was created.",
          "type": "string",
          "readOnly": true,
          "format": "google-datetime"
        },
        "name": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. Name of this environment. Format: `projects/{project_id}/locations/{location}/environments/{environment_id}`"
        },
        "containerImage": {
          "$ref": "ContainerImage",
          "description": "Use a container image to start the notebook instance."
        }
      },
      "description": "Definition of a software environment that is used to start a notebook instance."
    },
    "Expr": {
      "description": "Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: \"Summary size limit\" description: \"Determines if a summary is less than 100 chars\" expression: \"document.summary.size() \u003c 100\" Example (Equality): title: \"Requestor is owner\" description: \"Determines if requestor is the document owner\" expression: \"document.owner == request.auth.claims.email\" Example (Logic): title: \"Public documents\" description: \"Determine whether the document should be publicly visible\" expression: \"document.type != 'private' && document.type != 'internal'\" Example (Data Manipulation): title: \"Notification string\" description: \"Create a notification string with a timestamp.\" expression: \"'New message received at ' + string(document.create_time)\" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.",
      "properties": {
        "expression": {
          "type": "string",
          "description": "Textual representation of an expression in Common Expression Language syntax."
        },
        "location": {
          "type": "string",
          "description": "Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file."
        },
        "description": {
          "type": "string",
          "description": "Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI."
        },
        "title": {
          "type": "string",
          "description": "Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression."
        }
      },
      "id": "Expr",
      "type": "object"
    },
    "Operation": {
      "type": "object",
      "description": "This resource represents a long-running operation that is the result of a network API call.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`."
        },
        "response": {
          "additionalProperties": {
            "description": "Properties of the object. Contains field @type with type URL.",
            "type": "any"
          },
          "description": "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
          "type": "object"
        },
        "metadata": {
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @type with type URL."
          },
          "type": "object",
          "description": "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any."
        },
        "error": {
          "description": "The error result of the operation in case of failure or cancellation.",
          "$ref": "Status"
        },
        "done": {
          "type": "boolean",
          "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available."
        }
      },
      "id": "Operation"
    },
    "UpgradeHistoryEntry": {
      "properties": {
        "framework": {
          "description": "The framework of this notebook instance.",
          "type": "string"
        },
        "version": {
          "type": "string",
          "description": "The version of the notebook instance before this upgrade."
        },
        "snapshot": {
          "description": "The snapshot of the boot disk of this notebook instance before upgrade.",
          "type": "string"
        },
        "action": {
          "enum": [
            "ACTION_UNSPECIFIED",
            "UPGRADE",
            "ROLLBACK"
          ],
          "description": "Action. Rolloback or Upgrade.",
          "enumDescriptions": [
            "Operation is not specified.",
            "Upgrade.",
            "Rollback."
          ],
          "type": "string"
        },
        "createTime": {
          "format": "google-datetime",
          "description": "The time that this instance upgrade history entry is created.",
          "type": "string"
        },
        "vmImage": {
          "description": "The VM image before this instance upgrade.",
          "type": "string"
        },
        "targetImage": {
          "description": "Target VM Image. Format: ainotebooks-vm/project/image-name/name.",
          "type": "string"
        },
        "containerImage": {
          "description": "The container image before this instance upgrade.",
          "type": "string"
        },
        "state": {
          "type": "string",
          "enumDescriptions": [
            "State is not specified.",
            "The instance upgrade is started.",
            "The instance upgrade is succeeded.",
            "The instance upgrade is failed."
          ],
          "description": "The state of this instance upgrade history entry.",
          "enum": [
            "STATE_UNSPECIFIED",
            "STARTED",
            "SUCCEEDED",
            "FAILED"
          ]
        }
      },
      "id": "UpgradeHistoryEntry",
      "description": "The entry of VM image upgrade history.",
      "type": "object"
    },
    "GuestOsFeature": {
      "description": "Guest OS features for boot disk.",
      "id": "GuestOsFeature",
      "type": "object",
      "properties": {
        "type": {
          "description": "The ID of a supported feature. Read Enabling guest operating system features to see a list of available options. Valid values: FEATURE_TYPE_UNSPECIFIED MULTI_IP_SUBNET SECURE_BOOT UEFI_COMPATIBLE VIRTIO_SCSI_MULTIQUEUE WINDOWS",
          "type": "string"
        }
      }
    },
    "TriggerScheduleRequest": {
      "description": "Request for created scheduled notebooks",
      "type": "object",
      "id": "TriggerScheduleRequest",
      "properties": {}
    },
    "AcceleratorConfig": {
      "type": "object",
      "properties": {
        "coreCount": {
          "type": "string",
          "description": "Count of cores of this accelerator.",
          "format": "int64"
        },
        "type": {
          "enumDescriptions": [
            "Accelerator type is not specified.",
            "Accelerator type is Nvidia Tesla K80.",
            "Accelerator type is Nvidia Tesla P100.",
            "Accelerator type is Nvidia Tesla V100.",
            "Accelerator type is Nvidia Tesla P4.",
            "Accelerator type is Nvidia Tesla T4.",
            "Accelerator type is Nvidia Tesla A100.",
            "Accelerator type is NVIDIA Tesla T4 Virtual Workstations.",
            "Accelerator type is NVIDIA Tesla P100 Virtual Workstations.",
            "Accelerator type is NVIDIA Tesla P4 Virtual Workstations.",
            "(Coming soon) Accelerator type is TPU V2.",
            "(Coming soon) Accelerator type is TPU V3."
          ],
          "type": "string",
          "description": "Type of this accelerator.",
          "enum": [
            "ACCELERATOR_TYPE_UNSPECIFIED",
            "NVIDIA_TESLA_K80",
            "NVIDIA_TESLA_P100",
            "NVIDIA_TESLA_V100",
            "NVIDIA_TESLA_P4",
            "NVIDIA_TESLA_T4",
            "NVIDIA_TESLA_A100",
            "NVIDIA_TESLA_T4_VWS",
            "NVIDIA_TESLA_P100_VWS",
            "NVIDIA_TESLA_P4_VWS",
            "TPU_V2",
            "TPU_V3"
          ]
        }
      },
      "description": "Definition of a hardware accelerator. Note that not all combinations of `type` and `core_count` are valid. Check [GPUs on Compute Engine](/compute/docs/gpus/#gpus-list) to find a valid combination. TPUs are not supported.",
      "id": "AcceleratorConfig"
    },
    "VmImage": {
      "properties": {
        "imageName": {
          "type": "string",
          "description": "Use VM image name to find the image."
        },
        "project": {
          "type": "string",
          "description": "Required. The name of the Google Cloud project that this VM image belongs to. Format: `projects/{project_id}`"
        },
        "imageFamily": {
          "type": "string",
          "description": "Use this VM image family to find the image; the newest image in this family will be used."
        }
      },
      "id": "VmImage",
      "description": "Definition of a custom Compute Engine virtual machine image for starting a notebook instance with the environment installed directly on the VM.",
      "type": "object"
    },
    "ListSchedulesResponse": {
      "id": "ListSchedulesResponse",
      "type": "object",
      "description": "Response for listing scheduled notebook job.",
      "properties": {
        "schedules": {
          "description": "A list of returned instances.",
          "items": {
            "$ref": "Schedule"
          },
          "type": "array"
        },
        "unreachable": {
          "type": "array",
          "description": "Schedules that could not be reached. For example, ['projects/{project_id}/location/{location}/schedules/monthly_digest', 'projects/{project_id}/location/{location}/schedules/weekly_sentiment'].",
          "items": {
            "type": "string"
          }
        },
        "nextPageToken": {
          "description": "Page token that can be used to continue listing from the last result in the next list call.",
          "type": "string"
        }
      }
    },
    "SchedulerAcceleratorConfig": {
      "description": "Definition of a hardware accelerator. Note that not all combinations of `type` and `core_count` are valid. Check GPUs on Compute Engine to find a valid combination. TPUs are not supported.",
      "properties": {
        "type": {
          "enumDescriptions": [
            "Unspecified accelerator type. Default to no GPU.",
            "Nvidia Tesla K80 GPU.",
            "Nvidia Tesla P100 GPU.",
            "Nvidia Tesla V100 GPU.",
            "Nvidia Tesla P4 GPU.",
            "Nvidia Tesla T4 GPU.",
            "TPU v2.",
            "TPU v3."
          ],
          "type": "string",
          "description": "Type of this accelerator.",
          "enum": [
            "SCHEDULER_ACCELERATOR_TYPE_UNSPECIFIED",
            "NVIDIA_TESLA_K80",
            "NVIDIA_TESLA_P100",
            "NVIDIA_TESLA_V100",
            "NVIDIA_TESLA_P4",
            "NVIDIA_TESLA_T4",
            "TPU_V2",
            "TPU_V3"
          ]
        },
        "coreCount": {
          "description": "Count of cores of this accelerator.",
          "format": "int64",
          "type": "string"
        }
      },
      "id": "SchedulerAcceleratorConfig",
      "type": "object"
    },
    "Empty": {
      "id": "Empty",
      "type": "object",
      "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`.",
      "properties": {}
    },
    "RegisterInstanceRequest": {
      "type": "object",
      "properties": {
        "instanceId": {
          "description": "Required. User defined unique ID of this instance. The `instance_id` must be 1 to 63 characters long and contain only lowercase letters, numeric characters, and dashes. The first character must be a lowercase letter and the last character cannot be a dash.",
          "type": "string"
        }
      },
      "description": "Request for registering a notebook instance.",
      "id": "RegisterInstanceRequest"
    },
    "Schedule": {
      "type": "object",
      "description": "The definition of a schedule.",
      "properties": {
        "createTime": {
          "description": "Output only. Time the schedule was created.",
          "format": "google-datetime",
          "type": "string",
          "readOnly": true
        },
        "name": {
          "readOnly": true,
          "description": "Output only. The name of this schedule. Format: `projects/{project_id}/locations/{location}/schedules/{schedule_id}`",
          "type": "string"
        },
        "cronSchedule": {
          "type": "string",
          "description": "Cron-tab formatted schedule by which the job will execute Format: minute, hour, day of month, month, day of week e.g. 0 0 * * WED = every Wednesday More examples: https://crontab.guru/examples.html"
        },
        "state": {
          "enum": [
            "STATE_UNSPECIFIED",
            "ENABLED",
            "PAUSED",
            "DISABLED",
            "UPDATE_FAILED"
          ],
          "enumDescriptions": [
            "Unspecified state.",
            "The job is executing normally.",
            "The job is paused by the user. It will not execute. A user can intentionally pause the job using PauseJobRequest.",
            "The job is disabled by the system due to error. The user cannot directly set a job to be disabled.",
            "The job state resulting from a failed CloudScheduler.UpdateJob operation. To recover a job from this state, retry CloudScheduler.UpdateJob until a successful response is received."
          ],
          "type": "string"
        },
        "description": {
          "description": "A brief description of this environment.",
          "type": "string"
        },
        "executionTemplate": {
          "description": "Notebook Execution Template corresponding to this schedule.",
          "$ref": "ExecutionTemplate"
        },
        "updateTime": {
          "type": "string",
          "readOnly": true,
          "format": "google-datetime",
          "description": "Output only. TIme the schedule was last updated."
        },
        "timeZone": {
          "type": "string",
          "description": "Timezone on which the cron_schedule. The value of this field must be a time zone name from the tz database. TZ Database: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones Note that some time zones include a provision for daylight savings time. The rules for daylight saving time are determined by the chosen tz. For UTC use the string \"utc\". If a time zone is not specified, the default will be in UTC (also known as GMT)."
        },
        "displayName": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. Display name used for UI purposes. Name can only contain alphanumeric characters, hyphens ‘-’, and underscores ‘_’."
        }
      },
      "id": "Schedule"
    },
    "Policy": {
      "id": "Policy",
      "description": "An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members` to a single `role`. Members can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { \"bindings\": [ { \"role\": \"roles/resourcemanager.organizationAdmin\", \"members\": [ \"user:mike@example.com\", \"group:admins@example.com\", \"domain:google.com\", \"serviceAccount:my-project-id@appspot.gserviceaccount.com\" ] }, { \"role\": \"roles/resourcemanager.organizationViewer\", \"members\": [ \"user:eve@example.com\" ], \"condition\": { \"title\": \"expirable access\", \"description\": \"Does not grant access after Sep 2020\", \"expression\": \"request.time \u003c timestamp('2020-10-01T00:00:00.000Z')\", } } ], \"etag\": \"BwWWja0YfJA=\", \"version\": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time \u003c timestamp('2020-10-01T00:00:00.000Z') - etag: BwWWja0YfJA= - version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).",
      "type": "object",
      "properties": {
        "bindings": {
          "items": {
            "$ref": "Binding"
          },
          "type": "array",
          "description": "Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member."
        },
        "etag": {
          "description": "`etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.",
          "type": "string",
          "format": "byte"
        },
        "version": {
          "format": "int32",
          "type": "integer",
          "description": "Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies)."
        }
      }
    },
    "StopInstanceRequest": {
      "type": "object",
      "id": "StopInstanceRequest",
      "properties": {},
      "description": "Request for stopping a notebook instance"
    },
    "Location": {
      "description": "A resource that represents Google Cloud Platform location.",
      "id": "Location",
      "type": "object",
      "properties": {
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Cross-service attributes for the location. For example {\"cloud.googleapis.com/region\": \"us-east1\"}",
          "type": "object"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "description": "Properties of the object. Contains field @type with type URL.",
            "type": "any"
          },
          "description": "Service-specific metadata. For example the available capacity at the given location."
        },
        "name": {
          "type": "string",
          "description": "Resource name for the location, which may vary between implementations. For example: `\"projects/example-project/locations/us-east1\"`"
        },
        "displayName": {
          "type": "string",
          "description": "The friendly name for this location, typically a nearby city name. For example, \"Tokyo\"."
        },
        "locationId": {
          "description": "The canonical id for this location. For example: `\"us-east1\"`.",
          "type": "string"
        }
      }
    },
    "ListExecutionsResponse": {
      "id": "ListExecutionsResponse",
      "type": "object",
      "properties": {
        "executions": {
          "items": {
            "$ref": "Execution"
          },
          "type": "array",
          "description": "A list of returned instances."
        },
        "unreachable": {
          "type": "array",
          "description": "Executions IDs that could not be reached. For example, ['projects/{project_id}/location/{location}/executions/imagenet_test1', 'projects/{project_id}/location/{location}/executions/classifier_train1'].",
          "items": {
            "type": "string"
          }
        },
        "nextPageToken": {
          "type": "string",
          "description": "Page token that can be used to continue listing from the last result in the next list call."
        }
      },
      "description": "Response for listing scheduled notebook executions"
    }
  },
  "baseUrl": "https://notebooks.googleapis.com/",
  "basePath": "",
  "fullyEncodeReservedExpansion": true,
  "resources": {
    "projects": {
      "resources": {
        "locations": {
          "resources": {
            "schedules": {
              "methods": {
                "list": {
                  "description": "Lists schedules in a given project and location.",
                  "parameters": {
                    "parent": {
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "location": "path",
                      "type": "string",
                      "required": true,
                      "description": "Required. Format: `parent=projects/{project_id}/locations/{location}`"
                    },
                    "pageSize": {
                      "description": "Maximum return size of the list call.",
                      "type": "integer",
                      "location": "query",
                      "format": "int32"
                    },
                    "pageToken": {
                      "type": "string",
                      "description": "A previous returned page token that can be used to continue listing from the last result.",
                      "location": "query"
                    },
                    "orderBy": {
                      "location": "query",
                      "description": "Field to order results by.",
                      "type": "string"
                    },
                    "filter": {
                      "description": "Filter applied to resulting schedules.",
                      "type": "string",
                      "location": "query"
                    }
                  },
                  "response": {
                    "$ref": "ListSchedulesResponse"
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "path": "v1/{+parent}/schedules",
                  "httpMethod": "GET",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/schedules",
                  "id": "notebooks.projects.locations.schedules.list"
                },
                "get": {
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "parameters": {
                    "name": {
                      "required": true,
                      "pattern": "^projects/[^/]+/locations/[^/]+/schedules/[^/]+$",
                      "location": "path",
                      "description": "Required. Format: `projects/{project_id}/locations/{location}/schedules/{schedule_id}`",
                      "type": "string"
                    }
                  },
                  "description": "Gets details of schedule",
                  "path": "v1/{+name}",
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "Schedule"
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/schedules/{schedulesId}",
                  "id": "notebooks.projects.locations.schedules.get",
                  "httpMethod": "GET"
                },
                "trigger": {
                  "parameterOrder": [
                    "name"
                  ],
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/schedules/{schedulesId}:trigger",
                  "parameters": {
                    "name": {
                      "type": "string",
                      "required": true,
                      "description": "Required. Format: `parent=projects/{project_id}/locations/{location}/schedules/{schedule_id}`",
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+/schedules/[^/]+$"
                    }
                  },
                  "path": "v1/{+name}:trigger",
                  "response": {
                    "$ref": "Operation"
                  },
                  "request": {
                    "$ref": "TriggerScheduleRequest"
                  },
                  "httpMethod": "POST",
                  "id": "notebooks.projects.locations.schedules.trigger",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Triggers execution of an existing schedule."
                },
                "create": {
                  "parameters": {
                    "scheduleId": {
                      "location": "query",
                      "description": "Required. User-defined unique ID of this schedule.",
                      "type": "string"
                    },
                    "parent": {
                      "required": true,
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "description": "Required. Format: `parent=projects/{project_id}/locations/{location}`",
                      "type": "string"
                    }
                  },
                  "description": "Creates a new Scheduled Notebook in a given project and location.",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/schedules",
                  "id": "notebooks.projects.locations.schedules.create",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "request": {
                    "$ref": "Schedule"
                  },
                  "response": {
                    "$ref": "Operation"
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "path": "v1/{+parent}/schedules",
                  "httpMethod": "POST"
                },
                "delete": {
                  "parameters": {
                    "name": {
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+/schedules/[^/]+$",
                      "location": "path",
                      "description": "Required. Format: `projects/{project_id}/locations/{location}/schedules/{schedule_id}`",
                      "required": true
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/schedules/{schedulesId}",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "id": "notebooks.projects.locations.schedules.delete",
                  "httpMethod": "DELETE",
                  "response": {
                    "$ref": "Operation"
                  },
                  "path": "v1/{+name}",
                  "description": "Deletes schedule and all underlying jobs"
                }
              }
            },
            "instances": {
              "methods": {
                "setMachineType": {
                  "id": "notebooks.projects.locations.instances.setMachineType",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Updates the machine type of a single Instance.",
                  "request": {
                    "$ref": "SetInstanceMachineTypeRequest"
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}:setMachineType",
                  "response": {
                    "$ref": "Operation"
                  },
                  "httpMethod": "PATCH",
                  "path": "v1/{+name}:setMachineType",
                  "parameters": {
                    "name": {
                      "description": "Required. Format: `projects/{project_id}/locations/{location}/instances/{instance_id}`",
                      "location": "path",
                      "type": "string",
                      "required": true,
                      "pattern": "^projects/[^/]+/locations/[^/]+/instances/[^/]+$"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ]
                },
                "get": {
                  "description": "Gets details of a single Instance.",
                  "id": "notebooks.projects.locations.instances.get",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}",
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "Instance"
                  },
                  "parameters": {
                    "name": {
                      "required": true,
                      "pattern": "^projects/[^/]+/locations/[^/]+/instances/[^/]+$",
                      "location": "path",
                      "type": "string",
                      "description": "Required. Format: `projects/{project_id}/locations/{location}/instances/{instance_id}`"
                    }
                  },
                  "httpMethod": "GET",
                  "path": "v1/{+name}"
                },
                "setAccelerator": {
                  "request": {
                    "$ref": "SetInstanceAcceleratorRequest"
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "required": true,
                      "description": "Required. Format: `projects/{project_id}/locations/{location}/instances/{instance_id}`",
                      "pattern": "^projects/[^/]+/locations/[^/]+/instances/[^/]+$",
                      "location": "path"
                    }
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "parameterOrder": [
                    "name"
                  ],
                  "path": "v1/{+name}:setAccelerator",
                  "response": {
                    "$ref": "Operation"
                  },
                  "description": "Updates the guest accelerators of a single Instance.",
                  "id": "notebooks.projects.locations.instances.setAccelerator",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}:setAccelerator",
                  "httpMethod": "PATCH"
                },
                "reset": {
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Resets a notebook instance.",
                  "parameterOrder": [
                    "name"
                  ],
                  "id": "notebooks.projects.locations.instances.reset",
                  "httpMethod": "POST",
                  "request": {
                    "$ref": "ResetInstanceRequest"
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}:reset",
                  "parameters": {
                    "name": {
                      "location": "path",
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+/instances/[^/]+$",
                      "description": "Required. Format: `projects/{project_id}/locations/{location}/instances/{instance_id}`",
                      "required": true
                    }
                  },
                  "path": "v1/{+name}:reset",
                  "response": {
                    "$ref": "Operation"
                  }
                },
                "getInstanceHealth": {
                  "httpMethod": "GET",
                  "path": "v1/{+name}:getInstanceHealth",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "id": "notebooks.projects.locations.instances.getInstanceHealth",
                  "parameters": {
                    "name": {
                      "required": true,
                      "description": "Required. Format: `projects/{project_id}/locations/{location}/instances/{instance_id}`",
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+/instances/[^/]+$",
                      "location": "path"
                    }
                  },
                  "description": "Check if a notebook instance is healthy.",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}:getInstanceHealth",
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "GetInstanceHealthResponse"
                  }
                },
                "getIamPolicy": {
                  "parameters": {
                    "resource": {
                      "pattern": "^projects/[^/]+/locations/[^/]+/instances/[^/]+$",
                      "type": "string",
                      "required": true,
                      "description": "REQUIRED: The resource for which the policy is being requested. See the operation documentation for the appropriate value for this field.",
                      "location": "path"
                    },
                    "options.requestedPolicyVersion": {
                      "type": "integer",
                      "format": "int32",
                      "location": "query",
                      "description": "Optional. The policy format version to be returned. Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests for policies with any conditional bindings must specify version 3. Policies without any conditional bindings may specify any valid value or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies)."
                    }
                  },
                  "id": "notebooks.projects.locations.instances.getIamPolicy",
                  "response": {
                    "$ref": "Policy"
                  },
                  "path": "v1/{+resource}:getIamPolicy",
                  "parameterOrder": [
                    "resource"
                  ],
                  "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "httpMethod": "GET",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}:getIamPolicy"
                },
                "testIamPermissions": {
                  "id": "notebooks.projects.locations.instances.testIamPermissions",
                  "path": "v1/{+resource}:testIamPermissions",
                  "request": {
                    "$ref": "TestIamPermissionsRequest"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "parameterOrder": [
                    "resource"
                  ],
                  "httpMethod": "POST",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}:testIamPermissions",
                  "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
                  "response": {
                    "$ref": "TestIamPermissionsResponse"
                  },
                  "parameters": {
                    "resource": {
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+/instances/[^/]+$",
                      "type": "string",
                      "description": "REQUIRED: The resource for which the policy detail is being requested. See the operation documentation for the appropriate value for this field.",
                      "required": true
                    }
                  }
                },
                "report": {
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}:report",
                  "httpMethod": "POST",
                  "id": "notebooks.projects.locations.instances.report",
                  "description": "Allows notebook instances to report their latest instance information to the Notebooks API server. The server will merge the reported information to the instance metadata store. Do not use this method directly.",
                  "parameters": {
                    "name": {
                      "pattern": "^projects/[^/]+/locations/[^/]+/instances/[^/]+$",
                      "location": "path",
                      "type": "string",
                      "required": true,
                      "description": "Required. Format: `projects/{project_id}/locations/{location}/instances/{instance_id}`"
                    }
                  },
                  "request": {
                    "$ref": "ReportInstanceInfoRequest"
                  },
                  "response": {
                    "$ref": "Operation"
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "path": "v1/{+name}:report",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ]
                },
                "list": {
                  "response": {
                    "$ref": "ListInstancesResponse"
                  },
                  "id": "notebooks.projects.locations.instances.list",
                  "description": "Lists instances in a given project and location.",
                  "parameterOrder": [
                    "parent"
                  ],
                  "httpMethod": "GET",
                  "path": "v1/{+parent}/instances",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/instances",
                  "parameters": {
                    "pageToken": {
                      "location": "query",
                      "type": "string",
                      "description": "A previous returned page token that can be used to continue listing from the last result."
                    },
                    "pageSize": {
                      "description": "Maximum return size of the list call.",
                      "location": "query",
                      "type": "integer",
                      "format": "int32"
                    },
                    "parent": {
                      "description": "Required. Format: `parent=projects/{project_id}/locations/{location}`",
                      "location": "path",
                      "type": "string",
                      "required": true,
                      "pattern": "^projects/[^/]+/locations/[^/]+$"
                    }
                  }
                },
                "stop": {
                  "id": "notebooks.projects.locations.instances.stop",
                  "request": {
                    "$ref": "StopInstanceRequest"
                  },
                  "path": "v1/{+name}:stop",
                  "parameterOrder": [
                    "name"
                  ],
                  "description": "Stops a notebook instance.",
                  "parameters": {
                    "name": {
                      "pattern": "^projects/[^/]+/locations/[^/]+/instances/[^/]+$",
                      "description": "Required. Format: `projects/{project_id}/locations/{location}/instances/{instance_id}`",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}:stop",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "httpMethod": "POST",
                  "response": {
                    "$ref": "Operation"
                  }
                },
                "upgradeInternal": {
                  "httpMethod": "POST",
                  "request": {
                    "$ref": "UpgradeInstanceInternalRequest"
                  },
                  "id": "notebooks.projects.locations.instances.upgradeInternal",
                  "response": {
                    "$ref": "Operation"
                  },
                  "path": "v1/{+name}:upgradeInternal",
                  "parameters": {
                    "name": {
                      "pattern": "^projects/[^/]+/locations/[^/]+/instances/[^/]+$",
                      "description": "Required. Format: `projects/{project_id}/locations/{location}/instances/{instance_id}`",
                      "type": "string",
                      "required": true,
                      "location": "path"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Allows notebook instances to call this endpoint to upgrade themselves. Do not use this method directly.",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}:upgradeInternal"
                },
                "setLabels": {
                  "request": {
                    "$ref": "SetInstanceLabelsRequest"
                  },
                  "path": "v1/{+name}:setLabels",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "id": "notebooks.projects.locations.instances.setLabels",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}:setLabels",
                  "response": {
                    "$ref": "Operation"
                  },
                  "description": "Replaces all the labels of an Instance.",
                  "parameters": {
                    "name": {
                      "description": "Required. Format: `projects/{project_id}/locations/{location}/instances/{instance_id}`",
                      "pattern": "^projects/[^/]+/locations/[^/]+/instances/[^/]+$",
                      "required": true,
                      "type": "string",
                      "location": "path"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "httpMethod": "PATCH"
                },
                "upgrade": {
                  "id": "notebooks.projects.locations.instances.upgrade",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Upgrades a notebook instance to the latest version.",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}:upgrade",
                  "parameterOrder": [
                    "name"
                  ],
                  "httpMethod": "POST",
                  "response": {
                    "$ref": "Operation"
                  },
                  "request": {
                    "$ref": "UpgradeInstanceRequest"
                  },
                  "path": "v1/{+name}:upgrade",
                  "parameters": {
                    "name": {
                      "type": "string",
                      "required": true,
                      "description": "Required. Format: `projects/{project_id}/locations/{location}/instances/{instance_id}`",
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+/instances/[^/]+$"
                    }
                  }
                },
                "isUpgradeable": {
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "parameters": {
                    "notebookInstance": {
                      "description": "Required. Format: `projects/{project_id}/locations/{location}/instances/{instance_id}`",
                      "location": "path",
                      "required": true,
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+/instances/[^/]+$"
                    }
                  },
                  "path": "v1/{+notebookInstance}:isUpgradeable",
                  "id": "notebooks.projects.locations.instances.isUpgradeable",
                  "parameterOrder": [
                    "notebookInstance"
                  ],
                  "response": {
                    "$ref": "IsInstanceUpgradeableResponse"
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}:isUpgradeable",
                  "httpMethod": "GET",
                  "description": "Check if a notebook instance is upgradable."
                },
                "register": {
                  "id": "notebooks.projects.locations.instances.register",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/instances:register",
                  "path": "v1/{+parent}/instances:register",
                  "parameters": {
                    "parent": {
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "type": "string",
                      "description": "Required. Format: `parent=projects/{project_id}/locations/{location}`",
                      "required": true,
                      "location": "path"
                    }
                  },
                  "description": "Registers an existing legacy notebook instance to the Notebooks API server. Legacy instances are instances created with the legacy Compute Engine calls. They are not manageable by the Notebooks API out of the box. This call makes these instances manageable by the Notebooks API.",
                  "response": {
                    "$ref": "Operation"
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "httpMethod": "POST",
                  "request": {
                    "$ref": "RegisterInstanceRequest"
                  }
                },
                "delete": {
                  "id": "notebooks.projects.locations.instances.delete",
                  "parameterOrder": [
                    "name"
                  ],
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "response": {
                    "$ref": "Operation"
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}",
                  "description": "Deletes a single Instance.",
                  "parameters": {
                    "name": {
                      "type": "string",
                      "required": true,
                      "location": "path",
                      "description": "Required. Format: `projects/{project_id}/locations/{location}/instances/{instance_id}`",
                      "pattern": "^projects/[^/]+/locations/[^/]+/instances/[^/]+$"
                    }
                  },
                  "path": "v1/{+name}",
                  "httpMethod": "DELETE"
                },
                "start": {
                  "request": {
                    "$ref": "StartInstanceRequest"
                  },
                  "httpMethod": "POST",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}:start",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "path": "v1/{+name}:start",
                  "response": {
                    "$ref": "Operation"
                  },
                  "description": "Starts a notebook instance.",
                  "id": "notebooks.projects.locations.instances.start",
                  "parameterOrder": [
                    "name"
                  ],
                  "parameters": {
                    "name": {
                      "description": "Required. Format: `projects/{project_id}/locations/{location}/instances/{instance_id}`",
                      "pattern": "^projects/[^/]+/locations/[^/]+/instances/[^/]+$",
                      "location": "path",
                      "required": true,
                      "type": "string"
                    }
                  }
                },
                "setIamPolicy": {
                  "parameterOrder": [
                    "resource"
                  ],
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "httpMethod": "POST",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}:setIamPolicy",
                  "request": {
                    "$ref": "SetIamPolicyRequest"
                  },
                  "id": "notebooks.projects.locations.instances.setIamPolicy",
                  "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.",
                  "path": "v1/{+resource}:setIamPolicy",
                  "parameters": {
                    "resource": {
                      "required": true,
                      "location": "path",
                      "description": "REQUIRED: The resource for which the policy is being specified. See the operation documentation for the appropriate value for this field.",
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+/instances/[^/]+$"
                    }
                  },
                  "response": {
                    "$ref": "Policy"
                  }
                },
                "create": {
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/instances",
                  "id": "notebooks.projects.locations.instances.create",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "parameters": {
                    "parent": {
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "type": "string",
                      "description": "Required. Format: `parent=projects/{project_id}/locations/{location}`",
                      "required": true
                    },
                    "instanceId": {
                      "location": "query",
                      "type": "string",
                      "description": "Required. User-defined unique ID of this instance."
                    }
                  },
                  "parameterOrder": [
                    "parent"
                  ],
                  "path": "v1/{+parent}/instances",
                  "request": {
                    "$ref": "Instance"
                  },
                  "response": {
                    "$ref": "Operation"
                  },
                  "httpMethod": "POST",
                  "description": "Creates a new Instance in a given project and location."
                }
              }
            },
            "environments": {
              "methods": {
                "delete": {
                  "id": "notebooks.projects.locations.environments.delete",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "Operation"
                  },
                  "description": "Deletes a single Environment.",
                  "path": "v1/{+name}",
                  "httpMethod": "DELETE",
                  "parameters": {
                    "name": {
                      "pattern": "^projects/[^/]+/locations/[^/]+/environments/[^/]+$",
                      "description": "Required. Format: `projects/{project_id}/locations/{location}/environments/{environment_id}`",
                      "required": true,
                      "location": "path",
                      "type": "string"
                    }
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/environments/{environmentsId}"
                },
                "list": {
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/environments",
                  "description": "Lists environments in a project.",
                  "path": "v1/{+parent}/environments",
                  "httpMethod": "GET",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "id": "notebooks.projects.locations.environments.list",
                  "response": {
                    "$ref": "ListEnvironmentsResponse"
                  },
                  "parameters": {
                    "parent": {
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "type": "string",
                      "location": "path",
                      "description": "Required. Format: `projects/{project_id}/locations/{location}`",
                      "required": true
                    },
                    "pageToken": {
                      "description": "A previous returned page token that can be used to continue listing from the last result.",
                      "location": "query",
                      "type": "string"
                    },
                    "pageSize": {
                      "type": "integer",
                      "location": "query",
                      "description": "Maximum return size of the list call.",
                      "format": "int32"
                    }
                  },
                  "parameterOrder": [
                    "parent"
                  ]
                },
                "get": {
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/environments/{environmentsId}",
                  "httpMethod": "GET",
                  "parameters": {
                    "name": {
                      "description": "Required. Format: `projects/{project_id}/locations/{location}/environments/{environment_id}`",
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+/environments/[^/]+$",
                      "location": "path",
                      "required": true
                    }
                  },
                  "description": "Gets details of a single Environment.",
                  "id": "notebooks.projects.locations.environments.get",
                  "path": "v1/{+name}",
                  "response": {
                    "$ref": "Environment"
                  },
                  "parameterOrder": [
                    "name"
                  ]
                },
                "create": {
                  "parameters": {
                    "parent": {
                      "type": "string",
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "required": true,
                      "location": "path",
                      "description": "Required. Format: `projects/{project_id}/locations/{location}`"
                    },
                    "environmentId": {
                      "description": "Required. User-defined unique ID of this environment. The `environment_id` must be 1 to 63 characters long and contain only lowercase letters, numeric characters, and dashes. The first character must be a lowercase letter and the last character cannot be a dash.",
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "request": {
                    "$ref": "Environment"
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/environments",
                  "parameterOrder": [
                    "parent"
                  ],
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "httpMethod": "POST",
                  "response": {
                    "$ref": "Operation"
                  },
                  "id": "notebooks.projects.locations.environments.create",
                  "description": "Creates a new Environment.",
                  "path": "v1/{+parent}/environments"
                }
              }
            },
            "operations": {
              "methods": {
                "get": {
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "parameters": {
                    "name": {
                      "required": true,
                      "pattern": "^projects/[^/]+/locations/[^/]+/operations/[^/]+$",
                      "location": "path",
                      "type": "string",
                      "description": "The name of the operation resource."
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
                  "path": "v1/{+name}",
                  "id": "notebooks.projects.locations.operations.get",
                  "response": {
                    "$ref": "Operation"
                  },
                  "httpMethod": "GET",
                  "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service."
                },
                "cancel": {
                  "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
                  "response": {
                    "$ref": "Empty"
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "parameters": {
                    "name": {
                      "required": true,
                      "type": "string",
                      "description": "The name of the operation resource to be cancelled.",
                      "pattern": "^projects/[^/]+/locations/[^/]+/operations/[^/]+$",
                      "location": "path"
                    }
                  },
                  "id": "notebooks.projects.locations.operations.cancel",
                  "path": "v1/{+name}:cancel",
                  "httpMethod": "POST",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:cancel",
                  "request": {
                    "$ref": "CancelOperationRequest"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ]
                },
                "list": {
                  "parameters": {
                    "name": {
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "type": "string",
                      "required": true,
                      "description": "The name of the operation's parent resource.",
                      "location": "path"
                    },
                    "filter": {
                      "type": "string",
                      "location": "query",
                      "description": "The standard list filter."
                    },
                    "pageSize": {
                      "format": "int32",
                      "description": "The standard list page size.",
                      "type": "integer",
                      "location": "query"
                    },
                    "pageToken": {
                      "type": "string",
                      "description": "The standard list page token.",
                      "location": "query"
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "ListOperationsResponse"
                  },
                  "id": "notebooks.projects.locations.operations.list",
                  "path": "v1/{+name}/operations",
                  "httpMethod": "GET",
                  "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `\"/v1/{name=users/*}/operations\"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/operations",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ]
                },
                "delete": {
                  "parameterOrder": [
                    "name"
                  ],
                  "parameters": {
                    "name": {
                      "type": "string",
                      "required": true,
                      "pattern": "^projects/[^/]+/locations/[^/]+/operations/[^/]+$",
                      "location": "path",
                      "description": "The name of the operation resource to be deleted."
                    }
                  },
                  "description": "Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.",
                  "httpMethod": "DELETE",
                  "response": {
                    "$ref": "Empty"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
                  "path": "v1/{+name}",
                  "id": "notebooks.projects.locations.operations.delete"
                }
              }
            },
            "executions": {
              "methods": {
                "create": {
                  "parameterOrder": [
                    "parent"
                  ],
                  "response": {
                    "$ref": "Operation"
                  },
                  "request": {
                    "$ref": "Execution"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Creates a new Scheduled Notebook in a given project and location.",
                  "httpMethod": "POST",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/executions",
                  "path": "v1/{+parent}/executions",
                  "parameters": {
                    "parent": {
                      "description": "Required. Format: `parent=projects/{project_id}/locations/{location}`",
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "type": "string",
                      "required": true
                    },
                    "executionId": {
                      "type": "string",
                      "description": "Required. User-defined unique ID of this execution.",
                      "location": "query"
                    }
                  },
                  "id": "notebooks.projects.locations.executions.create"
                },
                "list": {
                  "parameterOrder": [
                    "parent"
                  ],
                  "httpMethod": "GET",
                  "parameters": {
                    "parent": {
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "type": "string",
                      "description": "Required. Format: `parent=projects/{project_id}/locations/{location}`",
                      "required": true
                    },
                    "filter": {
                      "location": "query",
                      "type": "string",
                      "description": "Filter applied to resulting executions."
                    },
                    "pageToken": {
                      "description": "A previous returned page token that can be used to continue listing from the last result.",
                      "location": "query",
                      "type": "string"
                    },
                    "pageSize": {
                      "description": "Maximum return size of the list call.",
                      "location": "query",
                      "type": "integer",
                      "format": "int32"
                    },
                    "orderBy": {
                      "type": "string",
                      "description": "Sort by field.",
                      "location": "query"
                    }
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "response": {
                    "$ref": "ListExecutionsResponse"
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/executions",
                  "path": "v1/{+parent}/executions",
                  "description": "Lists executions in a given project and location",
                  "id": "notebooks.projects.locations.executions.list"
                },
                "get": {
                  "parameters": {
                    "name": {
                      "type": "string",
                      "description": "Required. Format: `projects/{project_id}/locations/{location}/schedules/{execution_id}`",
                      "pattern": "^projects/[^/]+/locations/[^/]+/executions/[^/]+$",
                      "location": "path",
                      "required": true
                    }
                  },
                  "parameterOrder": [
                    "name"
                  ],
                  "response": {
                    "$ref": "Execution"
                  },
                  "path": "v1/{+name}",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/executions/{executionsId}",
                  "description": "Gets details of executions",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "httpMethod": "GET",
                  "id": "notebooks.projects.locations.executions.get"
                },
                "delete": {
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/executions/{executionsId}",
                  "id": "notebooks.projects.locations.executions.delete",
                  "response": {
                    "$ref": "Operation"
                  },
                  "path": "v1/{+name}",
                  "description": "Deletes execution",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "parameters": {
                    "name": {
                      "description": "Required. Format: `projects/{project_id}/locations/{location}/executions/{execution_id}`",
                      "pattern": "^projects/[^/]+/locations/[^/]+/executions/[^/]+$",
                      "type": "string",
                      "required": true,
                      "location": "path"
                    }
                  },
                  "httpMethod": "DELETE",
                  "parameterOrder": [
                    "name"
                  ]
                }
              }
            }
          },
          "methods": {
            "get": {
              "path": "v1/{+name}",
              "description": "Gets information about a location.",
              "parameters": {
                "name": {
                  "location": "path",
                  "type": "string",
                  "pattern": "^projects/[^/]+/locations/[^/]+$",
                  "required": true,
                  "description": "Resource name for the location."
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "httpMethod": "GET",
              "flatPath": "v1/projects/{projectsId}/locations/{locationsId}",
              "id": "notebooks.projects.locations.get",
              "response": {
                "$ref": "Location"
              },
              "parameterOrder": [
                "name"
              ]
            },
            "list": {
              "parameterOrder": [
                "name"
              ],
              "parameters": {
                "pageToken": {
                  "location": "query",
                  "description": "The standard list page token.",
                  "type": "string"
                },
                "filter": {
                  "type": "string",
                  "location": "query",
                  "description": "The standard list filter."
                },
                "name": {
                  "location": "path",
                  "description": "The resource that owns the locations collection, if applicable.",
                  "required": true,
                  "pattern": "^projects/[^/]+$",
                  "type": "string"
                },
                "pageSize": {
                  "format": "int32",
                  "location": "query",
                  "type": "integer",
                  "description": "The standard list page size."
                }
              },
              "httpMethod": "GET",
              "path": "v1/{+name}/locations",
              "id": "notebooks.projects.locations.list",
              "flatPath": "v1/projects/{projectsId}/locations",
              "response": {
                "$ref": "ListLocationsResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Lists information about the supported locations for this service."
            }
          }
        }
      }
    }
  },
  "revision": "20210122",
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
  },
  "documentationLink": "https://cloud.google.com/ai-platform/notebooks/docs/",
  "batchPath": "batch",
  "mtlsRootUrl": "https://notebooks.mtls.googleapis.com/",
  "protocol": "rest",
  "id": "notebooks:v1",
  "version": "v1",
  "canonicalName": "AI Platform Notebooks",
  "description": "AI Platform Notebooks API is used to manage notebook resources in Google Cloud.",
  "rootUrl": "https://notebooks.googleapis.com/",
  "version_module": true,
  "ownerName": "Google",
  "kind": "discovery#restDescription",
  "servicePath": "",
  "title": "Notebooks API",
  "parameters": {
    "fields": {
      "type": "string",
      "location": "query",
      "description": "Selector specifying which fields to include in a partial response."
    },
    "upload_protocol": {
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "location": "query",
      "type": "string"
    },
    "alt": {
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "location": "query",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "type": "string",
      "default": "json",
      "description": "Data format for response."
    },
    "callback": {
      "type": "string",
      "location": "query",
      "description": "JSONP"
    },
    "access_token": {
      "type": "string",
      "location": "query",
      "description": "OAuth access token."
    },
    "uploadType": {
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "location": "query",
      "type": "string"
    },
    "oauth_token": {
      "location": "query",
      "type": "string",
      "description": "OAuth 2.0 token for the current user."
    },
    "quotaUser": {
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "type": "string",
      "location": "query"
    },
    "key": {
      "type": "string",
      "location": "query",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
    },
    "prettyPrint": {
      "description": "Returns response with indentations and line breaks.",
      "default": "true",
      "type": "boolean",
      "location": "query"
    },
    "$.xgafv": {
      "location": "query",
      "enum": [
        "1",
        "2"
      ],
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "description": "V1 error format.",
      "type": "string"
    }
  },
  "discoveryVersion": "v1",
  "ownerDomain": "google.com",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "View and manage your data across Google Cloud Platform services"
        }
      }
    }
  }
}
