{
  "title": "Admin SDK API",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/admin.directory.device.mobile": {
          "description": "View and manage your mobile devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly": {
          "description": "View calendar resources on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.domain.readonly": {
          "description": "View domains related to your customers"
        },
        "https://www.googleapis.com/auth/admin.directory.user": {
          "description": "View and manage the provisioning of users on your domain"
        },
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "View and manage your data across Google Cloud Platform services"
        },
        "https://www.googleapis.com/auth/admin.directory.group.member.readonly": {
          "description": "View group subscriptions on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly": {
          "description": "View delegated admin roles for your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.resource.calendar": {
          "description": "View and manage the provisioning of calendar resources on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.user.security": {
          "description": "Manage data access permissions for users on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.chromeos": {
          "description": "View and manage your Chrome OS devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.orgunit.readonly": {
          "description": "View organization units on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.userschema": {
          "description": "View and manage the provisioning of user schemas on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.customer": {
          "description": "View and manage customer related information"
        },
        "https://www.googleapis.com/auth/admin.directory.user.alias": {
          "description": "View and manage user aliases on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.group.member": {
          "description": "View and manage group subscriptions on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.rolemanagement": {
          "description": "Manage delegated admin roles for your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.mobile.readonly": {
          "description": "View your mobile devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.group.readonly": {
          "description": "View groups on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly": {
          "description": "View your Chrome OS devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.orgunit": {
          "description": "View and manage organization units on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.user.readonly": {
          "description": "View users on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.customer.readonly": {
          "description": "View customer related information"
        },
        "https://www.googleapis.com/auth/admin.directory.group": {
          "description": "View and manage the provisioning of groups on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.user.alias.readonly": {
          "description": "View user aliases on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.mobile.action": {
          "description": "Manage your mobile devices by performing administrative tasks"
        },
        "https://www.googleapis.com/auth/admin.directory.domain": {
          "description": "View and manage the provisioning of domains for your customers"
        },
        "https://www.googleapis.com/auth/admin.directory.userschema.readonly": {
          "description": "View user schemas on your domain"
        }
      }
    }
  },
  "fullyEncodeReservedExpansion": true,
  "discoveryVersion": "v1",
  "protocol": "rest",
  "ownerName": "Google",
  "parameters": {
    "$.xgafv": {
      "description": "V1 error format.",
      "location": "query",
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "type": "string",
      "enum": [
        "1",
        "2"
      ]
    },
    "oauth_token": {
      "type": "string",
      "description": "OAuth 2.0 token for the current user.",
      "location": "query"
    },
    "quotaUser": {
      "type": "string",
      "location": "query",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
    },
    "access_token": {
      "type": "string",
      "location": "query",
      "description": "OAuth access token."
    },
    "upload_protocol": {
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "location": "query",
      "type": "string"
    },
    "alt": {
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "type": "string",
      "description": "Data format for response.",
      "default": "json",
      "location": "query"
    },
    "fields": {
      "type": "string",
      "description": "Selector specifying which fields to include in a partial response.",
      "location": "query"
    },
    "prettyPrint": {
      "default": "true",
      "type": "boolean",
      "description": "Returns response with indentations and line breaks.",
      "location": "query"
    },
    "uploadType": {
      "type": "string",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "location": "query"
    },
    "callback": {
      "description": "JSONP",
      "location": "query",
      "type": "string"
    },
    "key": {
      "type": "string",
      "location": "query",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
    }
  },
  "documentationLink": "http://developers.google.com/admin-sdk/",
  "canonicalName": "directory",
  "id": "admin:directory_v1",
  "ownerDomain": "google.com",
  "name": "admin",
  "version": "directory_v1",
  "schemas": {
    "MobileDeviceAction": {
      "properties": {
        "action": {
          "description": "The action to be performed on the device.",
          "annotations": {
            "required": [
              "directory.mobiledevices.action"
            ]
          },
          "type": "string"
        }
      },
      "id": "MobileDeviceAction",
      "type": "object"
    },
    "ChromeOsDevices": {
      "id": "ChromeOsDevices",
      "properties": {
        "chromeosdevices": {
          "description": "List of Chrome OS Device objects.",
          "type": "array",
          "items": {
            "$ref": "ChromeOsDevice"
          }
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "default": "admin#directory#chromeosdevices",
          "description": "Kind of resource this is.",
          "type": "string"
        },
        "nextPageToken": {
          "type": "string",
          "description": "Token used to access the next page of this result. To access the next page, use this token's value in the `pageToken` query string of this request."
        }
      },
      "type": "object"
    },
    "OrgUnit": {
      "properties": {
        "parentOrgUnitPath": {
          "description": "The organizational unit's parent path. For example, /corp/sales is the parent path for /corp/sales/sales_support organizational unit. Required, unless `parentOrgUnitId` is set.",
          "type": "string"
        },
        "orgUnitId": {
          "description": "The unique ID of the organizational unit.",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "name": {
          "description": "The organizational unit's path name. For example, an organizational unit's name within the /corp/support/sales_support parent path is sales_support. Required.",
          "type": "string",
          "annotations": {
            "required": [
              "directory.orgunits.insert"
            ]
          }
        },
        "parentOrgUnitId": {
          "type": "string",
          "description": "The unique ID of the parent organizational unit. Required, unless `parentOrgUnitPath` is set."
        },
        "description": {
          "description": "Description of the organizational unit.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "The type of the API resource. For Orgunits resources, the value is `admin#directory#orgUnit`.",
          "default": "admin#directory#orgUnit"
        },
        "orgUnitPath": {
          "description": "The full path to the organizational unit. The `orgUnitPath` is a derived property. When listed, it is derived from `parentOrgunitPath` and organizational unit's `name`. For example, for an organizational unit named 'apps' under parent organization '/engineering', the orgUnitPath is '/engineering/apps'. In order to edit an `orgUnitPath`, either update the name of the organization or the `parentOrgunitPath`. A user's organizational unit determines which G Suite services the user has access to. If the user is moved to a new organization, the user's access changes. For more information about organization structures, see the [administration help center](http://support.google.com/a/bin/answer.py?answer=182433&topic=1227584&ctx=topic). For more information about moving a user to a different organization, see [Update a user](/admin-sdk/directory/v1/guides/manage-users.html#update_user).",
          "type": "string"
        },
        "blockInheritance": {
          "type": "boolean",
          "description": "Determines if a sub-organizational unit can inherit the settings of the parent organization. The default value is `false`, meaning a sub-organizational unit inherits the settings of the nearest parent organizational unit. For more information on inheritance and users in an organization structure, see the [administration help center](http://support.google.com/a/bin/answer.py?answer=182442&topic=1227584&ctx=topic)."
        }
      },
      "id": "OrgUnit",
      "type": "object",
      "description": "Managing your account's organizational units allows you to configure your users' access to services and custom settings. For more information about common organizational unit tasks, see the [Developer's Guide](/admin-sdk/directory/v1/guides/manage-org-units.html)."
    },
    "DirectoryChromeosdevicesIssueCommandResponse": {
      "id": "DirectoryChromeosdevicesIssueCommandResponse",
      "properties": {
        "commandId": {
          "description": "The unique ID of the issued command, used to retrieve the command status.",
          "type": "string",
          "format": "int64"
        }
      },
      "type": "object",
      "description": "A response for issuing a command."
    },
    "CustomerPostalAddress": {
      "type": "object",
      "properties": {
        "countryCode": {
          "description": "This is a required property. For `countryCode` information see the [ISO 3166 country code elements](http://www.iso.org/iso/country_codes.htm).",
          "type": "string"
        },
        "contactName": {
          "type": "string",
          "description": "The customer contact's name."
        },
        "addressLine3": {
          "description": "Address line 3 of the address.",
          "type": "string"
        },
        "locality": {
          "type": "string",
          "description": "Name of the locality. An example of a locality value is the city of `San Francisco`."
        },
        "addressLine2": {
          "type": "string",
          "description": "Address line 2 of the address."
        },
        "region": {
          "description": "Name of the region. An example of a region value is `NY` for the state of New York.",
          "type": "string"
        },
        "postalCode": {
          "type": "string",
          "description": "The postal code. A postalCode example is a postal zip code such as `10009`. This is in accordance with - http: //portablecontacts.net/draft-spec.html#address_element."
        },
        "organizationName": {
          "type": "string",
          "description": "The company or company division name."
        },
        "addressLine1": {
          "description": "A customer's physical address. The address can be composed of one to three lines.",
          "type": "string"
        }
      },
      "id": "CustomerPostalAddress"
    },
    "MobileDevice": {
      "properties": {
        "encryptionStatus": {
          "description": "Mobile Device Encryption Status (Read-only)",
          "type": "string"
        },
        "userAgent": {
          "type": "string",
          "description": "Gives information about the device such as `os` version. This property can be [updated](/admin-sdk/directory/v1/reference/mobiledevices/update.html). For more information, see the [Developer's Guide](/admin-sdk/directory/v1/guides/manage-mobile-devices#update_mobile_device)."
        },
        "name": {
          "description": "List of the owner's user names. If your application needs the current list of device owner names, use the [get](/admin-sdk/directory/v1/reference/mobiledevices/get.html) method. For more information about retrieving mobile device user information, see the [Developer's Guide](/admin-sdk/directory/v1/guides/manage-users#get_user).",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "imei": {
          "type": "string",
          "description": "The device's IMEI number."
        },
        "unknownSourcesStatus": {
          "type": "boolean",
          "description": "Unknown sources enabled or disabled on device (Read-only)"
        },
        "managedAccountIsOnOwnerProfile": {
          "description": "Boolean indicating if this account is on owner/primary profile or not.",
          "type": "boolean"
        },
        "os": {
          "description": "The mobile device's operating system, for example IOS 4.3 or Android 2.3.5. This property can be [updated](/admin-sdk/directory/v1/reference/mobiledevices/update.html). For more information, see the [Developer's Guide](/admin-sdk/directory/v1/guides/manage-mobile-devices#update_mobile_device).",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "bootloaderVersion": {
          "description": "Mobile Device Bootloader version (Read-only)",
          "type": "string"
        },
        "adbStatus": {
          "description": "Adb (USB debugging) enabled or disabled on device (Read-only)",
          "type": "boolean"
        },
        "deviceId": {
          "type": "string",
          "description": "The serial number for a Google Sync mobile device. For Android and iOS devices, this is a software generated unique identifier."
        },
        "otherAccountsInfo": {
          "description": "List of accounts added on device (Read-only)",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "securityPatchLevel": {
          "format": "int64",
          "type": "string",
          "description": "Mobile Device Security patch level (Read-only)"
        },
        "hardwareId": {
          "description": "The IMEI/MEID unique identifier for Android hardware. It is not applicable to Google Sync devices. When adding an Android mobile device, this is an optional property. When updating one of these devices, this is a read-only property.",
          "type": "string"
        },
        "devicePasswordStatus": {
          "description": "DevicePasswordStatus (Read-only)",
          "type": "string"
        },
        "networkOperator": {
          "type": "string",
          "description": "Mobile Device mobile or network operator (if available) (Read-only)"
        },
        "type": {
          "description": "The type of mobile device.",
          "type": "string"
        },
        "firstSync": {
          "description": "Date and time the device was first synchronized with the policy settings in the G Suite administrator control panel (Read-only)",
          "type": "string",
          "format": "date-time"
        },
        "brand": {
          "description": "Mobile Device Brand (Read-only)",
          "type": "string"
        },
        "resourceId": {
          "description": "The unique ID the API service uses to identify the mobile device.",
          "type": "string"
        },
        "defaultLanguage": {
          "description": "The default locale used on the device.",
          "type": "string"
        },
        "applications": {
          "description": "The list of applications installed on an Android mobile device. It is not applicable to Google Sync and iOS devices. The list includes any Android applications that access G Suite data. When updating an applications list, it is important to note that updates replace the existing list. If the Android device has two existing applications and the API updates the list with five applications, the is now the updated list of five applications.",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "packageName": {
                "type": "string",
                "description": "The application's package name. An example is `com.android.browser`."
              },
              "versionName": {
                "type": "string",
                "description": "The application's version name. An example is `3.2-140714`."
              },
              "versionCode": {
                "format": "int32",
                "type": "integer",
                "description": "The application's version code. An example is `13`."
              },
              "displayName": {
                "description": "The application's display name. An example is `Browser`.",
                "type": "string"
              },
              "permission": {
                "items": {
                  "type": "string"
                },
                "description": "The list of permissions of this application. These can be either a standard Android permission or one defined by the application, and are found in an application's [Android manifest](http://developer.android.com/guide/topics/manifest/uses-permission-element.html). Examples of a Calendar application's permissions are `READ_CALENDAR`, or `MANAGE_ACCOUNTS`.",
                "type": "array"
              }
            }
          }
        },
        "kind": {
          "description": "The type of the API resource. For Mobiledevices resources, the value is `admin#directory#mobiledevice`.",
          "type": "string",
          "default": "admin#directory#mobiledevice"
        },
        "buildNumber": {
          "description": "The device's operating system build number.",
          "type": "string"
        },
        "privilege": {
          "description": "DMAgentPermission (Read-only)",
          "type": "string"
        },
        "developerOptionsStatus": {
          "description": "Developer options enabled or disabled on device (Read-only)",
          "type": "boolean"
        },
        "lastSync": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time the device was last synchronized with the policy settings in the G Suite administrator control panel (Read-only)"
        },
        "deviceCompromisedStatus": {
          "description": "The compromised device status.",
          "type": "string"
        },
        "meid": {
          "type": "string",
          "description": "The device's MEID number."
        },
        "wifiMacAddress": {
          "description": "The device's MAC address on Wi-Fi networks.",
          "type": "string"
        },
        "serialNumber": {
          "type": "string",
          "description": "The device's serial number."
        },
        "model": {
          "type": "string",
          "description": "The mobile device's model name, for example Nexus S. This property can be [updated](/admin-sdk/directory/v1/reference/mobiledevices/update.html). For more information, see the [Developer's Guide](/admin-sdk/directory/v1/guides/manage-mobile=devices#update_mobile_device)."
        },
        "releaseVersion": {
          "description": "Mobile Device release version version (Read-only)",
          "type": "string"
        },
        "status": {
          "description": "The device's status.",
          "type": "string"
        },
        "supportsWorkProfile": {
          "description": "Work profile supported on device (Read-only)",
          "type": "boolean"
        },
        "kernelVersion": {
          "type": "string",
          "description": "The device's kernel version."
        },
        "manufacturer": {
          "description": "Mobile Device manufacturer (Read-only)",
          "type": "string"
        },
        "hardware": {
          "description": "Mobile Device Hardware (Read-only)",
          "type": "string"
        },
        "basebandVersion": {
          "type": "string",
          "description": "The device's baseband version."
        },
        "email": {
          "items": {
            "type": "string"
          },
          "description": "List of owner's email addresses. If your application needs the current list of user emails, use the [get](/admin-sdk/directory/v1/reference/mobiledevices/get.html) method. For additional information, see the [retrieve a user](/admin-sdk/directory/v1/guides/manage-users#get_user) method.",
          "type": "array"
        }
      },
      "description": "G Suite Mobile Management includes Android, [Google Sync](http://support.google.com/a/bin/answer.py?answer=135937), and iOS devices. For more information about common group mobile device API tasks, see the [Developer's Guide](/admin-sdk/directory/v1/guides/manage-mobile-devices.html).",
      "type": "object",
      "id": "MobileDevice"
    },
    "Channel": {
      "description": "An notification channel used to watch for resource changes.",
      "id": "Channel",
      "type": "object",
      "properties": {
        "kind": {
          "description": "Identifies this as a notification channel used to watch for changes to a resource, which is `api#channel`.",
          "default": "api#channel",
          "type": "string"
        },
        "resourceId": {
          "type": "string",
          "description": "An opaque ID that identifies the resource being watched on this channel. Stable across different API versions."
        },
        "type": {
          "type": "string",
          "description": "The type of delivery mechanism used for this channel."
        },
        "payload": {
          "type": "boolean",
          "description": "A Boolean value to indicate whether payload is wanted. Optional."
        },
        "resourceUri": {
          "type": "string",
          "description": "A version-specific identifier for the watched resource."
        },
        "address": {
          "description": "The address where notifications are delivered for this channel.",
          "type": "string"
        },
        "expiration": {
          "description": "Date and time of notification channel expiration, expressed as a Unix timestamp, in milliseconds. Optional.",
          "type": "string",
          "format": "int64"
        },
        "params": {
          "description": "Additional parameters controlling delivery channel behavior. Optional.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "id": {
          "description": "A UUID or similar unique string that identifies this channel.",
          "type": "string"
        },
        "token": {
          "type": "string",
          "description": "An arbitrary string delivered to the target address with each notification delivered over this channel. Optional."
        }
      }
    },
    "UserIm": {
      "properties": {
        "primary": {
          "type": "boolean",
          "description": "If this is user's primary im. Only one entry could be marked as primary."
        },
        "customProtocol": {
          "description": "Custom protocol.",
          "type": "string"
        },
        "protocol": {
          "description": "Protocol used in the instant messenger. It should be one of the values from ImProtocolTypes map. Similar to type it can take a CUSTOM value and specify the custom name in customProtocol field.",
          "type": "string"
        },
        "type": {
          "description": "Each entry can have a type which indicates standard types of that entry. For example instant messengers could be of home work etc. In addition to the standard type an entry can have a custom type and can take any value. Such types should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        },
        "customType": {
          "type": "string",
          "description": "Custom type."
        },
        "im": {
          "description": "Instant messenger id.",
          "type": "string"
        }
      },
      "id": "UserIm",
      "description": "JSON template for instant messenger of an user.",
      "type": "object"
    },
    "DomainAlias": {
      "id": "DomainAlias",
      "type": "object",
      "properties": {
        "domainAliasName": {
          "description": "The domain alias name.",
          "type": "string"
        },
        "creationTime": {
          "description": "The creation time of the domain alias. (Read-only).",
          "type": "string",
          "format": "int64"
        },
        "parentDomainName": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.domains.insert"
            ]
          },
          "description": "The parent domain name that the domain alias is associated with. This can either be a primary or secondary domain name within a customer."
        },
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#domainAlias"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "verified": {
          "description": "Indicates the verification state of a domain alias. (Read-only)",
          "type": "boolean"
        }
      }
    },
    "Groups": {
      "type": "object",
      "id": "Groups",
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "groups": {
          "items": {
            "$ref": "Group"
          },
          "type": "array",
          "description": "List of group objects."
        },
        "kind": {
          "default": "admin#directory#groups",
          "description": "Kind of resource this is.",
          "type": "string"
        },
        "nextPageToken": {
          "type": "string",
          "description": "Token used to access next page of this result."
        }
      }
    },
    "UserKeyword": {
      "description": "JSON template for a keyword entry.",
      "properties": {
        "customType": {
          "type": "string",
          "description": "Custom Type."
        },
        "value": {
          "description": "Keyword.",
          "type": "string"
        },
        "type": {
          "description": "Each entry can have a type which indicates standard type of that entry. For example keyword could be of type occupation or outlook. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        }
      },
      "id": "UserKeyword",
      "type": "object"
    },
    "FeatureRename": {
      "id": "FeatureRename",
      "properties": {
        "newName": {
          "type": "string",
          "description": "New name of the feature.",
          "annotations": {
            "required": [
              "directory.resources.features.rename"
            ]
          }
        }
      },
      "type": "object"
    },
    "Customer": {
      "id": "Customer",
      "type": "object",
      "properties": {
        "alternateEmail": {
          "description": "The customer's secondary contact email address. This email address cannot be on the same domain as the `customerDomain`",
          "type": "string"
        },
        "id": {
          "type": "string",
          "description": "The unique ID for the customer's G Suite account. (Readonly)"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "postalAddress": {
          "$ref": "CustomerPostalAddress",
          "description": "The customer's postal address information."
        },
        "language": {
          "type": "string",
          "description": "The customer's ISO 639-2 language code. See the [Language Codes](/admin-sdk/directory/v1/languages) page for the list of supported codes. Valid language codes outside the supported set will be accepted by the API but may lead to unexpected behavior. The default value is `en`."
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#customer",
          "description": "Identifies the resource as a customer. Value: `admin#directory#customer`"
        },
        "customerCreationTime": {
          "type": "string",
          "format": "date-time",
          "description": "The customer's creation time (Readonly)"
        },
        "phoneNumber": {
          "type": "string",
          "description": "The customer's contact phone number in [E.164](http://en.wikipedia.org/wiki/E.164) format."
        },
        "customerDomain": {
          "type": "string",
          "description": "The customer's primary domain name string. Do not include the `www` prefix when creating a new customer."
        }
      }
    },
    "UserLocation": {
      "type": "object",
      "id": "UserLocation",
      "properties": {
        "customType": {
          "type": "string",
          "description": "Custom Type."
        },
        "floorName": {
          "type": "string",
          "description": "Floor name/number."
        },
        "area": {
          "description": "Textual location. This is most useful for display purposes to concisely describe the location. For example 'Mountain View, CA', 'Near Seattle', 'US-NYC-9TH 9A209A.''",
          "type": "string"
        },
        "floorSection": {
          "type": "string",
          "description": "Floor section. More specific location within the floor. For example if a floor is divided into sections 'A', 'B' and 'C' this field would identify one of those values."
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard types of that entry. For example location could be of types default and desk. In addition to standard type an entry can have a custom type and can give it any name. Such types should have 'custom' as type and also have a customType value."
        },
        "deskCode": {
          "type": "string",
          "description": "Most specific textual code of individual desk location."
        },
        "buildingId": {
          "type": "string",
          "description": "Building Identifier."
        }
      },
      "description": "JSON template for a location entry."
    },
    "ChromeOsDevice": {
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "lastKnownNetwork": {
          "items": {
            "type": "object",
            "description": "Information for an ip address.",
            "properties": {
              "ipAddress": {
                "type": "string",
                "description": "The IP address."
              },
              "wanIpAddress": {
                "type": "string",
                "description": "The WAN IP address."
              }
            }
          },
          "type": "array",
          "description": "Contains last known network (Read-only)"
        },
        "platformVersion": {
          "type": "string",
          "description": "The Chrome device's platform version."
        },
        "activeTimeRanges": {
          "description": "List of active time ranges (Read-only).",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "activeTime": {
                "format": "int32",
                "type": "integer",
                "description": "Duration of usage in milliseconds."
              },
              "date": {
                "description": "Date of usage",
                "type": "string",
                "format": "date"
              }
            }
          }
        },
        "annotatedUser": {
          "type": "string",
          "description": "The user of the device as noted by the administrator. Maximum length is 100 characters. Empty values are allowed."
        },
        "systemRamFreeReports": {
          "type": "array",
          "description": "Reports of amounts of available RAM memory (Read-only)",
          "items": {
            "type": "object",
            "properties": {
              "systemRamFreeInfo": {
                "type": "array",
                "items": {
                  "format": "int64",
                  "type": "string"
                }
              },
              "reportTime": {
                "format": "date-time",
                "type": "string",
                "description": "Date and time the report was received."
              }
            }
          }
        },
        "notes": {
          "type": "string",
          "description": "Notes about this device added by the administrator. This property can be [searched](http://support.google.com/chromeos/a/bin/answer.py?answer=1698333) with the [list](/admin-sdk/directory/v1/reference/chromeosdevices/list) method's `query` parameter. Maximum length is 500 characters. Empty values are allowed."
        },
        "lastEnrollmentTime": {
          "description": "Date and time the device was last enrolled (Read-only)",
          "type": "string",
          "format": "date-time"
        },
        "orgUnitPath": {
          "description": "The full parent path with the organizational unit's name associated with the device. Path names are case insensitive. If the parent organizational unit is the top-level organization, it is represented as a forward slash, `/`. This property can be [updated](/admin-sdk/directory/v1/guides/manage-chrome-devices#update_chrome_device) using the API. For more information about how to create an organizational structure for your device, see the [administration help center](http://support.google.com/a/bin/answer.py?answer=182433).",
          "type": "string"
        },
        "tpmVersionInfo": {
          "properties": {
            "family": {
              "type": "string",
              "description": "TPM family. We use the TPM 2.0 style encoding, e.g.: TPM 1.2: \"1.2\" -\u003e 312e3200 TPM 2.0: \"2.0\" -\u003e 322e3000"
            },
            "specLevel": {
              "description": "TPM specification level. See Library Specification for TPM 2.0 and Main Specification for TPM 1.2.",
              "type": "string"
            },
            "tpmModel": {
              "type": "string",
              "description": "TPM model number."
            },
            "manufacturer": {
              "description": "TPM manufacturer code.",
              "type": "string"
            },
            "firmwareVersion": {
              "description": "TPM firmware version.",
              "type": "string"
            },
            "vendorSpecific": {
              "description": "Vendor-specific information such as Vendor ID.",
              "type": "string"
            }
          },
          "description": "Trusted Platform Module (TPM) (Read-only)",
          "type": "object"
        },
        "deviceId": {
          "type": "string",
          "description": "The unique ID of the Chrome device."
        },
        "dockMacAddress": {
          "description": "(Read-only) Built-in MAC address for the docking station that the device connected to. Factory sets Media access control address (MAC address) assigned for use by a dock. It is reserved specifically for MAC pass through device policy. The format is twelve (12) hexadecimal digits without any delimiter (uppercase letters). This is only relevant for some devices.",
          "type": "string"
        },
        "status": {
          "type": "string",
          "description": "The status of the device."
        },
        "recentUsers": {
          "type": "array",
          "items": {
            "$ref": "RecentUsers"
          },
          "description": "List of recent device users, in descending order, by last login time."
        },
        "kind": {
          "default": "admin#directory#chromeosdevice",
          "description": "The type of resource. For the Chromeosdevices resource, the value is `admin#directory#chromeosdevice`.",
          "type": "string"
        },
        "manufactureDate": {
          "description": "(Read-only) The date the device was manufactured in yyyy-mm-dd format.",
          "type": "string"
        },
        "meid": {
          "description": "The Mobile Equipment Identifier (MEID) or the International Mobile Equipment Identity (IMEI) for the 3G mobile card in a mobile device. A MEID/IMEI is typically used when adding a device to a wireless carrier's post-pay service plan. If the device does not have this information, this property is not included in the response. For more information on how to export a MEID/IMEI list, see the [Developer's Guide](/admin-sdk/directory/v1/guides/manage-chrome-devices.html#export_meid).",
          "type": "string"
        },
        "autoUpdateExpiration": {
          "format": "int64",
          "description": "(Read-only) The timestamp after which the device will stop receiving Chrome updates or support",
          "type": "string"
        },
        "osVersion": {
          "description": "The Chrome device's operating system version.",
          "type": "string"
        },
        "firmwareVersion": {
          "description": "The Chrome device's firmware version.",
          "type": "string"
        },
        "cpuStatusReports": {
          "description": "Reports of CPU utilization and temperature (Read-only)",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "cpuUtilizationPercentageInfo": {
                "items": {
                  "type": "integer",
                  "format": "int32"
                },
                "type": "array"
              },
              "cpuTemperatureInfo": {
                "items": {
                  "type": "object",
                  "properties": {
                    "label": {
                      "description": "CPU label",
                      "type": "string"
                    },
                    "temperature": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Temperature in Celsius degrees."
                    }
                  }
                },
                "type": "array",
                "description": "List of CPU temperature samples."
              },
              "reportTime": {
                "format": "date-time",
                "description": "Date and time the report was received.",
                "type": "string"
              }
            }
          }
        },
        "lastSync": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time the device was last synchronized with the policy settings in the G Suite administrator control panel (Read-only)"
        },
        "supportEndDate": {
          "type": "string",
          "format": "date-time",
          "description": "Final date the device will be supported (Read-only)"
        },
        "bootMode": {
          "type": "string",
          "description": "The boot mode for the device. The possible values are: * `Verified`: The device is running a valid version of the Chrome OS. * `Dev`: The devices's developer hardware switch is enabled. When booted, the device has a command line shell. For an example of a developer switch, see the [Chromebook developer information](http://www.chromium.org/chromium-os/developer-information-for-chrome-os-devices/samsung-series-5-chromebook#TOC-Developer-switch)."
        },
        "model": {
          "description": "The device's model information. If the device does not have this information, this property is not included in the response.",
          "type": "string"
        },
        "macAddress": {
          "type": "string",
          "description": "The device's wireless MAC address. If the device does not have this information, it is not included in the response."
        },
        "ethernetMacAddress0": {
          "type": "string",
          "description": "(Read-only) MAC address used by the Chromebook’s internal ethernet port, and for onboard network (ethernet) interface. The format is twelve (12) hexadecimal digits without any delimiter (uppercase letters). This is only relevant for some devices."
        },
        "serialNumber": {
          "description": "The Chrome device serial number entered when the device was enabled. This value is the same as the Admin console's *Serial Number* in the *Chrome OS Devices* tab.",
          "type": "string"
        },
        "ethernetMacAddress": {
          "type": "string",
          "description": "The device's MAC address on the ethernet network interface."
        },
        "willAutoRenew": {
          "description": "Determines if the device will auto renew its support after the support end date. This is a read-only property.",
          "type": "boolean"
        },
        "deviceFiles": {
          "description": "List of device files to download (Read-only)",
          "items": {
            "properties": {
              "createTime": {
                "description": "Date and time the file was created",
                "format": "date-time",
                "type": "string"
              },
              "type": {
                "type": "string",
                "description": "File type"
              },
              "downloadUrl": {
                "description": "File download URL",
                "type": "string"
              },
              "name": {
                "type": "string",
                "description": "File name"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "annotatedAssetId": {
          "type": "string",
          "description": "The asset identifier as noted by an administrator or specified during enrollment."
        },
        "annotatedLocation": {
          "type": "string",
          "description": "The address or location of the device as noted by the administrator. Maximum length is `200` characters. Empty values are allowed."
        },
        "systemRamTotal": {
          "description": "Total RAM on the device [in bytes] (Read-only)",
          "type": "string",
          "format": "int64"
        },
        "diskVolumeReports": {
          "description": "Reports of disk space and other info about mounted/connected volumes.",
          "items": {
            "properties": {
              "volumeInfo": {
                "items": {
                  "properties": {
                    "storageFree": {
                      "description": "Free disk space [in bytes]",
                      "type": "string",
                      "format": "int64"
                    },
                    "volumeId": {
                      "description": "Volume id",
                      "type": "string"
                    },
                    "storageTotal": {
                      "type": "string",
                      "format": "int64",
                      "description": "Total disk space [in bytes]"
                    }
                  },
                  "type": "object"
                },
                "type": "array",
                "description": "Disk volumes"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "orderNumber": {
          "description": "The device's order number. Only devices directly purchased from Google have an order number.",
          "type": "string"
        }
      },
      "id": "ChromeOsDevice",
      "type": "object",
      "description": "Google Chrome devices run on the [Chrome OS](http://support.google.com/chromeos). For more information about common API tasks, see the [Developer's Guide](/admin-sdk/directory/v1/guides/manage-chrome-devices)."
    },
    "Alias": {
      "id": "Alias",
      "type": "object",
      "properties": {
        "kind": {
          "default": "admin#directory#alias",
          "type": "string"
        },
        "alias": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "etag": {
          "type": "string"
        },
        "primaryEmail": {
          "type": "string"
        }
      },
      "description": "JSON template for Alias object in Directory API."
    },
    "MobileDevices": {
      "type": "object",
      "properties": {
        "kind": {
          "default": "admin#directory#mobiledevices",
          "description": "Kind of resource this is.",
          "type": "string"
        },
        "nextPageToken": {
          "description": "Token used to access next page of this result.",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "mobiledevices": {
          "description": "List of Mobile Device objects.",
          "items": {
            "$ref": "MobileDevice"
          },
          "type": "array"
        }
      },
      "id": "MobileDevices"
    },
    "Member": {
      "description": "A Google Groups member can be a user or another group. This member can be inside or outside of your account's domains. For more information about common group member tasks, see the [Developer's Guide](/admin-sdk/directory/v1/guides/manage-group-members).",
      "type": "object",
      "properties": {
        "kind": {
          "description": "The type of the API resource. For Members resources, the value is `admin#directory#member`.",
          "type": "string",
          "default": "admin#directory#member"
        },
        "delivery_settings": {
          "description": "Defines mail delivery preferences of member. This is only supported by create/update/get.",
          "type": "string"
        },
        "id": {
          "description": "The unique ID of the group member. A member `id` can be used as a member request URI's `memberKey`.",
          "type": "string"
        },
        "status": {
          "description": "Status of member (Immutable)",
          "type": "string"
        },
        "role": {
          "description": "The member's role in a group. The API returns an error for cycles in group memberships. For example, if `group1` is a member of `group2`, `group2` cannot be a member of `group1`. For more information about a member's role, see the [administration help center](http://support.google.com/a/bin/answer.py?answer=167094).",
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "The type of group member."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "email": {
          "type": "string",
          "description": "The member's email address. A member can be a user or another group. This property is required when adding a member to a group. The `email` must be unique and cannot be an alias of another group. If the email address is changed, the API automatically reflects the email address changes."
        }
      },
      "id": "Member"
    },
    "UserGender": {
      "id": "UserGender",
      "properties": {
        "type": {
          "description": "Gender.",
          "type": "string"
        },
        "addressMeAs": {
          "type": "string",
          "description": "AddressMeAs. A human-readable string containing the proper way to refer to the profile owner by humans for example he/him/his or they/them/their."
        },
        "customGender": {
          "description": "Custom gender.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "UserRelation": {
      "properties": {
        "type": {
          "type": "string",
          "description": "The relation of the user. Some of the possible values are mother father sister brother manager assistant partner."
        },
        "value": {
          "type": "string",
          "description": "The name of the relation."
        },
        "customType": {
          "description": "Custom Type.",
          "type": "string"
        }
      },
      "id": "UserRelation",
      "type": "object",
      "description": "JSON template for a relation entry."
    },
    "UserLanguage": {
      "description": "JSON template for a language entry.",
      "id": "UserLanguage",
      "properties": {
        "customLanguage": {
          "type": "string",
          "description": "Other language. User can provide own language name if there is no corresponding Google III language code. If this is set LanguageCode can't be set"
        },
        "languageCode": {
          "description": "Language Code. Should be used for storing Google III LanguageCode string representation for language. Illegal values cause SchemaException.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Domains2": {
      "id": "Domains2",
      "properties": {
        "kind": {
          "type": "string",
          "default": "admin#directory#domains",
          "description": "Kind of resource this is."
        },
        "domains": {
          "description": "List of domain objects.",
          "type": "array",
          "items": {
            "$ref": "Domains"
          }
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      },
      "type": "object"
    },
    "Asps": {
      "id": "Asps",
      "type": "object",
      "properties": {
        "items": {
          "items": {
            "$ref": "Asp"
          },
          "description": "A list of ASP resources.",
          "type": "array"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "description": "The type of the API resource. This is always `admin#directory#aspList`.",
          "default": "admin#directory#aspList",
          "type": "string"
        }
      }
    },
    "UserOrganization": {
      "description": "JSON template for an organization entry.",
      "id": "UserOrganization",
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "description": "Title (designation) of the user in the organization."
        },
        "customType": {
          "type": "string",
          "description": "Custom type."
        },
        "location": {
          "description": "Location of the organization. This need not be fully qualified address.",
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard types of that entry. For example organization could be of school work etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a CustomType value."
        },
        "fullTimeEquivalent": {
          "type": "integer",
          "format": "int32",
          "description": "The full-time equivalent millipercent within the organization (100000 = 100%)."
        },
        "name": {
          "description": "Name of the organization",
          "type": "string"
        },
        "description": {
          "description": "Description of the organization.",
          "type": "string"
        },
        "costCenter": {
          "description": "The cost center of the users department.",
          "type": "string"
        },
        "symbol": {
          "description": "Symbol of the organization.",
          "type": "string"
        },
        "primary": {
          "type": "boolean",
          "description": "If it user's primary organization."
        },
        "department": {
          "type": "string",
          "description": "Department within the organization."
        },
        "domain": {
          "type": "string",
          "description": "The domain to which the organization belongs to."
        }
      }
    },
    "VerificationCodes": {
      "id": "VerificationCodes",
      "description": "JSON response template for List verification codes operation in Directory API.",
      "type": "object",
      "properties": {
        "items": {
          "description": "A list of verification code resources.",
          "type": "array",
          "items": {
            "$ref": "VerificationCode"
          }
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "description": "The type of the resource. This is always `admin#directory#verificationCodesList`.",
          "type": "string",
          "default": "admin#directory#verificationCodesList"
        }
      }
    },
    "UserPhone": {
      "properties": {
        "customType": {
          "description": "Custom Type.",
          "type": "string"
        },
        "type": {
          "description": "Each entry can have a type which indicates standard types of that entry. For example phone could be of home_fax work mobile etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        },
        "value": {
          "type": "string",
          "description": "Phone number."
        },
        "primary": {
          "type": "boolean",
          "description": "If this is user's primary phone or not."
        }
      },
      "type": "object",
      "description": "JSON template for a phone entry.",
      "id": "UserPhone"
    },
    "Privileges": {
      "properties": {
        "items": {
          "description": "A list of Privilege resources.",
          "type": "array",
          "items": {
            "$ref": "Privilege"
          }
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "description": "The type of the API resource. This is always `admin#directory#privileges`.",
          "type": "string",
          "default": "admin#directory#privileges"
        }
      },
      "id": "Privileges",
      "type": "object"
    },
    "MembersHasMember": {
      "properties": {
        "isMember": {
          "type": "boolean",
          "readOnly": true,
          "description": "Output only. Identifies whether the given user is a member of the group. Membership can be direct or nested."
        }
      },
      "description": "JSON template for Has Member response in Directory API.",
      "id": "MembersHasMember",
      "type": "object"
    },
    "DirectoryChromeosdevicesCommand": {
      "id": "DirectoryChromeosdevicesCommand",
      "type": "object",
      "properties": {
        "commandExpireTime": {
          "type": "string",
          "description": "The time at which the command will expire. If the device doesn't execute the command within this time the command will become expired.",
          "format": "google-datetime"
        },
        "commandResult": {
          "$ref": "DirectoryChromeosdevicesCommandResult",
          "description": "The result of the command execution."
        },
        "commandId": {
          "description": "Unique ID of a device command.",
          "type": "string",
          "format": "int64"
        },
        "type": {
          "enumDescriptions": [
            "The command type was unspecified.",
            "Reboot the device. Can only be issued to Kiosk and managed guest session devices.",
            "Take a screenshot of the device. Only available if the device is in Kiosk Mode.",
            "Set the volume of the device. Can only be issued to Kiosk and managed guest session devices.",
            "Wipe all the users off of the device. Executing this command in the device will remove all user profile data, but it will keep device policy and enrollment.",
            "Wipes the device by performing a power wash. Executing this command in the device will remove all data including user policies, device policies and enrollment policies. Warning: This will revert the device back to a factory state with no enrollment unless the device is subject to forced or auto enrollment. Use with caution, as this is an irreversible action!"
          ],
          "enum": [
            "COMMAND_TYPE_UNSPECIFIED",
            "REBOOT",
            "TAKE_A_SCREENSHOT",
            "SET_VOLUME",
            "WIPE_USERS",
            "REMOTE_POWERWASH"
          ],
          "description": "The type of the command.",
          "type": "string"
        },
        "issueTime": {
          "format": "google-datetime",
          "description": "The timestamp when the command was issued by the admin.",
          "type": "string"
        },
        "payload": {
          "description": "The payload that the command specified, if any.",
          "type": "string"
        },
        "state": {
          "enumDescriptions": [
            "The command status was unspecified.",
            "An unexpired command not yet sent to the client.",
            "The command didn't get executed by the client within the expected time.",
            "The command is cancelled by admin while in PENDING.",
            "The command has been sent to the client.",
            "The client has responded that it received the command.",
            "The client has (un)successfully executed the command."
          ],
          "enum": [
            "STATE_UNSPECIFIED",
            "PENDING",
            "EXPIRED",
            "CANCELLED",
            "SENT_TO_CLIENT",
            "ACKED_BY_CLIENT",
            "EXECUTED_BY_CLIENT"
          ],
          "type": "string",
          "description": "Indicates the command state."
        }
      },
      "description": "Information regarding a command that was issued to a device."
    },
    "ChromeOsDeviceAction": {
      "id": "ChromeOsDeviceAction",
      "type": "object",
      "properties": {
        "action": {
          "type": "string",
          "description": "Action to be taken on the Chrome OS device.",
          "annotations": {
            "required": [
              "directory.chromeosdevices.action"
            ]
          }
        },
        "deprovisionReason": {
          "type": "string",
          "description": "Only used when the action is `deprovision`. With the `deprovision` action, this field is required. *Note*: The deprovision reason is audited because it might have implications on licenses for perpetual subscription customers."
        }
      }
    },
    "DomainAliases": {
      "id": "DomainAliases",
      "type": "object",
      "properties": {
        "kind": {
          "type": "string",
          "default": "admin#directory#domainAliases",
          "description": "Kind of resource this is."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "domainAliases": {
          "description": "List of domain alias objects.",
          "type": "array",
          "items": {
            "$ref": "DomainAlias"
          }
        }
      }
    },
    "OrgUnits": {
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "organizationUnits": {
          "items": {
            "$ref": "OrgUnit"
          },
          "description": "List of organizational unit objects.",
          "type": "array"
        },
        "kind": {
          "type": "string",
          "description": "The type of the API resource. For Org Unit resources, the type is `admin#directory#orgUnits`.",
          "default": "admin#directory#orgUnits"
        }
      },
      "id": "OrgUnits",
      "type": "object"
    },
    "Buildings": {
      "type": "object",
      "id": "Buildings",
      "properties": {
        "buildings": {
          "description": "The Buildings in this page of results.",
          "items": {
            "$ref": "Building"
          },
          "type": "array"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#resources#buildings#buildingsList"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "nextPageToken": {
          "description": "The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results.",
          "type": "string"
        }
      },
      "description": "Public API: Resources.buildings"
    },
    "UserSshPublicKey": {
      "description": "JSON template for a POSIX account entry.",
      "type": "object",
      "properties": {
        "fingerprint": {
          "description": "A SHA-256 fingerprint of the SSH public key. (Read-only)",
          "type": "string",
          "readOnly": true
        },
        "key": {
          "description": "An SSH public key.",
          "type": "string"
        },
        "expirationTimeUsec": {
          "format": "int64",
          "type": "string",
          "description": "An expiration time in microseconds since epoch."
        }
      },
      "id": "UserSshPublicKey"
    },
    "UserAbout": {
      "description": "JSON template for About (notes) of a user in Directory API.",
      "id": "UserAbout",
      "properties": {
        "value": {
          "description": "Actual value of notes.",
          "type": "string"
        },
        "contentType": {
          "type": "string",
          "description": "About entry can have a type which indicates the content type. It can either be plain or html. By default, notes contents are assumed to contain plain text."
        }
      },
      "type": "object"
    },
    "Role": {
      "id": "Role",
      "properties": {
        "roleId": {
          "type": "string",
          "format": "int64",
          "description": "ID of the role."
        },
        "rolePrivileges": {
          "description": "The set of privileges that are granted to this role.",
          "annotations": {
            "required": [
              "directory.roles.insert"
            ]
          },
          "items": {
            "type": "object",
            "properties": {
              "serviceId": {
                "description": "The obfuscated ID of the service this privilege is for. This value is returned with [`Privileges.list()`](/admin-sdk/directory/v1/reference/privileges/list).",
                "type": "string"
              },
              "privilegeName": {
                "type": "string",
                "description": "The name of the privilege."
              }
            }
          },
          "type": "array"
        },
        "roleName": {
          "annotations": {
            "required": [
              "directory.roles.insert"
            ]
          },
          "type": "string",
          "description": "Name of the role."
        },
        "isSuperAdminRole": {
          "type": "boolean",
          "description": "Returns `true` if the role is a super admin role."
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#role",
          "description": "The type of the API resource. This is always `admin#directory#role`."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "roleDescription": {
          "description": "A short description of the role.",
          "type": "string"
        },
        "isSystemRole": {
          "description": "Returns `true` if this is a pre-defined system role.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "Aliases": {
      "id": "Aliases",
      "type": "object",
      "description": "JSON response template to list aliases in Directory API.",
      "properties": {
        "kind": {
          "default": "admin#directory#aliases",
          "type": "string"
        },
        "aliases": {
          "type": "array",
          "items": {
            "type": "any"
          }
        },
        "etag": {
          "type": "string"
        }
      }
    },
    "Token": {
      "description": "JSON template for token resource in Directory API.",
      "type": "object",
      "properties": {
        "nativeApp": {
          "description": "Whether the token is issued to an installed application. The value is `true` if the application is installed to a desktop or mobile device.",
          "type": "boolean"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "userKey": {
          "description": "The unique ID of the user that issued the token.",
          "type": "string"
        },
        "scopes": {
          "items": {
            "type": "string"
          },
          "description": "A list of authorization scopes the application is granted.",
          "type": "array"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#token",
          "description": "The type of the API resource. This is always `admin#directory#token`."
        },
        "displayText": {
          "type": "string",
          "description": "The displayable name of the application the token is issued to."
        },
        "clientId": {
          "description": "The Client ID of the application the token is issued to.",
          "type": "string"
        },
        "anonymous": {
          "description": "Whether the application is registered with Google. The value is `true` if the application has an anonymous Client ID.",
          "type": "boolean"
        }
      },
      "id": "Token"
    },
    "RoleAssignments": {
      "id": "RoleAssignments",
      "type": "object",
      "properties": {
        "items": {
          "description": "A list of RoleAssignment resources.",
          "items": {
            "$ref": "RoleAssignment"
          },
          "type": "array"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "nextPageToken": {
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#roleAssignments",
          "type": "string",
          "description": "The type of the API resource. This is always `admin#directory#roleAssignments`."
        }
      }
    },
    "Building": {
      "type": "object",
      "properties": {
        "coordinates": {
          "$ref": "BuildingCoordinates",
          "description": "The geographic coordinates of the center of the building, expressed as latitude and longitude in decimal degrees."
        },
        "description": {
          "description": "A brief description of the building. For example, \"Chelsea Market\".",
          "type": "string"
        },
        "buildingId": {
          "type": "string",
          "description": "Unique identifier for the building. The maximum length is 100 characters."
        },
        "floorNames": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "The display names for all floors in this building. The floors are expected to be sorted in ascending order, from lowest floor to highest floor. For example, [\"B2\", \"B1\", \"L\", \"1\", \"2\", \"2M\", \"3\", \"PH\"] Must contain at least one entry."
        },
        "etags": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "default": "admin#directory#resources#buildings#Building",
          "description": "Kind of resource this is.",
          "type": "string"
        },
        "buildingName": {
          "description": "The building name as seen by users in Calendar. Must be unique for the customer. For example, \"NYC-CHEL\". The maximum length is 100 characters.",
          "type": "string"
        },
        "address": {
          "$ref": "BuildingAddress",
          "description": "The postal address of the building. See [`PostalAddress`](/my-business/reference/rest/v4/PostalAddress) for details. Note that only a single address line and region code are required."
        }
      },
      "id": "Building",
      "description": "Public API: Resources.buildings"
    },
    "RoleAssignment": {
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#roleAssignment",
          "description": "The type of the API resource. This is always `admin#directory#roleAssignment`."
        },
        "roleAssignmentId": {
          "type": "string",
          "description": "ID of this roleAssignment.",
          "format": "int64"
        },
        "scopeType": {
          "description": "The scope in which this role is assigned.",
          "type": "string"
        },
        "assignedTo": {
          "description": "The unique ID of the user this role is assigned to.",
          "type": "string"
        },
        "roleId": {
          "description": "The ID of the role that is assigned.",
          "type": "string",
          "format": "int64"
        },
        "orgUnitId": {
          "type": "string",
          "description": "If the role is restricted to an organization unit, this contains the ID for the organization unit the exercise of this role is restricted to."
        }
      },
      "id": "RoleAssignment",
      "type": "object"
    },
    "SchemaFieldSpec": {
      "properties": {
        "readAccessType": {
          "type": "string",
          "default": "ALL_DOMAIN_USERS",
          "description": "Specifies who can view values of this field. See [Retrieve users as a non-administrator](/admin-sdk/directory/v1/guides/manage-users#retrieve_users_non_admin) for more information. Note: It may take up to 24 hours for changes to this field to be reflected."
        },
        "fieldId": {
          "description": "The unique identifier of the field (Read-only)",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "The ETag of the field."
        },
        "indexed": {
          "type": "boolean",
          "description": "Boolean specifying whether the field is indexed or not. Default: `true`.",
          "default": "true"
        },
        "displayName": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          },
          "description": "Display Name of the field."
        },
        "fieldName": {
          "type": "string",
          "description": "The name of the field.",
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          }
        },
        "multiValued": {
          "type": "boolean",
          "description": "A boolean specifying whether this is a multi-valued field or not. Default: `false`."
        },
        "numericIndexingSpec": {
          "properties": {
            "maxValue": {
              "format": "double",
              "type": "number",
              "description": "Maximum value of this field. This is meant to be indicative rather than enforced. Values outside this range will still be indexed, but search may not be as performant."
            },
            "minValue": {
              "format": "double",
              "description": "Minimum value of this field. This is meant to be indicative rather than enforced. Values outside this range will still be indexed, but search may not be as performant.",
              "type": "number"
            }
          },
          "type": "object",
          "description": "Indexing spec for a numeric field. By default, only exact match queries will be supported for numeric fields. Setting the `numericIndexingSpec` allows range queries to be supported."
        },
        "kind": {
          "default": "admin#directory#schema#fieldspec",
          "description": "The kind of resource this is. For schema fields this is always `admin#directory#schema#fieldspec`.",
          "type": "string"
        },
        "fieldType": {
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          },
          "description": "The type of the field.",
          "type": "string"
        }
      },
      "description": "You can use schemas to add custom fields to user profiles. You can use these fields to store information such as the projects your users work on, their physical locations, their hire dates, or whatever else fits your business needs. For more information, see [Custom User Fields](/admin-sdk/directory/v1/guides/manage-schemas).",
      "id": "SchemaFieldSpec",
      "type": "object"
    },
    "Features": {
      "description": "Public API: Resources.features",
      "id": "Features",
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "features": {
          "description": "The Features in this page of results.",
          "type": "array",
          "items": {
            "$ref": "Feature"
          }
        },
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#resources#features#featuresList"
        },
        "nextPageToken": {
          "type": "string",
          "description": "The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results."
        }
      },
      "type": "object"
    },
    "UserCustomProperties": {
      "description": "JSON template for a set of custom properties (i.e. all fields in a particular schema)",
      "type": "object",
      "id": "UserCustomProperties",
      "additionalProperties": {
        "type": "any"
      }
    },
    "Members": {
      "properties": {
        "members": {
          "items": {
            "$ref": "Member"
          },
          "type": "array",
          "description": "List of member objects."
        },
        "nextPageToken": {
          "description": "Token used to access next page of this result.",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "default": "admin#directory#members",
          "type": "string",
          "description": "Kind of resource this is."
        }
      },
      "type": "object",
      "id": "Members"
    },
    "CalendarResources": {
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results."
        },
        "kind": {
          "description": "Identifies this as a collection of CalendarResources. This is always `admin#directory#resources#calendars#calendarResourcesList`.",
          "type": "string",
          "default": "admin#directory#resources#calendars#calendarResourcesList"
        },
        "items": {
          "type": "array",
          "description": "The CalendarResources in this page of results.",
          "items": {
            "$ref": "CalendarResource"
          }
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      },
      "type": "object",
      "id": "CalendarResources",
      "description": "Public API: Resources.calendars"
    },
    "UserPhoto": {
      "properties": {
        "mimeType": {
          "description": "The MIME type of the photo. Allowed values are `JPEG`, `PNG`, `GIF`, `BMP`, `TIFF`, and web-safe base64 encoding.",
          "type": "string"
        },
        "height": {
          "description": "Height of the photo in pixels.",
          "type": "integer",
          "format": "int32"
        },
        "width": {
          "type": "integer",
          "format": "int32",
          "description": "Width of the photo in pixels."
        },
        "kind": {
          "description": "The type of the API resource. For Photo resources, this is `admin#directory#user#photo`.",
          "type": "string",
          "default": "admin#directory#user#photo"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "photoData": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.users.photos.update"
            ]
          },
          "description": "The user photo's upload data in [web-safe Base64](https://code.google.com/p/stringencoders/wiki/WebSafeBase64) format in bytes. This means: * The slash (/) character is replaced with the underscore (_) character. * The plus sign (+) character is replaced with the hyphen (-) character. * The equals sign (=) character is replaced with the asterisk (*). * For padding, the period (.) character is used instead of the RFC-4648 baseURL definition which uses the equals sign (=) for padding. This is done to simplify URL-parsing. * Whatever the size of the photo being uploaded, the API downsizes it to 96x96 pixels.",
          "format": "byte"
        },
        "id": {
          "type": "string",
          "description": "The ID the API uses to uniquely identify the user."
        },
        "primaryEmail": {
          "description": "The user's primary email address.",
          "type": "string"
        }
      },
      "id": "UserPhoto",
      "type": "object"
    },
    "VerificationCode": {
      "type": "object",
      "properties": {
        "kind": {
          "description": "The type of the resource. This is always `admin#directory#verificationCode`.",
          "type": "string",
          "default": "admin#directory#verificationCode"
        },
        "userId": {
          "description": "The obfuscated unique ID of the user.",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "verificationCode": {
          "type": "string",
          "description": "A current verification code for the user. Invalidated or used verification codes are not returned as part of the result."
        }
      },
      "description": "The Directory API allows you to view, generate, and invalidate backup verification codes for a user.",
      "id": "VerificationCode"
    },
    "Roles": {
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#roles",
          "type": "string",
          "description": "The type of the API resource. This is always `admin#directory#roles`."
        },
        "nextPageToken": {
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "Role"
          },
          "description": "A list of Role resources."
        }
      },
      "id": "Roles",
      "type": "object"
    },
    "Privilege": {
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "description": "The type of the API resource. This is always `admin#directory#privilege`.",
          "default": "admin#directory#privilege",
          "type": "string"
        },
        "privilegeName": {
          "type": "string",
          "description": "The name of the privilege."
        },
        "serviceName": {
          "description": "The name of the service this privilege is for.",
          "type": "string"
        },
        "serviceId": {
          "type": "string",
          "description": "The obfuscated ID of the service this privilege is for. This value is returned with [`Privileges.list()`](/admin-sdk/directory/v1/reference/privileges/list)."
        },
        "isOuScopable": {
          "type": "boolean",
          "description": "If the privilege can be restricted to an organization unit."
        },
        "childPrivileges": {
          "items": {
            "$ref": "Privilege"
          },
          "type": "array",
          "description": "A list of child privileges. Privileges for a service form a tree. Each privilege can have a list of child privileges; this list is empty for a leaf privilege."
        }
      },
      "type": "object",
      "id": "Privilege"
    },
    "UserName": {
      "properties": {
        "givenName": {
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          },
          "description": "The user's first name. Required when creating a user account.",
          "type": "string"
        },
        "fullName": {
          "type": "string",
          "description": "The user's full name formed by concatenating the first and last name values."
        },
        "familyName": {
          "description": "The user's last name. Required when creating a user account.",
          "type": "string",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          }
        }
      },
      "id": "UserName",
      "type": "object"
    },
    "UserPosixAccount": {
      "description": "JSON template for a POSIX account entry.",
      "id": "UserPosixAccount",
      "type": "object",
      "properties": {
        "operatingSystemType": {
          "type": "string",
          "description": "The operating system type for this account."
        },
        "homeDirectory": {
          "description": "The path to the home directory for this account.",
          "type": "string"
        },
        "systemId": {
          "description": "System identifier for which account Username or Uid apply to.",
          "type": "string"
        },
        "shell": {
          "description": "The path to the login shell for this account.",
          "type": "string"
        },
        "uid": {
          "format": "uint64",
          "description": "The POSIX compliant user ID.",
          "type": "string"
        },
        "username": {
          "description": "The username of the account.",
          "type": "string"
        },
        "accountId": {
          "type": "string",
          "description": "A POSIX account field identifier."
        },
        "primary": {
          "description": "If this is user's primary account within the SystemId.",
          "type": "boolean"
        },
        "gecos": {
          "type": "string",
          "description": "The GECOS (user information) for this account."
        },
        "gid": {
          "format": "uint64",
          "type": "string",
          "description": "The default group ID."
        }
      }
    },
    "BuildingCoordinates": {
      "description": "Public API: Resources.buildings",
      "properties": {
        "latitude": {
          "type": "number",
          "format": "double",
          "description": "Latitude in decimal degrees."
        },
        "longitude": {
          "format": "double",
          "description": "Longitude in decimal degrees.",
          "type": "number"
        }
      },
      "type": "object",
      "id": "BuildingCoordinates"
    },
    "Feature": {
      "id": "Feature",
      "type": "object",
      "description": "JSON template for Feature object in Directory API.",
      "properties": {
        "name": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.resources.features.insert"
            ]
          },
          "description": "The name of the feature."
        },
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#resources#features#Feature",
          "type": "string"
        },
        "etags": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      }
    },
    "Users": {
      "type": "object",
      "properties": {
        "trigger_event": {
          "type": "string",
          "description": "Event that triggered this response (only used in case of Push Response)"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "nextPageToken": {
          "description": "Token used to access next page of this result.",
          "type": "string"
        },
        "users": {
          "type": "array",
          "description": "List of user objects.",
          "items": {
            "$ref": "User"
          }
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#users",
          "description": "Kind of resource this is."
        }
      },
      "id": "Users"
    },
    "UserMakeAdmin": {
      "properties": {
        "status": {
          "description": "Indicates the administrator status of the user.",
          "annotations": {
            "required": [
              "directory.users.makeAdmin"
            ]
          },
          "type": "boolean"
        }
      },
      "id": "UserMakeAdmin",
      "type": "object"
    },
    "DirectoryChromeosdevicesCommandResult": {
      "description": "The result of executing a command.",
      "type": "object",
      "id": "DirectoryChromeosdevicesCommandResult",
      "properties": {
        "errorMessage": {
          "description": "The error message with a short explanation as to why the command failed. Only present if the command failed.",
          "type": "string"
        },
        "result": {
          "enum": [
            "COMMAND_RESULT_TYPE_UNSPECIFIED",
            "IGNORED",
            "FAILURE",
            "SUCCESS"
          ],
          "enumDescriptions": [
            "The command result was unspecified.",
            "The command was ignored as obsolete.",
            "The command could not be executed successfully.",
            "The command was successfully executed."
          ],
          "description": "The result of the command.",
          "type": "string"
        },
        "executeTime": {
          "format": "google-datetime",
          "description": "The time at which the command was executed or failed to execute.",
          "type": "string"
        }
      }
    },
    "RecentUsers": {
      "type": "object",
      "properties": {
        "email": {
          "description": "The user's email address. This is only present if the user type is `USER_TYPE_MANAGED`.",
          "type": "string"
        },
        "type": {
          "description": "The type of the user.",
          "type": "string"
        }
      },
      "description": "List of recent device users, in descending order, by last login time.",
      "id": "RecentUsers"
    },
    "ChromeOsMoveDevicesToOu": {
      "id": "ChromeOsMoveDevicesToOu",
      "type": "object",
      "properties": {
        "deviceIds": {
          "annotations": {
            "required": [
              "directory.chromeosdevices.moveDevicesToOu"
            ]
          },
          "items": {
            "type": "string"
          },
          "description": "Chrome OS devices to be moved to OU",
          "type": "array"
        }
      }
    },
    "FeatureInstance": {
      "id": "FeatureInstance",
      "description": "JSON template for a feature instance.",
      "properties": {
        "feature": {
          "description": "The feature that this is an instance of. A calendar resource may have multiple instances of a feature.",
          "$ref": "Feature"
        }
      },
      "type": "object"
    },
    "UserWebsite": {
      "id": "UserWebsite",
      "properties": {
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard types of that entry. For example website could be of home work blog etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value."
        },
        "customType": {
          "description": "Custom Type.",
          "type": "string"
        },
        "primary": {
          "description": "If this is user's primary website or not.",
          "type": "boolean"
        },
        "value": {
          "description": "Website.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "JSON template for a website entry."
    },
    "Group": {
      "id": "Group",
      "properties": {
        "kind": {
          "description": "The type of the API resource. For Groups resources, the value is `admin#directory#group`.",
          "type": "string",
          "default": "admin#directory#group"
        },
        "id": {
          "description": "The unique ID of a group. A group `id` can be used as a group request URI's `groupKey`.",
          "type": "string"
        },
        "aliases": {
          "description": "List of a group's alias email addresses.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "nonEditableAliases": {
          "type": "array",
          "description": "List of the group's non-editable alias email addresses that are outside of the account's primary domain or subdomains. These are functioning email addresses used by the group. This is a read-only property returned in the API's response for a group. If edited in a group's POST or PUT request, the edit is ignored by the API service.",
          "items": {
            "type": "string"
          }
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "email": {
          "type": "string",
          "description": "The group's email address. If your account has multiple domains, select the appropriate domain for the email address. The `email` must be unique. This property is required when creating a group. Group email addresses are subject to the same character usage rules as usernames, see the [administration help center](http://support.google.com/a/bin/answer.py?answer=33386) for the details.",
          "annotations": {
            "required": [
              "directory.groups.insert"
            ]
          }
        },
        "directMembersCount": {
          "description": "The number of users that are direct members of the group. If a group is a member (child) of this group (the parent), members of the child group are not counted in the `directMembersCount` property of the parent group.",
          "format": "int64",
          "type": "string"
        },
        "description": {
          "type": "string",
          "description": "An extended description to help users determine the purpose of a group. For example, you can include information about who should join the group, the types of messages to send to the group, links to FAQs about the group, or related groups. Maximum length is `4,096` characters."
        },
        "name": {
          "description": "The group's display name.",
          "type": "string"
        },
        "adminCreated": {
          "type": "boolean",
          "description": "Value is `true` if this group was created by an administrator rather than a user."
        }
      },
      "description": "Google Groups provide your users the ability to send messages to groups of people using the group's email address. For more information about common tasks, see the [Developer's Guide](/admin-sdk/directory/v1/guides/manage-groups).",
      "type": "object"
    },
    "Schemas": {
      "properties": {
        "schemas": {
          "type": "array",
          "items": {
            "$ref": "Schema"
          },
          "description": "List of UserSchema objects."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "Kind of resource this is.",
          "default": "admin#directory#schemas"
        }
      },
      "description": "JSON response template for List Schema operation in Directory API.",
      "id": "Schemas",
      "type": "object"
    },
    "Domains": {
      "type": "object",
      "id": "Domains",
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "domainName": {
          "annotations": {
            "required": [
              "directory.domains.insert"
            ]
          },
          "type": "string",
          "description": "The domain name of the customer."
        },
        "creationTime": {
          "format": "int64",
          "type": "string",
          "description": "Creation time of the domain. Expressed in [Unix time](http://en.wikipedia.org/wiki/Epoch_time) format. (Read-only)."
        },
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#domain",
          "type": "string"
        },
        "verified": {
          "description": "Indicates the verification state of a domain. (Read-only).",
          "type": "boolean"
        },
        "isPrimary": {
          "description": "Indicates if the domain is a primary domain (Read-only).",
          "type": "boolean"
        },
        "domainAliases": {
          "type": "array",
          "description": "List of domain alias objects. (Read-only)",
          "items": {
            "$ref": "DomainAlias"
          }
        }
      }
    },
    "Tokens": {
      "description": "JSON response template for List tokens operation in Directory API.",
      "id": "Tokens",
      "properties": {
        "items": {
          "description": "A list of Token resources.",
          "items": {
            "$ref": "Token"
          },
          "type": "array"
        },
        "kind": {
          "type": "string",
          "description": "The type of the API resource. This is always `admin#directory#tokenList`.",
          "default": "admin#directory#tokenList"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      },
      "type": "object"
    },
    "DirectoryChromeosdevicesIssueCommandRequest": {
      "id": "DirectoryChromeosdevicesIssueCommandRequest",
      "properties": {
        "commandType": {
          "enumDescriptions": [
            "The command type was unspecified.",
            "Reboot the device. Can only be issued to Kiosk and managed guest session devices.",
            "Take a screenshot of the device. Only available if the device is in Kiosk Mode.",
            "Set the volume of the device. Can only be issued to Kiosk and managed guest session devices.",
            "Wipe all the users off of the device. Executing this command in the device will remove all user profile data, but it will keep device policy and enrollment.",
            "Wipes the device by performing a power wash. Executing this command in the device will remove all data including user policies, device policies and enrollment policies. Warning: This will revert the device back to a factory state with no enrollment unless the device is subject to forced or auto enrollment. Use with caution, as this is an irreversible action!"
          ],
          "enum": [
            "COMMAND_TYPE_UNSPECIFIED",
            "REBOOT",
            "TAKE_A_SCREENSHOT",
            "SET_VOLUME",
            "WIPE_USERS",
            "REMOTE_POWERWASH"
          ],
          "type": "string",
          "description": "The type of command."
        },
        "payload": {
          "type": "string",
          "description": "The payload for the command, provide it only if command supports it. The following commands support adding payload: - SET_VOLUME: Payload is a stringified JSON object in the form: { \"volume\": 50 }. The volume has to be an integer in the range [0,100]."
        }
      },
      "type": "object",
      "description": "A request for issuing a command."
    },
    "Schema": {
      "type": "object",
      "id": "Schema",
      "description": "The type of API resource. For Schema resources, this is always `admin#directory#schema`.",
      "properties": {
        "etag": {
          "description": "The ETag of the resource.",
          "type": "string"
        },
        "schemaId": {
          "description": "The unique identifier of the schema (Read-only)",
          "type": "string"
        },
        "schemaName": {
          "type": "string",
          "description": "The schema's name.",
          "annotations": {
            "required": [
              "directory.schemas.insert"
            ]
          }
        },
        "kind": {
          "type": "string",
          "description": "Kind of resource this is.",
          "default": "admin#directory#schema"
        },
        "displayName": {
          "description": "Display name for the schema.",
          "type": "string",
          "annotations": {
            "required": [
              "directory.schemas.insert"
            ]
          }
        },
        "fields": {
          "type": "array",
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          },
          "description": "A list of fields in the schema.",
          "items": {
            "$ref": "SchemaFieldSpec"
          }
        }
      }
    },
    "BuildingAddress": {
      "properties": {
        "languageCode": {
          "type": "string",
          "description": "Optional. BCP-47 language code of the contents of this address (if known)."
        },
        "sublocality": {
          "description": "Optional. Sublocality of the address.",
          "type": "string"
        },
        "administrativeArea": {
          "description": "Optional. Highest administrative subdivision which is used for postal addresses of a country or region.",
          "type": "string"
        },
        "addressLines": {
          "type": "array",
          "description": "Unstructured address lines describing the lower levels of an address.",
          "items": {
            "type": "string"
          }
        },
        "postalCode": {
          "description": "Optional. Postal code of the address.",
          "type": "string"
        },
        "regionCode": {
          "description": "Required. CLDR region code of the country/region of the address.",
          "type": "string"
        },
        "locality": {
          "type": "string",
          "description": "Optional. Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world where localities are not well defined or do not fit into this structure well, leave locality empty and use addressLines."
        }
      },
      "description": "Public API: Resources.buildings",
      "id": "BuildingAddress",
      "type": "object"
    },
    "CalendarResource": {
      "id": "CalendarResource",
      "properties": {
        "featureInstances": {
          "description": "Instances of features for the calendar resource.",
          "type": "any"
        },
        "buildingId": {
          "description": "Unique ID for the building a resource is located in.",
          "type": "string"
        },
        "capacity": {
          "type": "integer",
          "format": "int32",
          "description": "Capacity of a resource, number of seats in a room."
        },
        "resourceId": {
          "type": "string",
          "description": "The unique ID for the calendar resource.",
          "annotations": {
            "required": [
              "directory.resources.calendars.insert"
            ]
          }
        },
        "resourceEmail": {
          "description": "The read-only email for the calendar resource. Generated as part of creating a new calendar resource.",
          "type": "string"
        },
        "resourceCategory": {
          "description": "The category of the calendar resource. Either CONFERENCE_ROOM or OTHER. Legacy data is set to CATEGORY_UNKNOWN.",
          "type": "string"
        },
        "floorSection": {
          "type": "string",
          "description": "Name of the section within a floor a resource is located in."
        },
        "resourceType": {
          "description": "The type of the calendar resource, intended for non-room resources.",
          "type": "string"
        },
        "resourceDescription": {
          "description": "Description of the resource, visible only to admins.",
          "type": "string"
        },
        "resourceName": {
          "description": "The name of the calendar resource. For example, \"Training Room 1A\".",
          "type": "string",
          "annotations": {
            "required": [
              "directory.resources.calendars.insert"
            ]
          }
        },
        "floorName": {
          "description": "Name of the floor a resource is located on.",
          "type": "string"
        },
        "userVisibleDescription": {
          "description": "Description of the resource, visible to users and admins.",
          "type": "string"
        },
        "generatedResourceName": {
          "type": "string",
          "description": "The read-only auto-generated name of the calendar resource which includes metadata about the resource such as building name, floor, capacity, etc. For example, \"NYC-2-Training Room 1A (16)\"."
        },
        "etags": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "description": "The type of the resource. For calendar resources, the value is `admin#directory#resources#calendars#CalendarResource`.",
          "default": "admin#directory#resources#calendars#CalendarResource",
          "type": "string"
        }
      },
      "description": "Public API: Resources.calendars",
      "type": "object"
    },
    "Asp": {
      "properties": {
        "userKey": {
          "type": "string",
          "description": "The unique ID of the user who issued the ASP."
        },
        "codeId": {
          "type": "integer",
          "format": "int32",
          "description": "The unique ID of the ASP."
        },
        "etag": {
          "description": "ETag of the ASP.",
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "The name of the application that the user, represented by their `userId`, entered when the ASP was created."
        },
        "lastTimeUsed": {
          "format": "int64",
          "type": "string",
          "description": "The time when the ASP was last used. Expressed in [Unix time](http://en.wikipedia.org/wiki/Epoch_time) format."
        },
        "creationTime": {
          "format": "int64",
          "description": "The time when the ASP was created. Expressed in [Unix time](http://en.wikipedia.org/wiki/Epoch_time) format.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "The type of the API resource. This is always `admin#directory#asp`.",
          "default": "admin#directory#asp"
        }
      },
      "description": "An application-specific password (ASP) is used with applications that do not accept a verification code when logging into the application on certain devices. The ASP access code is used instead of the login and password you commonly use when accessing an application through a browser. For more information about ASPs and how to create one, see the [help center](//http://support.google.com/a/bin/answer.py?amp;answer=1032419).",
      "id": "Asp",
      "type": "object"
    },
    "UserUndelete": {
      "id": "UserUndelete",
      "properties": {
        "orgUnitPath": {
          "description": "OrgUnit of User",
          "type": "string"
        }
      },
      "type": "object"
    },
    "UserAddress": {
      "type": "object",
      "description": "JSON template for address.",
      "id": "UserAddress",
      "properties": {
        "poBox": {
          "description": "Other parts of address.",
          "type": "string"
        },
        "primary": {
          "type": "boolean",
          "description": "If this is user's primary address. Only one entry could be marked as primary."
        },
        "formatted": {
          "type": "string",
          "description": "Formatted address."
        },
        "streetAddress": {
          "type": "string",
          "description": "Street."
        },
        "countryCode": {
          "description": "Country code.",
          "type": "string"
        },
        "country": {
          "description": "Country.",
          "type": "string"
        },
        "postalCode": {
          "description": "Postal code.",
          "type": "string"
        },
        "extendedAddress": {
          "description": "Extended Address.",
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard values of that entry. For example address could be of home work etc. In addition to the standard type an entry can have a custom type and can take any value. Such type should have the CUSTOM value as type and also have a customType value."
        },
        "customType": {
          "type": "string",
          "description": "Custom type."
        },
        "sourceIsStructured": {
          "type": "boolean",
          "description": "User supplied address was structured. Structured addresses are NOT supported at this time. You might be able to write structured addresses but any values will eventually be clobbered."
        },
        "region": {
          "type": "string",
          "description": "Region."
        },
        "locality": {
          "type": "string",
          "description": "Locality."
        }
      }
    },
    "User": {
      "id": "User",
      "description": "The Directory API allows you to create and manage your account's users, user aliases, and user Gmail chat profile photos. For more information about common tasks, see the [User Accounts Developer's Guide](/admin-sdk/directory/v1/guides/manage-users.html) and the [User Aliases Developer's Guide](/admin-sdk/directory/v1/guides/manage-user-aliases.html).",
      "type": "object",
      "properties": {
        "lastLoginTime": {
          "type": "string",
          "format": "date-time",
          "description": "User's last login time. (Read-only)",
          "readOnly": true
        },
        "ims": {
          "description": "The user's Instant Messenger (IM) accounts. A user account can have multiple ims properties. But, only one of these ims properties can be the primary IM contact. The maximum allowed data size for this field is 2Kb.",
          "type": "any"
        },
        "orgUnitPath": {
          "description": "The full path of the parent organization associated with the user. If the parent organization is the top-level, it is represented as a forward slash (`/`).",
          "type": "string"
        },
        "nonEditableAliases": {
          "readOnly": true,
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Output only. List of the user's non-editable alias email addresses. These are typically outside the account's primary domain or sub-domain."
        },
        "posixAccounts": {
          "description": "A list of [POSIX](http://www.opengroup.org/austin/papers/posix_faq.html) account information for the user.",
          "type": "any"
        },
        "addresses": {
          "description": "A list of the user's addresses. The maximum allowed data size for this field is 10Kb.",
          "type": "any"
        },
        "isDelegatedAdmin": {
          "type": "boolean",
          "readOnly": true,
          "description": "Output only. Indicates if the user is a delegated administrator. Delegated administrators are supported by the API but cannot create or undelete users, or make users administrators. These requests are ignored by the API service. Roles and privileges for administrators are assigned using the [Admin console](http://support.google.com/a/bin/answer.py?answer=33325)."
        },
        "password": {
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          },
          "type": "string",
          "description": "User's password"
        },
        "relations": {
          "description": "A list of the user's relationships to other users. The maximum allowed data size for this field is 2Kb.",
          "type": "any"
        },
        "recoveryPhone": {
          "type": "string",
          "description": "Recovery phone of the user. The phone number must be in the E.164 format, starting with the plus sign (+). Example: *+16506661212*."
        },
        "sshPublicKeys": {
          "type": "any",
          "description": "A list of SSH public keys."
        },
        "id": {
          "description": "The unique ID for the user. A user `id` can be used as a user request URI's `userKey`.",
          "type": "string"
        },
        "languages": {
          "description": "The user's languages. The maximum allowed data size for this field is 1Kb.",
          "type": "any"
        },
        "emails": {
          "description": "A list of the user's email addresses. The maximum allowed data size for this field is 10Kb.",
          "type": "any"
        },
        "suspensionReason": {
          "type": "string",
          "description": "Output only. Has the reason a user account is suspended either by the administrator or by Google at the time of suspension. The property is returned only if the `suspended` property is `true`.",
          "readOnly": true
        },
        "suspended": {
          "type": "boolean",
          "description": "Indicates if user is suspended."
        },
        "recoveryEmail": {
          "description": "Recovery email of the user.",
          "type": "string"
        },
        "thumbnailPhotoUrl": {
          "description": "Output only. Photo Url of the user (Read-only)",
          "readOnly": true,
          "type": "string"
        },
        "isAdmin": {
          "description": "Output only. Indicates a user with super admininistrator privileges. The `isAdmin` property can only be edited in the [Make a user an administrator](/admin-sdk/directory/v1/guides/manage-users.html#make_admin) operation ( [makeAdmin](/admin-sdk/directory/v1/reference/users/makeAdmin.html) method). If edited in the user [insert](/admin-sdk/directory/v1/reference/users/insert.html) or [update](/admin-sdk/directory/v1/reference/users/update.html) methods, the edit is ignored by the API service.",
          "type": "boolean",
          "readOnly": true
        },
        "primaryEmail": {
          "description": "The user's primary email address. This property is required in a request to create a user account. The `primaryEmail` must be unique and cannot be an alias of another user.",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          },
          "type": "string"
        },
        "archived": {
          "type": "boolean",
          "description": "Indicates if user is archived."
        },
        "aliases": {
          "readOnly": true,
          "items": {
            "type": "string"
          },
          "description": "Output only. List of the user's alias email addresses.",
          "type": "array"
        },
        "isEnforcedIn2Sv": {
          "description": "Output only. Is 2-step verification enforced (Read-only)",
          "type": "boolean",
          "readOnly": true
        },
        "customerId": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. The customer ID to [retrieve all account users](/admin-sdk/directory/v1/guides/manage-users.html#get_all_users). You can use the alias `my_customer` to represent your account's `customerId`. As a reseller administrator, you can use the resold customer account's `customerId`. To get a `customerId`, use the account's primary domain in the `domain` parameter of a [users.list](/admin-sdk/directory/v1/reference/users/list) request."
        },
        "phones": {
          "description": "A list of the user's phone numbers. The maximum allowed data size for this field is 1Kb.",
          "type": "any"
        },
        "externalIds": {
          "description": "A list of external IDs for the user, such as an employee or network ID. The maximum allowed data size for this field is 2Kb.",
          "type": "any"
        },
        "etag": {
          "readOnly": true,
          "description": "Output only. ETag of the resource.",
          "type": "string"
        },
        "hashFunction": {
          "description": "Stores the hash format of the password property. We recommend sending the `password` property value as a base 16 bit hexadecimal-encoded hash value. Set the `hashFunction` values as either the [SHA-1](http://wikipedia.org/wiki/SHA-1), [MD5](http://wikipedia.org/wiki/MD5), or [crypt](https://en.wikipedia.org/wiki/Crypt_(C)) hash format.",
          "type": "string"
        },
        "ipWhitelisted": {
          "type": "boolean",
          "description": "If `true`, the user's IP address is [white listed](http://support.google.com/a/bin/answer.py?answer=60752)."
        },
        "name": {
          "$ref": "UserName",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          },
          "description": "Holds the given and family names of the user, and the read-only `fullName` value. The maximum number of characters in the `givenName` and in the `familyName` values is 60. In addition, name values support unicode/UTF-8 characters, and can contain spaces, letters (a-z), numbers (0-9), dashes (-), forward slashes (/), and periods (.). For more information about character usage rules, see the [administration help center](http://support.google.com/a/bin/answer.py?answer=33386). Maximum allowed data size for this field is 1Kb."
        },
        "keywords": {
          "type": "any",
          "description": "The user's keywords. The maximum allowed data size for this field is 1Kb."
        },
        "isEnrolledIn2Sv": {
          "readOnly": true,
          "description": "Output only. Is enrolled in 2-step verification (Read-only)",
          "type": "boolean"
        },
        "agreedToTerms": {
          "readOnly": true,
          "type": "boolean",
          "description": "Output only. This property is `true` if the user has completed an initial login and accepted the Terms of Service agreement."
        },
        "kind": {
          "readOnly": true,
          "description": "Output only. The type of the API resource. For Users resources, the value is `admin#directory#user`.",
          "type": "string",
          "default": "admin#directory#user"
        },
        "isMailboxSetup": {
          "readOnly": true,
          "type": "boolean",
          "description": "Output only. Indicates if the user's Google mailbox is created. This property is only applicable if the user has been assigned a Gmail license."
        },
        "thumbnailPhotoEtag": {
          "description": "Output only. ETag of the user's photo (Read-only)",
          "readOnly": true,
          "type": "string"
        },
        "includeInGlobalAddressList": {
          "description": "Indicates if the user's profile is visible in the G Suite global address list when the contact sharing feature is enabled for the domain. For more information about excluding user profiles, see the [administration help center](http://support.google.com/a/bin/answer.py?answer=1285988).",
          "type": "boolean"
        },
        "creationTime": {
          "readOnly": true,
          "type": "string",
          "description": "User's G Suite account creation time. (Read-only)",
          "format": "date-time"
        },
        "gender": {
          "description": "The user's gender. The maximum allowed data size for this field is 1Kb.",
          "type": "any"
        },
        "organizations": {
          "type": "any",
          "description": "A list of organizations the user belongs to. The maximum allowed data size for this field is 10Kb."
        },
        "locations": {
          "type": "any",
          "description": "The user's locations. The maximum allowed data size for this field is 10Kb."
        },
        "deletionTime": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "notes": {
          "type": "any",
          "description": "Notes for the user."
        },
        "websites": {
          "type": "any",
          "description": "The user's websites. The maximum allowed data size for this field is 2Kb."
        },
        "changePasswordAtNextLogin": {
          "type": "boolean",
          "description": "Indicates if the user is forced to change their password at next login. This setting doesn't apply when [the user signs in via a third-party identity provider](https://support.google.com/a/answer/60224)."
        },
        "customSchemas": {
          "additionalProperties": {
            "$ref": "UserCustomProperties"
          },
          "type": "object",
          "description": "Custom fields of the user."
        }
      }
    },
    "UserEmail": {
      "id": "UserEmail",
      "type": "object",
      "description": "JSON template for an email.",
      "properties": {
        "customType": {
          "description": "Custom Type.",
          "type": "string"
        },
        "address": {
          "description": "Email id of the user.",
          "type": "string"
        },
        "primary": {
          "description": "If this is user's primary email. Only one entry could be marked as primary.",
          "type": "boolean"
        },
        "type": {
          "description": "Each entry can have a type which indicates standard types of that entry. For example email could be of home, work etc. In addition to the standard type, an entry can have a custom type and can take any value Such types should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        }
      }
    },
    "UserExternalId": {
      "properties": {
        "customType": {
          "description": "Custom type.",
          "type": "string"
        },
        "value": {
          "type": "string",
          "description": "The value of the id."
        },
        "type": {
          "description": "The type of the Id.",
          "type": "string"
        }
      },
      "description": "JSON template for an externalId entry.",
      "id": "UserExternalId",
      "type": "object"
    }
  },
  "packagePath": "admin",
  "description": "Admin SDK lets administrators of enterprise domains to view and manage resources like user, groups etc. It also provides audit and usage reports of domain.",
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
  },
  "resources": {
    "members": {
      "methods": {
        "delete": {
          "id": "directory.members.delete",
          "parameters": {
            "groupKey": {
              "required": true,
              "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.",
              "location": "path",
              "type": "string"
            },
            "memberKey": {
              "description": "Identifies the group member in the API request. A group member can be a user or another group. The value can be the member's (group or user) primary email address, alias, or unique ID.",
              "location": "path",
              "type": "string",
              "required": true
            }
          },
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "description": "Removes a member from a group.",
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "httpMethod": "DELETE"
        },
        "insert": {
          "description": "Adds a user to the specified group.",
          "httpMethod": "POST",
          "request": {
            "$ref": "Member"
          },
          "response": {
            "$ref": "Member"
          },
          "parameters": {
            "groupKey": {
              "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.",
              "type": "string",
              "required": true,
              "location": "path"
            }
          },
          "path": "admin/directory/v1/groups/{groupKey}/members",
          "id": "directory.members.insert",
          "flatPath": "admin/directory/v1/groups/{groupKey}/members",
          "parameterOrder": [
            "groupKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ]
        },
        "update": {
          "parameters": {
            "memberKey": {
              "required": true,
              "location": "path",
              "description": "Identifies the group member in the API request. A group member can be a user or another group. The value can be the member's (group or user) primary email address, alias, or unique ID.",
              "type": "string"
            },
            "groupKey": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID."
            }
          },
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "description": "Updates the membership of a user in the specified group.",
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "id": "directory.members.update",
          "httpMethod": "PUT",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "request": {
            "$ref": "Member"
          },
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "response": {
            "$ref": "Member"
          }
        },
        "get": {
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "response": {
            "$ref": "Member"
          },
          "parameters": {
            "memberKey": {
              "required": true,
              "description": "Identifies the group member in the API request. A group member can be a user or another group. The value can be the member's (group or user) primary email address, alias, or unique ID.",
              "location": "path",
              "type": "string"
            },
            "groupKey": {
              "type": "string",
              "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.",
              "required": true,
              "location": "path"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member",
            "https://www.googleapis.com/auth/admin.directory.group.member.readonly",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "id": "directory.members.get",
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "description": "Retrieves a group member's properties.",
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}"
        },
        "list": {
          "parameterOrder": [
            "groupKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member",
            "https://www.googleapis.com/auth/admin.directory.group.member.readonly",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "path": "admin/directory/v1/groups/{groupKey}/members",
          "description": "Retrieves a paginated list of all members in a group.",
          "flatPath": "admin/directory/v1/groups/{groupKey}/members",
          "response": {
            "$ref": "Members"
          },
          "httpMethod": "GET",
          "id": "directory.members.list",
          "parameters": {
            "groupKey": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID."
            },
            "roles": {
              "description": "The `roles` query parameter allows you to retrieve group members by role. Allowed values are `OWNER`, `MANAGER`, and `MEMBER`.",
              "location": "query",
              "type": "string"
            },
            "maxResults": {
              "location": "query",
              "minimum": "1",
              "type": "integer",
              "default": "200",
              "format": "int32",
              "description": "Maximum number of results to return. Max allowed value is 200."
            },
            "pageToken": {
              "location": "query",
              "description": "Token to specify next page in the list.",
              "type": "string"
            },
            "includeDerivedMembership": {
              "type": "boolean",
              "location": "query",
              "description": "Whether to list indirect memberships. Default: false."
            }
          }
        },
        "patch": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "id": "directory.members.patch",
          "response": {
            "$ref": "Member"
          },
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "httpMethod": "PATCH",
          "request": {
            "$ref": "Member"
          },
          "parameters": {
            "memberKey": {
              "description": "Identifies the group member in the API request. A group member can be a user or another group. The value can be the member's (group or user) primary email address, alias, or unique ID.",
              "type": "string",
              "required": true,
              "location": "path"
            },
            "groupKey": {
              "location": "path",
              "required": true,
              "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.",
              "type": "string"
            }
          },
          "description": "Updates the membership properties of a user in the specified group. This method supports [patch semantics](/admin-sdk/directory/v1/guides/performance#patch)."
        },
        "hasMember": {
          "id": "directory.members.hasMember",
          "flatPath": "admin/directory/v1/groups/{groupKey}/hasMember/{memberKey}",
          "parameters": {
            "groupKey": {
              "location": "path",
              "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.",
              "required": true,
              "type": "string"
            },
            "memberKey": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Identifies the user member in the API request. The value can be the user's primary email address, alias, or unique ID."
            }
          },
          "httpMethod": "GET",
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "path": "admin/directory/v1/groups/{groupKey}/hasMember/{memberKey}",
          "response": {
            "$ref": "MembersHasMember"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member",
            "https://www.googleapis.com/auth/admin.directory.group.member.readonly",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "description": "Checks whether the given user is a member of the group. Membership can be direct or nested."
        }
      }
    },
    "domains": {
      "methods": {
        "get": {
          "flatPath": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "path": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "parameters": {
            "customer": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Immutable ID of the G Suite account."
            },
            "domainName": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Name of domain to be retrieved"
            }
          },
          "parameterOrder": [
            "customer",
            "domainName"
          ],
          "response": {
            "$ref": "Domains"
          },
          "description": "Retrieves a domain of the customer.",
          "id": "directory.domains.get",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "httpMethod": "GET"
        },
        "list": {
          "parameters": {
            "customer": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account."
            }
          },
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/customer/{customer}/domains",
          "description": "Lists the domains of the customer.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "path": "admin/directory/v1/customer/{customer}/domains",
          "parameterOrder": [
            "customer"
          ],
          "response": {
            "$ref": "Domains2"
          },
          "id": "directory.domains.list"
        },
        "insert": {
          "parameterOrder": [
            "customer"
          ],
          "description": "Inserts a domain of the customer.",
          "parameters": {
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "location": "path",
              "type": "string",
              "required": true
            }
          },
          "flatPath": "admin/directory/v1/customer/{customer}/domains",
          "request": {
            "$ref": "Domains"
          },
          "path": "admin/directory/v1/customer/{customer}/domains",
          "httpMethod": "POST",
          "id": "directory.domains.insert",
          "response": {
            "$ref": "Domains"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ]
        },
        "delete": {
          "path": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "parameters": {
            "domainName": {
              "description": "Name of domain to be deleted",
              "type": "string",
              "required": true,
              "location": "path"
            },
            "customer": {
              "type": "string",
              "description": "Immutable ID of the G Suite account.",
              "required": true,
              "location": "path"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "id": "directory.domains.delete",
          "parameterOrder": [
            "customer",
            "domainName"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "description": "Deletes a domain of the customer.",
          "httpMethod": "DELETE"
        }
      }
    },
    "asps": {
      "methods": {
        "list": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "id": "directory.asps.list",
          "flatPath": "admin/directory/v1/users/{userKey}/asps",
          "description": "List the ASPs issued by a user.",
          "path": "admin/directory/v1/users/{userKey}/asps",
          "httpMethod": "GET",
          "response": {
            "$ref": "Asps"
          },
          "parameterOrder": [
            "userKey"
          ],
          "parameters": {
            "userKey": {
              "type": "string",
              "location": "path",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "required": true
            }
          }
        },
        "get": {
          "id": "directory.asps.get",
          "parameters": {
            "codeId": {
              "format": "int32",
              "location": "path",
              "required": true,
              "description": "The unique ID of the ASP.",
              "type": "integer"
            },
            "userKey": {
              "location": "path",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "required": true,
              "type": "string"
            }
          },
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "description": "Get information about an ASP issued by a user.",
          "path": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "response": {
            "$ref": "Asp"
          },
          "parameterOrder": [
            "userKey",
            "codeId"
          ]
        },
        "delete": {
          "id": "directory.asps.delete",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "parameters": {
            "codeId": {
              "description": "The unique ID of the ASP to be deleted.",
              "required": true,
              "format": "int32",
              "type": "integer",
              "location": "path"
            },
            "userKey": {
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "type": "string",
              "location": "path",
              "required": true
            }
          },
          "parameterOrder": [
            "userKey",
            "codeId"
          ],
          "httpMethod": "DELETE",
          "path": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "description": "Delete an ASP issued by a user."
        }
      }
    },
    "schemas": {
      "methods": {
        "update": {
          "request": {
            "$ref": "Schema"
          },
          "description": "Update schema",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "response": {
            "$ref": "Schema"
          },
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "parameters": {
            "schemaKey": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Name or immutable ID of the schema."
            },
            "customerId": {
              "description": "Immutable ID of the G Suite account.",
              "required": true,
              "type": "string",
              "location": "path"
            }
          },
          "httpMethod": "PUT",
          "id": "directory.schemas.update",
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ]
        },
        "get": {
          "parameters": {
            "customerId": {
              "description": "Immutable ID of the G Suite account.",
              "location": "path",
              "type": "string",
              "required": true
            },
            "schemaKey": {
              "description": "Name or immutable ID of the schema.",
              "required": true,
              "type": "string",
              "location": "path"
            }
          },
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "response": {
            "$ref": "Schema"
          },
          "description": "Retrieve schema",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema",
            "https://www.googleapis.com/auth/admin.directory.userschema.readonly"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "httpMethod": "GET",
          "id": "directory.schemas.get"
        },
        "delete": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "description": "Delete schema",
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "httpMethod": "DELETE",
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "id": "directory.schemas.delete",
          "parameters": {
            "customerId": {
              "type": "string",
              "description": "Immutable ID of the G Suite account.",
              "location": "path",
              "required": true
            },
            "schemaKey": {
              "required": true,
              "description": "Name or immutable ID of the schema.",
              "type": "string",
              "location": "path"
            }
          }
        },
        "insert": {
          "parameters": {
            "customerId": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account."
            }
          },
          "path": "admin/directory/v1/customer/{customerId}/schemas",
          "request": {
            "$ref": "Schema"
          },
          "id": "directory.schemas.insert",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "httpMethod": "POST",
          "response": {
            "$ref": "Schema"
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas",
          "parameterOrder": [
            "customerId"
          ],
          "description": "Create schema."
        },
        "patch": {
          "request": {
            "$ref": "Schema"
          },
          "response": {
            "$ref": "Schema"
          },
          "id": "directory.schemas.patch",
          "parameters": {
            "customerId": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account."
            },
            "schemaKey": {
              "description": "Name or immutable ID of the schema.",
              "location": "path",
              "type": "string",
              "required": true
            }
          },
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "description": "Patch Schema via Apiary Patch Orchestration",
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "httpMethod": "PATCH"
        },
        "list": {
          "parameterOrder": [
            "customerId"
          ],
          "response": {
            "$ref": "Schemas"
          },
          "id": "directory.schemas.list",
          "path": "admin/directory/v1/customer/{customerId}/schemas",
          "parameters": {
            "customerId": {
              "location": "path",
              "description": "Immutable ID of the G Suite account.",
              "type": "string",
              "required": true
            }
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas",
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema",
            "https://www.googleapis.com/auth/admin.directory.userschema.readonly"
          ],
          "description": "Retrieve all schemas for a customer"
        }
      }
    },
    "roles": {
      "methods": {
        "patch": {
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "request": {
            "$ref": "Role"
          },
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "description": "Patch role via Apiary Patch Orchestration",
          "response": {
            "$ref": "Role"
          },
          "parameters": {
            "customer": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Immutable ID of the G Suite account."
            },
            "roleId": {
              "type": "string",
              "description": "Immutable ID of the role.",
              "required": true,
              "location": "path"
            }
          },
          "id": "directory.roles.patch",
          "httpMethod": "PATCH",
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}"
        },
        "insert": {
          "parameterOrder": [
            "customer"
          ],
          "request": {
            "$ref": "Role"
          },
          "httpMethod": "POST",
          "description": "Creates a role.",
          "parameters": {
            "customer": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account."
            }
          },
          "response": {
            "$ref": "Role"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "path": "admin/directory/v1/customer/{customer}/roles",
          "flatPath": "admin/directory/v1/customer/{customer}/roles",
          "id": "directory.roles.insert"
        },
        "delete": {
          "parameters": {
            "customer": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the G Suite account."
            },
            "roleId": {
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the role.",
              "required": true
            }
          },
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "description": "Deletes a role.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "id": "directory.roles.delete",
          "httpMethod": "DELETE"
        },
        "get": {
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "parameters": {
            "customer": {
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account.",
              "required": true
            },
            "roleId": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Immutable ID of the role."
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "id": "directory.roles.get",
          "description": "Retrieves a role.",
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "response": {
            "$ref": "Role"
          }
        },
        "list": {
          "response": {
            "$ref": "Roles"
          },
          "description": "Retrieves a paginated list of all the roles in a domain.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "parameters": {
            "pageToken": {
              "description": "Token to specify the next page in the list.",
              "location": "query",
              "type": "string"
            },
            "customer": {
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the G Suite account.",
              "required": true
            },
            "maxResults": {
              "type": "integer",
              "format": "int32",
              "location": "query",
              "description": "Maximum number of results to return.",
              "maximum": "100",
              "minimum": "1"
            }
          },
          "flatPath": "admin/directory/v1/customer/{customer}/roles",
          "parameterOrder": [
            "customer"
          ],
          "httpMethod": "GET",
          "path": "admin/directory/v1/customer/{customer}/roles",
          "id": "directory.roles.list"
        },
        "update": {
          "description": "Updates a role.",
          "httpMethod": "PUT",
          "parameters": {
            "roleId": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Immutable ID of the role."
            },
            "customer": {
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the G Suite account.",
              "required": true
            }
          },
          "response": {
            "$ref": "Role"
          },
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "request": {
            "$ref": "Role"
          },
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "id": "directory.roles.update",
          "parameterOrder": [
            "customer",
            "roleId"
          ]
        }
      }
    },
    "users": {
      "methods": {
        "update": {
          "parameters": {
            "userKey": {
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "type": "string",
              "required": true,
              "location": "path"
            }
          },
          "httpMethod": "PUT",
          "description": "Updates a user. This method supports patch semantics, meaning you only need to include the fields you wish to update. Fields that are not present in the request will be preserved, and fields set to `null` will be cleared.",
          "path": "admin/directory/v1/users/{userKey}",
          "id": "directory.users.update",
          "request": {
            "$ref": "User"
          },
          "flatPath": "admin/directory/v1/users/{userKey}",
          "parameterOrder": [
            "userKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "response": {
            "$ref": "User"
          }
        },
        "insert": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "request": {
            "$ref": "User"
          },
          "id": "directory.users.insert",
          "parameters": {},
          "flatPath": "admin/directory/v1/users",
          "response": {
            "$ref": "User"
          },
          "httpMethod": "POST",
          "description": "Creates a user.",
          "parameterOrder": [],
          "path": "admin/directory/v1/users"
        },
        "watch": {
          "path": "admin/directory/v1/users/watch",
          "parameterOrder": [],
          "response": {
            "$ref": "Channel"
          },
          "request": {
            "$ref": "Channel"
          },
          "parameters": {
            "customFieldMask": {
              "location": "query",
              "type": "string",
              "description": "Comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when projection=custom."
            },
            "domain": {
              "location": "query",
              "type": "string",
              "description": "Name of the domain. Fill this field to get users from only this domain. To return all users in a multi-domain fill customer field instead.\""
            },
            "projection": {
              "enum": [
                "projectionUnspecified",
                "basic",
                "custom",
                "full"
              ],
              "enumDescriptions": [
                "",
                "Do not include any custom fields for the user.",
                "Include custom fields from schemas mentioned in customFieldMask.",
                "Include all fields associated with this user."
              ],
              "default": "basic",
              "type": "string",
              "description": "What subset of fields to fetch for this user.",
              "location": "query"
            },
            "customer": {
              "description": "Immutable ID of the G Suite account. In case of multi-domain, to fetch all users for a customer, fill this field instead of domain.",
              "location": "query",
              "type": "string"
            },
            "pageToken": {
              "type": "string",
              "location": "query",
              "description": "Token to specify next page in the list"
            },
            "query": {
              "type": "string",
              "description": "Query string search. Should be of the form \"\". Complete documentation is at https: //developers.google.com/admin-sdk/directory/v1/guides/search-users",
              "location": "query"
            },
            "maxResults": {
              "description": "Maximum number of results to return.",
              "default": "100",
              "minimum": "1",
              "maximum": "500",
              "location": "query",
              "format": "int32",
              "type": "integer"
            },
            "orderBy": {
              "enum": [
                "orderByUnspecified",
                "email",
                "familyName",
                "givenName"
              ],
              "location": "query",
              "description": "Column to use for sorting results",
              "enumDescriptions": [
                "",
                "Primary email of the user.",
                "User's family name.",
                "User's given name."
              ],
              "type": "string"
            },
            "event": {
              "description": "Events to watch for.",
              "enum": [
                "eventTypeUnspecified",
                "add",
                "delete",
                "makeAdmin",
                "undelete",
                "update"
              ],
              "location": "query",
              "type": "string",
              "enumDescriptions": [
                "",
                "User Created Event",
                "User Deleted Event",
                "User Admin Status Change Event",
                "User Undeleted Event",
                "User Updated Event"
              ]
            },
            "showDeleted": {
              "location": "query",
              "type": "string",
              "description": "If set to true, retrieves the list of deleted users. (Default: false)"
            },
            "viewType": {
              "enum": [
                "admin_view",
                "domain_public"
              ],
              "location": "query",
              "default": "admin_view",
              "type": "string",
              "description": "Whether to fetch the administrator-only or domain-wide public view of the user. For more information, see [Retrieve a user as a non-administrator](/admin-sdk/directory/v1/guides/manage-users#retrieve_users_non_admin).",
              "enumDescriptions": [
                "Results include both administrator-only and domain-public fields.",
                "Results only include fields for the user that are publicly visible to other users in the domain."
              ]
            },
            "sortOrder": {
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "type": "string",
              "description": "Whether to return results in ascending or descending order.",
              "location": "query",
              "enum": [
                "sortOrderUnspecified",
                "ASCENDING",
                "DESCENDING"
              ]
            }
          },
          "flatPath": "admin/directory/v1/users/watch",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "id": "directory.users.watch",
          "description": "Watch for changes in users list",
          "httpMethod": "POST"
        },
        "list": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "description": "Retrieves a paginated list of either deleted users or all users in a domain.",
          "httpMethod": "GET",
          "parameterOrder": [],
          "parameters": {
            "projection": {
              "location": "query",
              "type": "string",
              "enumDescriptions": [
                "",
                "Do not include any custom fields for the user.",
                "Include custom fields from schemas requested in `customFieldMask`.",
                "Include all fields associated with this user."
              ],
              "enum": [
                "projectionUndefined",
                "basic",
                "custom",
                "full"
              ],
              "default": "basic",
              "description": "What subset of fields to fetch for this user."
            },
            "viewType": {
              "enum": [
                "view_type_undefined",
                "admin_view",
                "domain_public"
              ],
              "type": "string",
              "description": "Whether to fetch the administrator-only or domain-wide public view of the user. For more information, see [Retrieve a user as a non-administrator](/admin-sdk/directory/v1/guides/manage-users#retrieve_users_non_admin).",
              "default": "admin_view",
              "enumDescriptions": [
                "",
                "Results include both administrator-only and domain-public fields for the user.",
                "Results only include fields for the user that are publicly visible to other users in the domain."
              ],
              "location": "query"
            },
            "customer": {
              "location": "query",
              "description": "The unique ID for the customer's G Suite account. In case of a multi-domain account, to fetch all groups for a customer, fill this field instead of domain. You can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users). Either the `customer` or the `domain` parameter must be provided.",
              "type": "string"
            },
            "showDeleted": {
              "type": "string",
              "location": "query",
              "description": "If set to `true`, retrieves the list of deleted users. (Default: `false`)"
            },
            "query": {
              "location": "query",
              "type": "string",
              "description": "Query string for searching user fields. For more information on constructing user queries, see [Search for Users](/admin-sdk/directory/v1/guides/search-users)."
            },
            "pageToken": {
              "location": "query",
              "description": "Token to specify next page in the list",
              "type": "string"
            },
            "maxResults": {
              "type": "integer",
              "default": "100",
              "minimum": "1",
              "location": "query",
              "maximum": "500",
              "format": "int32",
              "description": "Maximum number of results to return."
            },
            "customFieldMask": {
              "location": "query",
              "description": "A comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when `projection=custom`.",
              "type": "string"
            },
            "orderBy": {
              "enum": [
                "orderByUndefined",
                "email",
                "familyName",
                "givenName"
              ],
              "enumDescriptions": [
                "",
                "Primary email of the user.",
                "User's family name.",
                "User's given name."
              ],
              "location": "query",
              "description": "Property to use for sorting results.",
              "type": "string"
            },
            "sortOrder": {
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ],
              "location": "query",
              "type": "string",
              "description": "Whether to return results in ascending or descending order.",
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ]
            },
            "domain": {
              "type": "string",
              "location": "query",
              "description": "The domain name. Use this field to get fields from only one domain. To return all domains for a customer account, use the `customer` query parameter instead. Either the `customer` or the `domain` parameter must be provided."
            }
          },
          "path": "admin/directory/v1/users",
          "id": "directory.users.list",
          "flatPath": "admin/directory/v1/users",
          "response": {
            "$ref": "Users"
          }
        },
        "makeAdmin": {
          "description": "Makes a user a super administrator.",
          "path": "admin/directory/v1/users/{userKey}/makeAdmin",
          "id": "directory.users.makeAdmin",
          "flatPath": "admin/directory/v1/users/{userKey}/makeAdmin",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "parameters": {
            "userKey": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID."
            }
          },
          "request": {
            "$ref": "UserMakeAdmin"
          },
          "parameterOrder": [
            "userKey"
          ],
          "httpMethod": "POST"
        },
        "get": {
          "httpMethod": "GET",
          "parameters": {
            "projection": {
              "enum": [
                "projectionUndefined",
                "basic",
                "custom",
                "full"
              ],
              "description": "What subset of fields to fetch for this user.",
              "location": "query",
              "default": "basic",
              "type": "string",
              "enumDescriptions": [
                "",
                "Do not include any custom fields for the user.",
                "Include custom fields from schemas requested in `customFieldMask`.",
                "Include all fields associated with this user."
              ]
            },
            "userKey": {
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "type": "string",
              "location": "path",
              "required": true
            },
            "customFieldMask": {
              "type": "string",
              "description": "A comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when `projection=custom`.",
              "location": "query"
            },
            "viewType": {
              "description": "Whether to fetch the administrator-only or domain-wide public view of the user. For more information, see [Retrieve a user as a non-administrator](/admin-sdk/directory/v1/guides/manage-users#retrieve_users_non_admin).",
              "enum": [
                "view_type_undefined",
                "admin_view",
                "domain_public"
              ],
              "default": "admin_view",
              "enumDescriptions": [
                "",
                "Results include both administrator-only and domain-public fields for the user.",
                "Results only include fields for the user that are publicly visible to other users in the domain."
              ],
              "type": "string",
              "location": "query"
            }
          },
          "flatPath": "admin/directory/v1/users/{userKey}",
          "path": "admin/directory/v1/users/{userKey}",
          "response": {
            "$ref": "User"
          },
          "description": "Retrieves a user.",
          "parameterOrder": [
            "userKey"
          ],
          "id": "directory.users.get",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.readonly"
          ]
        },
        "undelete": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "description": "Undeletes a deleted user.",
          "request": {
            "$ref": "UserUndelete"
          },
          "parameters": {
            "userKey": {
              "location": "path",
              "required": true,
              "description": "The immutable id of the user",
              "type": "string"
            }
          },
          "httpMethod": "POST",
          "flatPath": "admin/directory/v1/users/{userKey}/undelete",
          "path": "admin/directory/v1/users/{userKey}/undelete",
          "id": "directory.users.undelete",
          "parameterOrder": [
            "userKey"
          ]
        },
        "signOut": {
          "httpMethod": "POST",
          "id": "directory.users.signOut",
          "parameters": {
            "userKey": {
              "description": "Identifies the target user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "location": "path",
              "type": "string",
              "required": true
            }
          },
          "parameterOrder": [
            "userKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}/signOut",
          "path": "admin/directory/v1/users/{userKey}/signOut",
          "description": "Sign a user out of all web and device sessions and reset their sign-in cookies. User will have to sign in by authenticating again."
        },
        "delete": {
          "path": "admin/directory/v1/users/{userKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "id": "directory.users.delete",
          "httpMethod": "DELETE",
          "flatPath": "admin/directory/v1/users/{userKey}",
          "description": "Deletes a user.",
          "parameterOrder": [
            "userKey"
          ],
          "parameters": {
            "userKey": {
              "type": "string",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "location": "path",
              "required": true
            }
          }
        },
        "patch": {
          "parameterOrder": [
            "userKey"
          ],
          "request": {
            "$ref": "User"
          },
          "description": "Updates a user using patch semantics. The update method should be used instead, since it also supports patch semantics and has better performance. This method is unable to clear fields that contain repeated objects (`addresses`, `phones`, etc). Use the update method instead.",
          "id": "directory.users.patch",
          "parameters": {
            "userKey": {
              "type": "string",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "location": "path",
              "required": true
            }
          },
          "flatPath": "admin/directory/v1/users/{userKey}",
          "httpMethod": "PATCH",
          "path": "admin/directory/v1/users/{userKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "response": {
            "$ref": "User"
          }
        }
      },
      "resources": {
        "aliases": {
          "methods": {
            "list": {
              "parameters": {
                "userKey": {
                  "required": true,
                  "type": "string",
                  "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
                  "location": "path"
                }
              },
              "flatPath": "admin/directory/v1/users/{userKey}/aliases",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias",
                "https://www.googleapis.com/auth/admin.directory.user.alias.readonly",
                "https://www.googleapis.com/auth/admin.directory.user.readonly"
              ],
              "path": "admin/directory/v1/users/{userKey}/aliases",
              "httpMethod": "GET",
              "description": "Lists all aliases for a user.",
              "id": "directory.users.aliases.list",
              "response": {
                "$ref": "Aliases"
              },
              "parameterOrder": [
                "userKey"
              ]
            },
            "insert": {
              "httpMethod": "POST",
              "parameterOrder": [
                "userKey"
              ],
              "path": "admin/directory/v1/users/{userKey}/aliases",
              "flatPath": "admin/directory/v1/users/{userKey}/aliases",
              "response": {
                "$ref": "Alias"
              },
              "request": {
                "$ref": "Alias"
              },
              "id": "directory.users.aliases.insert",
              "parameters": {
                "userKey": {
                  "required": true,
                  "location": "path",
                  "type": "string",
                  "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID."
                }
              },
              "description": "Adds an alias.",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias"
              ]
            },
            "delete": {
              "parameterOrder": [
                "userKey",
                "alias"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias"
              ],
              "id": "directory.users.aliases.delete",
              "path": "admin/directory/v1/users/{userKey}/aliases/{alias}",
              "httpMethod": "DELETE",
              "parameters": {
                "alias": {
                  "location": "path",
                  "type": "string",
                  "required": true,
                  "description": "The alias to be removed."
                },
                "userKey": {
                  "location": "path",
                  "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
                  "type": "string",
                  "required": true
                }
              },
              "description": "Removes an alias.",
              "flatPath": "admin/directory/v1/users/{userKey}/aliases/{alias}"
            },
            "watch": {
              "description": "Watch for changes in users list.",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias",
                "https://www.googleapis.com/auth/admin.directory.user.alias.readonly",
                "https://www.googleapis.com/auth/admin.directory.user.readonly"
              ],
              "flatPath": "admin/directory/v1/users/{userKey}/aliases/watch",
              "request": {
                "$ref": "Channel"
              },
              "id": "directory.users.aliases.watch",
              "parameters": {
                "event": {
                  "description": "Events to watch for.",
                  "enum": [
                    "eventUndefined",
                    "add",
                    "delete"
                  ],
                  "location": "query",
                  "enumDescriptions": [
                    "",
                    "Alias Created Event",
                    "Alias Deleted Event"
                  ],
                  "type": "string"
                },
                "userKey": {
                  "required": true,
                  "location": "path",
                  "type": "string",
                  "description": "Email or immutable ID of the user"
                }
              },
              "path": "admin/directory/v1/users/{userKey}/aliases/watch",
              "httpMethod": "POST",
              "response": {
                "$ref": "Channel"
              },
              "parameterOrder": [
                "userKey"
              ]
            }
          }
        },
        "photos": {
          "methods": {
            "update": {
              "request": {
                "$ref": "UserPhoto"
              },
              "httpMethod": "PUT",
              "id": "directory.users.photos.update",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user"
              ],
              "response": {
                "$ref": "UserPhoto"
              },
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "description": "Adds a photo for the user.",
              "parameterOrder": [
                "userKey"
              ],
              "parameters": {
                "userKey": {
                  "required": true,
                  "type": "string",
                  "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
                  "location": "path"
                }
              },
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail"
            },
            "get": {
              "response": {
                "$ref": "UserPhoto"
              },
              "parameterOrder": [
                "userKey"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.readonly"
              ],
              "description": "Retrieves the user's photo.",
              "parameters": {
                "userKey": {
                  "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
                  "required": true,
                  "type": "string",
                  "location": "path"
                }
              },
              "id": "directory.users.photos.get",
              "httpMethod": "GET",
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail"
            },
            "delete": {
              "httpMethod": "DELETE",
              "id": "directory.users.photos.delete",
              "description": "Removes the user's photo.",
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user"
              ],
              "parameters": {
                "userKey": {
                  "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "parameterOrder": [
                "userKey"
              ],
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail"
            },
            "patch": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user"
              ],
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "httpMethod": "PATCH",
              "parameters": {
                "userKey": {
                  "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
                  "location": "path",
                  "type": "string",
                  "required": true
                }
              },
              "response": {
                "$ref": "UserPhoto"
              },
              "description": "Adds a photo for the user. This method supports [patch semantics](/admin-sdk/directory/v1/guides/performance#patch).",
              "id": "directory.users.photos.patch",
              "parameterOrder": [
                "userKey"
              ],
              "request": {
                "$ref": "UserPhoto"
              },
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail"
            }
          }
        }
      }
    },
    "verificationCodes": {
      "methods": {
        "list": {
          "response": {
            "$ref": "VerificationCodes"
          },
          "id": "directory.verificationCodes.list",
          "parameters": {
            "userKey": {
              "type": "string",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "required": true,
              "location": "path"
            }
          },
          "flatPath": "admin/directory/v1/users/{userKey}/verificationCodes",
          "httpMethod": "GET",
          "description": "Returns the current set of valid backup verification codes for the specified user.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "path": "admin/directory/v1/users/{userKey}/verificationCodes",
          "parameterOrder": [
            "userKey"
          ]
        },
        "invalidate": {
          "description": "Invalidate the current backup verification codes for the user.",
          "parameterOrder": [
            "userKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "httpMethod": "POST",
          "parameters": {
            "userKey": {
              "description": "Email or immutable ID of the user",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "id": "directory.verificationCodes.invalidate",
          "flatPath": "admin/directory/v1/users/{userKey}/verificationCodes/invalidate",
          "path": "admin/directory/v1/users/{userKey}/verificationCodes/invalidate"
        },
        "generate": {
          "id": "directory.verificationCodes.generate",
          "parameters": {
            "userKey": {
              "required": true,
              "description": "Email or immutable ID of the user",
              "type": "string",
              "location": "path"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "path": "admin/directory/v1/users/{userKey}/verificationCodes/generate",
          "parameterOrder": [
            "userKey"
          ],
          "httpMethod": "POST",
          "flatPath": "admin/directory/v1/users/{userKey}/verificationCodes/generate",
          "description": "Generate new backup verification codes for the user."
        }
      }
    },
    "customers": {
      "methods": {
        "get": {
          "response": {
            "$ref": "Customer"
          },
          "description": "Retrieves a customer.",
          "parameterOrder": [
            "customerKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.customer",
            "https://www.googleapis.com/auth/admin.directory.customer.readonly"
          ],
          "id": "directory.customers.get",
          "flatPath": "admin/directory/v1/customers/{customerKey}",
          "parameters": {
            "customerKey": {
              "location": "path",
              "type": "string",
              "description": "Id of the customer to be retrieved",
              "required": true
            }
          },
          "httpMethod": "GET",
          "path": "admin/directory/v1/customers/{customerKey}"
        },
        "update": {
          "request": {
            "$ref": "Customer"
          },
          "parameterOrder": [
            "customerKey"
          ],
          "path": "admin/directory/v1/customers/{customerKey}",
          "httpMethod": "PUT",
          "id": "directory.customers.update",
          "description": "Updates a customer.",
          "parameters": {
            "customerKey": {
              "required": true,
              "location": "path",
              "description": "Id of the customer to be updated",
              "type": "string"
            }
          },
          "flatPath": "admin/directory/v1/customers/{customerKey}",
          "response": {
            "$ref": "Customer"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.customer"
          ]
        },
        "patch": {
          "description": "Patch Customers via Apiary Patch Orchestration",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.customer"
          ],
          "id": "directory.customers.patch",
          "path": "admin/directory/v1/customers/{customerKey}",
          "parameters": {
            "customerKey": {
              "description": "Id of the customer to be updated",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "request": {
            "$ref": "Customer"
          },
          "httpMethod": "PATCH",
          "parameterOrder": [
            "customerKey"
          ],
          "flatPath": "admin/directory/v1/customers/{customerKey}",
          "response": {
            "$ref": "Customer"
          }
        }
      }
    },
    "resources": {
      "resources": {
        "calendars": {
          "methods": {
            "list": {
              "parameterOrder": [
                "customer"
              ],
              "description": "Retrieves a list of calendar resources for an account.",
              "id": "directory.resources.calendars.list",
              "response": {
                "$ref": "CalendarResources"
              },
              "httpMethod": "GET",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "parameters": {
                "pageToken": {
                  "description": "Token to specify the next page in the list.",
                  "location": "query",
                  "type": "string"
                },
                "customer": {
                  "required": true,
                  "location": "path",
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID."
                },
                "orderBy": {
                  "type": "string",
                  "description": "Field(s) to sort results by in either ascending or descending order. Supported fields include `resourceId`, `resourceName`, `capacity`, `buildingId`, and `floorName`. If no order is specified, defaults to ascending. Should be of the form \"field [asc|desc], field [asc|desc], ...\". For example `buildingId, capacity desc` would return results sorted first by `buildingId` in ascending order then by `capacity` in descending order.",
                  "location": "query"
                },
                "maxResults": {
                  "maximum": "500",
                  "minimum": "1",
                  "format": "int32",
                  "location": "query",
                  "description": "Maximum number of results to return.",
                  "type": "integer"
                },
                "query": {
                  "description": "String query used to filter results. Should be of the form \"field operator value\" where field can be any of supported fields and operators can be any of supported operations. Operators include '=' for exact match, '!=' for mismatch and ':' for prefix match or HAS match where applicable. For prefix match, the value should always be followed by a *. Logical operators NOT and AND are supported (in this order of precedence). Supported fields include `generatedResourceName`, `name`, `buildingId`, `floor_name`, `capacity`, `featureInstances.feature.name`, `resourceEmail`, `resourceCategory`. For example `buildingId=US-NYC-9TH AND featureInstances.feature.name:Phone`.",
                  "type": "string",
                  "location": "query"
                }
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars",
              "path": "admin/directory/v1/customer/{customer}/resources/calendars"
            },
            "patch": {
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "id": "directory.resources.calendars.patch",
              "request": {
                "$ref": "CalendarResource"
              },
              "httpMethod": "PATCH",
              "parameters": {
                "calendarResourceId": {
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "description": "The unique ID of the calendar resource to update."
                },
                "customer": {
                  "type": "string",
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID.",
                  "location": "path"
                }
              },
              "response": {
                "$ref": "CalendarResource"
              },
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "description": "Patches a calendar resource via Apiary Patch Orchestration.",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ]
            },
            "get": {
              "response": {
                "$ref": "CalendarResource"
              },
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "parameters": {
                "customer": {
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID."
                },
                "calendarResourceId": {
                  "type": "string",
                  "description": "The unique ID of the calendar resource to retrieve.",
                  "required": true,
                  "location": "path"
                }
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "description": "Retrieves a calendar resource.",
              "id": "directory.resources.calendars.get",
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "httpMethod": "GET"
            },
            "delete": {
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "parameters": {
                "calendarResourceId": {
                  "description": "The unique ID of the calendar resource to delete.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "customer": {
                  "required": true,
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID.",
                  "location": "path"
                }
              },
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "id": "directory.resources.calendars.delete",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "httpMethod": "DELETE",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "description": "Deletes a calendar resource."
            },
            "insert": {
              "request": {
                "$ref": "CalendarResource"
              },
              "path": "admin/directory/v1/customer/{customer}/resources/calendars",
              "id": "directory.resources.calendars.insert",
              "description": "Inserts a calendar resource.",
              "httpMethod": "POST",
              "parameterOrder": [
                "customer"
              ],
              "parameters": {
                "customer": {
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID."
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars",
              "response": {
                "$ref": "CalendarResource"
              }
            },
            "update": {
              "request": {
                "$ref": "CalendarResource"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "httpMethod": "PUT",
              "description": "Updates a calendar resource. This method supports patch semantics, meaning you only need to include the fields you wish to update. Fields that are not present in the request will be preserved.",
              "parameters": {
                "customer": {
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID."
                },
                "calendarResourceId": {
                  "description": "The unique ID of the calendar resource to update.",
                  "location": "path",
                  "type": "string",
                  "required": true
                }
              },
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "id": "directory.resources.calendars.update",
              "response": {
                "$ref": "CalendarResource"
              }
            }
          }
        },
        "features": {
          "methods": {
            "rename": {
              "id": "directory.resources.features.rename",
              "request": {
                "$ref": "FeatureRename"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/features/{oldName}/rename",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{oldName}/rename",
              "httpMethod": "POST",
              "parameters": {
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID.",
                  "type": "string",
                  "required": true,
                  "location": "path"
                },
                "oldName": {
                  "required": true,
                  "location": "path",
                  "type": "string",
                  "description": "The unique ID of the feature to rename."
                }
              },
              "description": "Renames a feature.",
              "parameterOrder": [
                "customer",
                "oldName"
              ]
            },
            "insert": {
              "response": {
                "$ref": "Feature"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "request": {
                "$ref": "Feature"
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features",
              "description": "Inserts a feature.",
              "httpMethod": "POST",
              "path": "admin/directory/v1/customer/{customer}/resources/features",
              "parameterOrder": [
                "customer"
              ],
              "parameters": {
                "customer": {
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID."
                }
              },
              "id": "directory.resources.features.insert"
            },
            "get": {
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "parameters": {
                "customer": {
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID."
                },
                "featureKey": {
                  "description": "The unique ID of the feature to retrieve.",
                  "required": true,
                  "location": "path",
                  "type": "string"
                }
              },
              "description": "Retrieves a feature.",
              "id": "directory.resources.features.get",
              "httpMethod": "GET",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "response": {
                "$ref": "Feature"
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}"
            },
            "update": {
              "response": {
                "$ref": "Feature"
              },
              "request": {
                "$ref": "Feature"
              },
              "description": "Updates a feature.",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "parameters": {
                "featureKey": {
                  "required": true,
                  "description": "The unique ID of the feature to update.",
                  "type": "string",
                  "location": "path"
                },
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID.",
                  "type": "string",
                  "location": "path",
                  "required": true
                }
              },
              "id": "directory.resources.features.update",
              "httpMethod": "PUT",
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ]
            },
            "delete": {
              "parameters": {
                "featureKey": {
                  "location": "path",
                  "type": "string",
                  "required": true,
                  "description": "The unique ID of the feature to delete."
                },
                "customer": {
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID.",
                  "type": "string",
                  "location": "path"
                }
              },
              "httpMethod": "DELETE",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "id": "directory.resources.features.delete",
              "description": "Deletes a feature.",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}"
            },
            "list": {
              "id": "directory.resources.features.list",
              "response": {
                "$ref": "Features"
              },
              "description": "Retrieves a list of features for an account.",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "httpMethod": "GET",
              "parameterOrder": [
                "customer"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features",
              "path": "admin/directory/v1/customer/{customer}/resources/features",
              "parameters": {
                "maxResults": {
                  "description": "Maximum number of results to return.",
                  "maximum": "500",
                  "type": "integer",
                  "minimum": "1",
                  "location": "query",
                  "format": "int32"
                },
                "customer": {
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID.",
                  "type": "string",
                  "location": "path"
                },
                "pageToken": {
                  "type": "string",
                  "location": "query",
                  "description": "Token to specify the next page in the list."
                }
              }
            },
            "patch": {
              "id": "directory.resources.features.patch",
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "parameters": {
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID.",
                  "type": "string",
                  "required": true,
                  "location": "path"
                },
                "featureKey": {
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "description": "The unique ID of the feature to update."
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "response": {
                "$ref": "Feature"
              },
              "description": "Patches a feature via Apiary Patch Orchestration.",
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "httpMethod": "PATCH",
              "request": {
                "$ref": "Feature"
              }
            }
          }
        },
        "buildings": {
          "methods": {
            "list": {
              "httpMethod": "GET",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings",
              "parameters": {
                "customer": {
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID."
                },
                "pageToken": {
                  "type": "string",
                  "description": "Token to specify the next page in the list.",
                  "location": "query"
                },
                "maxResults": {
                  "maximum": "500",
                  "format": "int32",
                  "description": "Maximum number of results to return.",
                  "type": "integer",
                  "location": "query",
                  "minimum": "1"
                }
              },
              "description": "Retrieves a list of buildings for an account.",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "parameterOrder": [
                "customer"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/buildings",
              "response": {
                "$ref": "Buildings"
              },
              "id": "directory.resources.buildings.list"
            },
            "get": {
              "description": "Retrieves a building.",
              "id": "directory.resources.buildings.get",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "response": {
                "$ref": "Building"
              },
              "parameters": {
                "customer": {
                  "required": true,
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID.",
                  "type": "string"
                },
                "buildingId": {
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "description": "The unique ID of the building to retrieve."
                }
              },
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "httpMethod": "GET"
            },
            "insert": {
              "request": {
                "$ref": "Building"
              },
              "parameters": {
                "coordinatesSource": {
                  "location": "query",
                  "enumDescriptions": [
                    "",
                    "Building.coordinates are set to the coordinates included in the request.",
                    "Building.coordinates are automatically populated based on the postal address.",
                    "Defaults to `RESOLVED_FROM_ADDRESS` if postal address is provided. Otherwise, defaults to `CLIENT_SPECIFIED` if coordinates are provided."
                  ],
                  "enum": [
                    "COORDINATES_SOURCE_UNDEFINED",
                    "CLIENT_SPECIFIED",
                    "RESOLVED_FROM_ADDRESS",
                    "SOURCE_UNSPECIFIED"
                  ],
                  "type": "string",
                  "default": "SOURCE_UNSPECIFIED",
                  "description": "Source from which Building.coordinates are derived."
                },
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID.",
                  "location": "path",
                  "type": "string",
                  "required": true
                }
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings",
              "parameterOrder": [
                "customer"
              ],
              "description": "Inserts a building.",
              "path": "admin/directory/v1/customer/{customer}/resources/buildings",
              "id": "directory.resources.buildings.insert",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "response": {
                "$ref": "Building"
              },
              "httpMethod": "POST"
            },
            "update": {
              "request": {
                "$ref": "Building"
              },
              "parameters": {
                "buildingId": {
                  "required": true,
                  "location": "path",
                  "type": "string",
                  "description": "The id of the building to update."
                },
                "coordinatesSource": {
                  "enum": [
                    "COORDINATES_SOURCE_UNDEFINED",
                    "CLIENT_SPECIFIED",
                    "RESOLVED_FROM_ADDRESS",
                    "SOURCE_UNSPECIFIED"
                  ],
                  "enumDescriptions": [
                    "",
                    "Building.coordinates are set to the coordinates included in the request.",
                    "Building.coordinates are automatically populated based on the postal address.",
                    "Defaults to `RESOLVED_FROM_ADDRESS` if postal address is provided. Otherwise, defaults to `CLIENT_SPECIFIED` if coordinates are provided."
                  ],
                  "location": "query",
                  "type": "string",
                  "description": "Source from which Building.coordinates are derived.",
                  "default": "SOURCE_UNSPECIFIED"
                },
                "customer": {
                  "required": true,
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID.",
                  "location": "path"
                }
              },
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "httpMethod": "PUT",
              "response": {
                "$ref": "Building"
              },
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "id": "directory.resources.buildings.update",
              "description": "Updates a building.",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ]
            },
            "patch": {
              "id": "directory.resources.buildings.patch",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "request": {
                "$ref": "Building"
              },
              "parameters": {
                "buildingId": {
                  "type": "string",
                  "description": "The id of the building to update.",
                  "location": "path",
                  "required": true
                },
                "customer": {
                  "type": "string",
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID.",
                  "required": true
                },
                "coordinatesSource": {
                  "default": "SOURCE_UNSPECIFIED",
                  "enum": [
                    "COORDINATES_SOURCE_UNDEFINED",
                    "CLIENT_SPECIFIED",
                    "RESOLVED_FROM_ADDRESS",
                    "SOURCE_UNSPECIFIED"
                  ],
                  "location": "query",
                  "enumDescriptions": [
                    "",
                    "Building.coordinates are set to the coordinates included in the request.",
                    "Building.coordinates are automatically populated based on the postal address.",
                    "Defaults to `RESOLVED_FROM_ADDRESS` if postal address is provided. Otherwise, defaults to `CLIENT_SPECIFIED` if coordinates are provided."
                  ],
                  "description": "Source from which Building.coordinates are derived.",
                  "type": "string"
                }
              },
              "response": {
                "$ref": "Building"
              },
              "description": "Patches a building via Apiary Patch Orchestration.",
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "httpMethod": "PATCH",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ]
            },
            "delete": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "id": "directory.resources.buildings.delete",
              "parameters": {
                "customer": {
                  "location": "path",
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID.",
                  "required": true
                },
                "buildingId": {
                  "location": "path",
                  "type": "string",
                  "description": "The id of the building to delete.",
                  "required": true
                }
              },
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "httpMethod": "DELETE",
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "description": "Deletes a building.",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}"
            }
          }
        }
      }
    },
    "twoStepVerification": {
      "methods": {
        "turnOff": {
          "path": "admin/directory/v1/users/{userKey}/twoStepVerification/turnOff",
          "description": "Turn off 2-Step Verification for user.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "id": "directory.twoStepVerification.turnOff",
          "parameterOrder": [
            "userKey"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}/twoStepVerification/turnOff",
          "parameters": {
            "userKey": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID."
            }
          },
          "httpMethod": "POST"
        }
      }
    },
    "customer": {
      "resources": {
        "devices": {
          "resources": {
            "chromeos": {
              "resources": {
                "commands": {
                  "methods": {
                    "get": {
                      "httpMethod": "GET",
                      "scopes": [
                        "https://www.googleapis.com/auth/admin.directory.device.chromeos",
                        "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly"
                      ],
                      "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}/commands/{commandId}",
                      "response": {
                        "$ref": "DirectoryChromeosdevicesCommand"
                      },
                      "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}/commands/{commandId}",
                      "id": "admin.customer.devices.chromeos.commands.get",
                      "parameterOrder": [
                        "customerId",
                        "deviceId",
                        "commandId"
                      ],
                      "parameters": {
                        "customerId": {
                          "required": true,
                          "location": "path",
                          "type": "string",
                          "description": "Immutable. Immutable ID of the G Suite account."
                        },
                        "deviceId": {
                          "type": "string",
                          "description": "Immutable. Immutable ID of Chrome OS Device.",
                          "location": "path",
                          "required": true
                        },
                        "commandId": {
                          "required": true,
                          "description": "Immutable. Immutable ID of Chrome OS Device Command.",
                          "location": "path",
                          "type": "string",
                          "format": "int64"
                        }
                      },
                      "description": "Gets command data a specific command issued to the device."
                    }
                  }
                }
              },
              "methods": {
                "issueCommand": {
                  "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}:issueCommand",
                  "request": {
                    "$ref": "DirectoryChromeosdevicesIssueCommandRequest"
                  },
                  "parameters": {
                    "customerId": {
                      "location": "path",
                      "required": true,
                      "type": "string",
                      "description": "Immutable. Immutable ID of the G Suite account."
                    },
                    "deviceId": {
                      "description": "Immutable. Immutable ID of Chrome OS Device.",
                      "type": "string",
                      "location": "path",
                      "required": true
                    }
                  },
                  "description": "Issues a command for the device to execute.",
                  "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}:issueCommand",
                  "scopes": [
                    "https://www.googleapis.com/auth/admin.directory.device.chromeos"
                  ],
                  "httpMethod": "POST",
                  "response": {
                    "$ref": "DirectoryChromeosdevicesIssueCommandResponse"
                  },
                  "id": "admin.customer.devices.chromeos.issueCommand",
                  "parameterOrder": [
                    "customerId",
                    "deviceId"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "mobiledevices": {
      "methods": {
        "list": {
          "id": "directory.mobiledevices.list",
          "response": {
            "$ref": "MobileDevices"
          },
          "description": "Retrieves a paginated list of all mobile devices for an account.",
          "parameterOrder": [
            "customerId"
          ],
          "parameters": {
            "maxResults": {
              "minimum": "1",
              "location": "query",
              "format": "int32",
              "type": "integer",
              "default": "100",
              "maximum": "100",
              "description": "Maximum number of results to return. Max allowed value is 100."
            },
            "sortOrder": {
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ],
              "description": "Whether to return results in ascending or descending order. Must be used with the `orderBy` parameter.",
              "type": "string",
              "location": "query"
            },
            "orderBy": {
              "type": "string",
              "enum": [
                "orderByUndefined",
                "deviceId",
                "email",
                "lastSync",
                "model",
                "name",
                "os",
                "status",
                "type"
              ],
              "description": "Device property to use for sorting results.",
              "location": "query",
              "enumDescriptions": [
                "",
                "The serial number for a Google Sync mobile device. For Android devices, this is a software generated unique identifier.",
                "The device owner's email address.",
                "Last policy settings sync date time of the device.",
                "The mobile device's model.",
                "The device owner's user name.",
                "The device's operating system.",
                "The device status.",
                "Type of the device."
              ]
            },
            "customerId": {
              "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).",
              "location": "path",
              "type": "string",
              "required": true
            },
            "projection": {
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, model, status, type, and status)",
                "Includes all metadata fields"
              ],
              "description": "Restrict information returned to a set of selected fields.",
              "type": "string",
              "location": "query"
            },
            "query": {
              "type": "string",
              "description": "Search string in the format given at https://developers.google.com/admin-sdk/directory/v1/search-operators",
              "location": "query"
            },
            "pageToken": {
              "location": "query",
              "description": "Token to specify next page in the list",
              "type": "string"
            }
          },
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.action",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.readonly"
          ],
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile"
        },
        "delete": {
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "description": "Removes a mobile device.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile"
          ],
          "parameters": {
            "resourceId": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "The unique ID the API service uses to identify the mobile device."
            },
            "customerId": {
              "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "id": "directory.mobiledevices.delete",
          "httpMethod": "DELETE",
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "parameterOrder": [
            "customerId",
            "resourceId"
          ]
        },
        "action": {
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}/action",
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "httpMethod": "POST",
          "id": "directory.mobiledevices.action",
          "parameters": {
            "customerId": {
              "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).",
              "type": "string",
              "required": true,
              "location": "path"
            },
            "resourceId": {
              "required": true,
              "description": "The unique ID the API service uses to identify the mobile device.",
              "type": "string",
              "location": "path"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.action"
          ],
          "description": "Takes an action that affects a mobile device. For example, remotely wiping a device.",
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}/action",
          "request": {
            "$ref": "MobileDeviceAction"
          }
        },
        "get": {
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "id": "directory.mobiledevices.get",
          "parameters": {
            "customerId": {
              "required": true,
              "location": "path",
              "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).",
              "type": "string"
            },
            "projection": {
              "location": "query",
              "type": "string",
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, model, status, type, and status)",
                "Includes all metadata fields"
              ],
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "description": "Restrict information returned to a set of selected fields."
            },
            "resourceId": {
              "type": "string",
              "description": "The unique ID the API service uses to identify the mobile device.",
              "required": true,
              "location": "path"
            }
          },
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.action",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.readonly"
          ],
          "response": {
            "$ref": "MobileDevice"
          },
          "description": "Retrieves a mobile device's properties.",
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}"
        }
      }
    },
    "privileges": {
      "methods": {
        "list": {
          "description": "Retrieves a paginated list of all privileges for a customer.",
          "parameterOrder": [
            "customer"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/roles/ALL/privileges",
          "id": "directory.privileges.list",
          "response": {
            "$ref": "Privileges"
          },
          "httpMethod": "GET",
          "path": "admin/directory/v1/customer/{customer}/roles/ALL/privileges",
          "parameters": {
            "customer": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Immutable ID of the G Suite account."
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ]
        }
      }
    },
    "groups": {
      "resources": {
        "aliases": {
          "methods": {
            "delete": {
              "path": "admin/directory/v1/groups/{groupKey}/aliases/{alias}",
              "flatPath": "admin/directory/v1/groups/{groupKey}/aliases/{alias}",
              "description": "Removes an alias.",
              "parameterOrder": [
                "groupKey",
                "alias"
              ],
              "httpMethod": "DELETE",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.group"
              ],
              "parameters": {
                "groupKey": {
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID."
                },
                "alias": {
                  "location": "path",
                  "type": "string",
                  "required": true,
                  "description": "The alias to be removed"
                }
              },
              "id": "directory.groups.aliases.delete"
            },
            "insert": {
              "parameterOrder": [
                "groupKey"
              ],
              "flatPath": "admin/directory/v1/groups/{groupKey}/aliases",
              "id": "directory.groups.aliases.insert",
              "path": "admin/directory/v1/groups/{groupKey}/aliases",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.group"
              ],
              "parameters": {
                "groupKey": {
                  "type": "string",
                  "location": "path",
                  "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.",
                  "required": true
                }
              },
              "response": {
                "$ref": "Alias"
              },
              "request": {
                "$ref": "Alias"
              },
              "description": "Adds an alias for the group.",
              "httpMethod": "POST"
            },
            "list": {
              "response": {
                "$ref": "Aliases"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.group",
                "https://www.googleapis.com/auth/admin.directory.group.readonly"
              ],
              "id": "directory.groups.aliases.list",
              "parameterOrder": [
                "groupKey"
              ],
              "flatPath": "admin/directory/v1/groups/{groupKey}/aliases",
              "description": "Lists all aliases for a group.",
              "httpMethod": "GET",
              "parameters": {
                "groupKey": {
                  "required": true,
                  "location": "path",
                  "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.",
                  "type": "string"
                }
              },
              "path": "admin/directory/v1/groups/{groupKey}/aliases"
            }
          }
        }
      },
      "methods": {
        "list": {
          "httpMethod": "GET",
          "description": "Retrieve all groups of a domain or of a user given a userKey (paginated)",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "id": "directory.groups.list",
          "parameters": {
            "maxResults": {
              "type": "integer",
              "description": "Maximum number of results to return. Max allowed value is 200.",
              "default": "200",
              "format": "int32",
              "minimum": "1",
              "location": "query"
            },
            "pageToken": {
              "description": "Token to specify next page in the list",
              "location": "query",
              "type": "string"
            },
            "query": {
              "type": "string",
              "location": "query",
              "description": "Query string search. Should be of the form \"\". Complete documentation is at https: //developers.google.com/admin-sdk/directory/v1/guides/search-groups"
            },
            "orderBy": {
              "description": "Column to use for sorting results",
              "location": "query",
              "type": "string",
              "enumDescriptions": [
                "",
                "Email of the group."
              ],
              "enum": [
                "orderByUndefined",
                "email"
              ]
            },
            "userKey": {
              "type": "string",
              "description": "Email or immutable ID of the user if only those groups are to be listed, the given user is a member of. If it's an ID, it should match with the ID of the user object.",
              "location": "query"
            },
            "domain": {
              "description": "The domain name. Use this field to get fields from only one domain. To return all domains for a customer account, use the `customer` query parameter instead.",
              "type": "string",
              "location": "query"
            },
            "sortOrder": {
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ],
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "type": "string",
              "location": "query",
              "description": "Whether to return results in ascending or descending order. Only of use when orderBy is also used"
            },
            "customer": {
              "description": "The unique ID for the customer's G Suite account. In case of a multi-domain account, to fetch all groups for a customer, fill this field instead of domain. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users](/admin-sdk/directory/v1/reference/users)",
              "type": "string",
              "location": "query"
            }
          },
          "path": "admin/directory/v1/groups",
          "flatPath": "admin/directory/v1/groups",
          "parameterOrder": [],
          "response": {
            "$ref": "Groups"
          }
        },
        "insert": {
          "flatPath": "admin/directory/v1/groups",
          "response": {
            "$ref": "Group"
          },
          "httpMethod": "POST",
          "parameters": {},
          "description": "Creates a group.",
          "path": "admin/directory/v1/groups",
          "id": "directory.groups.insert",
          "parameterOrder": [],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "request": {
            "$ref": "Group"
          }
        },
        "patch": {
          "parameters": {
            "groupKey": {
              "required": true,
              "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.",
              "type": "string",
              "location": "path"
            }
          },
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "httpMethod": "PATCH",
          "id": "directory.groups.patch",
          "request": {
            "$ref": "Group"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "path": "admin/directory/v1/groups/{groupKey}",
          "description": "Updates a group's properties. This method supports [patch semantics](/admin-sdk/directory/v1/guides/performance#patch).",
          "parameterOrder": [
            "groupKey"
          ],
          "response": {
            "$ref": "Group"
          }
        },
        "delete": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "parameters": {
            "groupKey": {
              "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.",
              "required": true,
              "location": "path",
              "type": "string"
            }
          },
          "path": "admin/directory/v1/groups/{groupKey}",
          "parameterOrder": [
            "groupKey"
          ],
          "description": "Deletes a group.",
          "id": "directory.groups.delete",
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "httpMethod": "DELETE"
        },
        "update": {
          "path": "admin/directory/v1/groups/{groupKey}",
          "parameterOrder": [
            "groupKey"
          ],
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "parameters": {
            "groupKey": {
              "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.",
              "type": "string",
              "required": true,
              "location": "path"
            }
          },
          "description": "Updates a group's properties.",
          "request": {
            "$ref": "Group"
          },
          "response": {
            "$ref": "Group"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "httpMethod": "PUT",
          "id": "directory.groups.update"
        },
        "get": {
          "response": {
            "$ref": "Group"
          },
          "parameters": {
            "groupKey": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID."
            }
          },
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "parameterOrder": [
            "groupKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "path": "admin/directory/v1/groups/{groupKey}",
          "description": "Retrieves a group's properties.",
          "id": "directory.groups.get",
          "httpMethod": "GET"
        }
      }
    },
    "roleAssignments": {
      "methods": {
        "insert": {
          "description": "Creates a role assignment.",
          "parameterOrder": [
            "customer"
          ],
          "request": {
            "$ref": "RoleAssignment"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "parameters": {
            "customer": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Immutable ID of the G Suite account."
            }
          },
          "httpMethod": "POST",
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments",
          "response": {
            "$ref": "RoleAssignment"
          },
          "path": "admin/directory/v1/customer/{customer}/roleassignments",
          "id": "directory.roleAssignments.insert"
        },
        "get": {
          "httpMethod": "GET",
          "path": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "response": {
            "$ref": "RoleAssignment"
          },
          "id": "directory.roleAssignments.get",
          "parameters": {
            "roleAssignmentId": {
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the role assignment.",
              "required": true
            },
            "customer": {
              "type": "string",
              "description": "Immutable ID of the G Suite account.",
              "required": true,
              "location": "path"
            }
          },
          "parameterOrder": [
            "customer",
            "roleAssignmentId"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "description": "Retrieve a role assignment.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ]
        },
        "list": {
          "response": {
            "$ref": "RoleAssignments"
          },
          "description": "Retrieves a paginated list of all roleAssignments.",
          "path": "admin/directory/v1/customer/{customer}/roleassignments",
          "parameters": {
            "roleId": {
              "description": "Immutable ID of a role. If included in the request, returns only role assignments containing this role ID.",
              "location": "query",
              "type": "string"
            },
            "customer": {
              "required": true,
              "description": "Immutable ID of the G Suite account.",
              "location": "path",
              "type": "string"
            },
            "pageToken": {
              "location": "query",
              "description": "Token to specify the next page in the list.",
              "type": "string"
            },
            "maxResults": {
              "description": "Maximum number of results to return.",
              "type": "integer",
              "maximum": "200",
              "minimum": "1",
              "format": "int32",
              "location": "query"
            },
            "userKey": {
              "type": "string",
              "location": "query",
              "description": "The user's primary email address, alias email address, or unique user ID. If included in the request, returns role assignments only for this user."
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "parameterOrder": [
            "customer"
          ],
          "httpMethod": "GET",
          "id": "directory.roleAssignments.list",
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments"
        },
        "delete": {
          "httpMethod": "DELETE",
          "parameterOrder": [
            "customer",
            "roleAssignmentId"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "parameters": {
            "customer": {
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account.",
              "required": true
            },
            "roleAssignmentId": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Immutable ID of the role assignment."
            }
          },
          "path": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "description": "Deletes a role assignment.",
          "id": "directory.roleAssignments.delete"
        }
      }
    },
    "orgunits": {
      "methods": {
        "get": {
          "httpMethod": "GET",
          "description": "Retrieves an organizational unit.",
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "response": {
            "$ref": "OrgUnit"
          },
          "id": "directory.orgunits.get",
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit",
            "https://www.googleapis.com/auth/admin.directory.orgunit.readonly"
          ],
          "parameters": {
            "orgUnitPath": {
              "location": "path",
              "pattern": "^.*$",
              "description": "The full path of the organizational unit or its unique ID.",
              "type": "string",
              "required": true
            },
            "customerId": {
              "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).",
              "type": "string",
              "location": "path",
              "required": true
            }
          }
        },
        "delete": {
          "parameters": {
            "orgUnitPath": {
              "required": true,
              "description": "The full path of the organizational unit or its unique ID.",
              "location": "path",
              "type": "string",
              "pattern": "^.*$"
            },
            "customerId": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users)."
            }
          },
          "httpMethod": "DELETE",
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "description": "Removes an organizational unit.",
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "id": "directory.orgunits.delete"
        },
        "update": {
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "request": {
            "$ref": "OrgUnit"
          },
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "response": {
            "$ref": "OrgUnit"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "httpMethod": "PUT",
          "description": "Updates an organizational unit.",
          "parameters": {
            "orgUnitPath": {
              "required": true,
              "location": "path",
              "pattern": "^.*$",
              "type": "string",
              "description": "The full path of the organizational unit or its unique ID."
            },
            "customerId": {
              "location": "path",
              "required": true,
              "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).",
              "type": "string"
            }
          },
          "id": "directory.orgunits.update",
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}"
        },
        "list": {
          "response": {
            "$ref": "OrgUnits"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit",
            "https://www.googleapis.com/auth/admin.directory.orgunit.readonly"
          ],
          "parameterOrder": [
            "customerId"
          ],
          "id": "directory.orgunits.list",
          "httpMethod": "GET",
          "path": "admin/directory/v1/customer/{customerId}/orgunits",
          "description": "Retrieves a list of all organizational units for an account.",
          "parameters": {
            "customerId": {
              "type": "string",
              "required": true,
              "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).",
              "location": "path"
            },
            "type": {
              "location": "query",
              "enumDescriptions": [
                "",
                "All sub-organizational units.",
                "Immediate children only (default)."
              ],
              "description": "Whether to return all sub-organizations or just immediate children.",
              "enum": [
                "typeUndefined",
                "all",
                "children"
              ],
              "type": "string"
            },
            "orgUnitPath": {
              "type": "string",
              "default": "",
              "location": "query",
              "description": "The full path to the organizational unit or its unique ID. Returns the children of the specified organizational unit."
            }
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits"
        },
        "insert": {
          "path": "admin/directory/v1/customer/{customerId}/orgunits",
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "id": "directory.orgunits.insert",
          "httpMethod": "POST",
          "description": "Adds an organizational unit.",
          "response": {
            "$ref": "OrgUnit"
          },
          "parameters": {
            "customerId": {
              "location": "path",
              "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).",
              "type": "string",
              "required": true
            }
          },
          "parameterOrder": [
            "customerId"
          ],
          "request": {
            "$ref": "OrgUnit"
          }
        },
        "patch": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "request": {
            "$ref": "OrgUnit"
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "description": "Updates an organizational unit. This method supports [patch semantics](/admin-sdk/directory/v1/guides/performance#patch)",
          "httpMethod": "PATCH",
          "parameters": {
            "orgUnitPath": {
              "type": "string",
              "required": true,
              "location": "path",
              "pattern": "^.*$",
              "description": "The full path of the organizational unit or its unique ID."
            },
            "customerId": {
              "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).",
              "type": "string",
              "required": true,
              "location": "path"
            }
          },
          "response": {
            "$ref": "OrgUnit"
          },
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "id": "directory.orgunits.patch",
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}"
        }
      }
    },
    "domainAliases": {
      "methods": {
        "insert": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "request": {
            "$ref": "DomainAlias"
          },
          "response": {
            "$ref": "DomainAlias"
          },
          "description": "Inserts a domain alias of the customer.",
          "httpMethod": "POST",
          "parameters": {
            "customer": {
              "type": "string",
              "required": true,
              "description": "Immutable ID of the G Suite account.",
              "location": "path"
            }
          },
          "id": "directory.domainAliases.insert",
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases",
          "parameterOrder": [
            "customer"
          ],
          "path": "admin/directory/v1/customer/{customer}/domainaliases"
        },
        "list": {
          "httpMethod": "GET",
          "path": "admin/directory/v1/customer/{customer}/domainaliases",
          "description": "Lists the domain aliases of the customer.",
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "id": "directory.domainAliases.list",
          "parameters": {
            "parentDomainName": {
              "description": "Name of the parent domain for which domain aliases are to be fetched.",
              "type": "string",
              "location": "query"
            },
            "customer": {
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account.",
              "required": true
            }
          },
          "parameterOrder": [
            "customer"
          ],
          "response": {
            "$ref": "DomainAliases"
          }
        },
        "delete": {
          "id": "directory.domainAliases.delete",
          "description": "Deletes a domain Alias of the customer.",
          "parameterOrder": [
            "customer",
            "domainAliasName"
          ],
          "parameters": {
            "domainAliasName": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Name of domain alias to be retrieved."
            },
            "customer": {
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account.",
              "required": true
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "path": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "httpMethod": "DELETE"
        },
        "get": {
          "description": "Retrieves a domain alias of the customer.",
          "id": "directory.domainAliases.get",
          "parameters": {
            "customer": {
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account.",
              "required": true
            },
            "domainAliasName": {
              "required": true,
              "description": "Name of domain alias to be retrieved.",
              "location": "path",
              "type": "string"
            }
          },
          "parameterOrder": [
            "customer",
            "domainAliasName"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "httpMethod": "GET",
          "response": {
            "$ref": "DomainAlias"
          },
          "path": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ]
        }
      }
    },
    "tokens": {
      "methods": {
        "get": {
          "parameterOrder": [
            "userKey",
            "clientId"
          ],
          "description": "Get information about an access token issued by a user.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "path": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "httpMethod": "GET",
          "id": "directory.tokens.get",
          "flatPath": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "response": {
            "$ref": "Token"
          },
          "parameters": {
            "userKey": {
              "type": "string",
              "location": "path",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "required": true
            },
            "clientId": {
              "description": "The Client ID of the application the token is issued to.",
              "type": "string",
              "location": "path",
              "required": true
            }
          }
        },
        "delete": {
          "parameterOrder": [
            "userKey",
            "clientId"
          ],
          "httpMethod": "DELETE",
          "path": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "description": "Delete all access tokens issued by a user for an application.",
          "id": "directory.tokens.delete",
          "parameters": {
            "userKey": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID."
            },
            "clientId": {
              "type": "string",
              "description": "The Client ID of the application the token is issued to.",
              "required": true,
              "location": "path"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}/tokens/{clientId}"
        },
        "list": {
          "id": "directory.tokens.list",
          "path": "admin/directory/v1/users/{userKey}/tokens",
          "httpMethod": "GET",
          "response": {
            "$ref": "Tokens"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "parameters": {
            "userKey": {
              "type": "string",
              "required": true,
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "location": "path"
            }
          },
          "parameterOrder": [
            "userKey"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}/tokens",
          "description": "Returns the set of tokens specified user has issued to 3rd party applications."
        }
      }
    },
    "channels": {
      "methods": {
        "stop": {
          "flatPath": "admin/directory_v1/channels/stop",
          "parameters": {},
          "description": "Stop watching resources through this channel.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.alias",
            "https://www.googleapis.com/auth/admin.directory.user.alias.readonly",
            "https://www.googleapis.com/auth/admin.directory.user.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "request": {
            "$ref": "Channel"
          },
          "parameterOrder": [],
          "path": "admin/directory_v1/channels/stop",
          "httpMethod": "POST",
          "id": "admin.channels.stop"
        }
      }
    },
    "chromeosdevices": {
      "methods": {
        "list": {
          "parameters": {
            "projection": {
              "location": "query",
              "type": "string",
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ],
              "description": "Restrict information returned to a set of selected fields.",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ]
            },
            "orgUnitPath": {
              "location": "query",
              "description": "The full path of the organizational unit or its unique ID.",
              "type": "string"
            },
            "pageToken": {
              "type": "string",
              "location": "query",
              "description": "The `pageToken` query parameter is used to request the next page of query results. The follow-on request's `pageToken` query parameter is the `nextPageToken` from your previous response."
            },
            "customerId": {
              "location": "path",
              "required": true,
              "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).",
              "type": "string"
            },
            "query": {
              "location": "query",
              "description": "Search string in the format given at http://support.google.com/chromeos/a/bin/answer.py?answer=1698333",
              "type": "string"
            },
            "sortOrder": {
              "type": "string",
              "location": "query",
              "description": "Whether to return results in ascending or descending order. Must be used with the `orderBy` parameter.",
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ],
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ]
            },
            "maxResults": {
              "minimum": "1",
              "location": "query",
              "format": "int32",
              "description": "Maximum number of results to return.",
              "type": "integer",
              "default": "100"
            },
            "orderBy": {
              "enum": [
                "orderByUndefined",
                "annotatedLocation",
                "annotatedUser",
                "lastSync",
                "notes",
                "serialNumber",
                "status",
                "supportEndDate"
              ],
              "location": "query",
              "enumDescriptions": [
                "",
                "Chrome device location as annotated by the administrator.",
                "Chromebook user as annotated by administrator.",
                "The date and time the Chrome device was last synchronized with the policy settings in the Admin console.",
                "Chrome device notes as annotated by the administrator.",
                "The Chrome device serial number entered when the device was enabled.",
                "Chrome device status. For more information, see the \u003ca [chromeosdevices](/admin-sdk/directory/v1/reference/chromeosdevices.html).",
                "Chrome device support end date. This is applicable only for devices purchased directly from Google."
              ],
              "description": "Device property to use for sorting results.",
              "type": "string"
            }
          },
          "description": "Retrieves a paginated list of Chrome OS devices within an account.",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos",
          "parameterOrder": [
            "customerId"
          ],
          "response": {
            "$ref": "ChromeOsDevices"
          },
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos",
            "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly"
          ],
          "httpMethod": "GET",
          "id": "directory.chromeosdevices.list"
        },
        "moveDevicesToOu": {
          "request": {
            "$ref": "ChromeOsMoveDevicesToOu"
          },
          "id": "directory.chromeosdevices.moveDevicesToOu",
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "parameters": {
            "orgUnitPath": {
              "required": true,
              "location": "query",
              "type": "string",
              "description": "Full path of the target organizational unit or its ID"
            },
            "customerId": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Immutable ID of the G Suite account"
            }
          },
          "description": "Move or insert multiple Chrome OS devices to an organizational unit. You can move up to 50 devices at once.",
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/moveDevicesToOu",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/moveDevicesToOu",
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ]
        },
        "update": {
          "parameters": {
            "projection": {
              "type": "string",
              "description": "Restrict information returned to a set of selected fields.",
              "location": "query",
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ],
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ]
            },
            "customerId": {
              "location": "path",
              "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).",
              "required": true,
              "type": "string"
            },
            "deviceId": {
              "required": true,
              "description": "The unique ID of the device. The `deviceId`s are returned in the response from the [chromeosdevices.list](/admin-sdk/v1/reference/chromeosdevices/list) method.",
              "location": "path",
              "type": "string"
            }
          },
          "response": {
            "$ref": "ChromeOsDevice"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "id": "directory.chromeosdevices.update",
          "parameterOrder": [
            "customerId",
            "deviceId"
          ],
          "httpMethod": "PUT",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "description": "Updates a device's updatable properties, such as `annotatedUser`, `annotatedLocation`, `notes`, `orgUnitPath`, or `annotatedAssetId`.",
          "request": {
            "$ref": "ChromeOsDevice"
          }
        },
        "action": {
          "request": {
            "$ref": "ChromeOsDeviceAction"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "id": "directory.chromeosdevices.action",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{resourceId}/action",
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "parameters": {
            "resourceId": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "The unique ID of the device. The `resourceId`s are returned in the response from the [chromeosdevices.list](/admin-sdk/directory/v1/reference/chromeosdevices/list) method."
            },
            "customerId": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users)."
            }
          },
          "httpMethod": "POST",
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{resourceId}/action",
          "description": "Takes an action that affects a Chrome OS Device. This includes deprovisioning, disabling, and re-enabling devices. *Warning:* * Deprovisioning a device will stop device policy syncing and remove device-level printers. After a device is deprovisioned, it must be wiped before it can be re-enrolled. * Lost or stolen devices should use the disable action. * Re-enabling a disabled device will consume a device license. If you do not have sufficient licenses available when completing the re-enable action, you will receive an error. For more information about deprovisioning and disabling devices, visit the [help center](https://support.google.com/chrome/a/answer/3523633)."
        },
        "patch": {
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "httpMethod": "PATCH",
          "id": "directory.chromeosdevices.patch",
          "parameterOrder": [
            "customerId",
            "deviceId"
          ],
          "parameters": {
            "projection": {
              "description": "Restrict information returned to a set of selected fields.",
              "location": "query",
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ],
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "type": "string"
            },
            "customerId": {
              "required": true,
              "type": "string",
              "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).",
              "location": "path"
            },
            "deviceId": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "The unique ID of the device. The `deviceId`s are returned in the response from the [chromeosdevices.list](/admin-sdk/v1/reference/chromeosdevices/list) method."
            }
          },
          "request": {
            "$ref": "ChromeOsDevice"
          },
          "description": "Updates a device's updatable properties, such as `annotatedUser`, `annotatedLocation`, `notes`, `orgUnitPath`, or `annotatedAssetId`. This method supports [patch semantics](/admin-sdk/directory/v1/guides/performance#patch).",
          "response": {
            "$ref": "ChromeOsDevice"
          },
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}"
        },
        "get": {
          "parameters": {
            "deviceId": {
              "description": "The unique ID of the device. The `deviceId`s are returned in the response from the [chromeosdevices.list](/admin-sdk/directory/v1/reference/chromeosdevices/list) method.",
              "required": true,
              "location": "path",
              "type": "string"
            },
            "customerId": {
              "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).",
              "type": "string",
              "location": "path",
              "required": true
            },
            "projection": {
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "type": "string",
              "location": "query",
              "description": "Determines whether the response contains the full list of properties or only a subset.",
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ]
            }
          },
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "id": "directory.chromeosdevices.get",
          "parameterOrder": [
            "customerId",
            "deviceId"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos",
            "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly"
          ],
          "description": "Retrieves a Chrome OS device's properties.",
          "response": {
            "$ref": "ChromeOsDevice"
          },
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}"
        }
      }
    }
  },
  "baseUrl": "https://admin.googleapis.com/",
  "kind": "discovery#restDescription",
  "batchPath": "batch",
  "revision": "20201215",
  "rootUrl": "https://admin.googleapis.com/",
  "mtlsRootUrl": "https://admin.mtls.googleapis.com/",
  "servicePath": "",
  "basePath": ""
}
