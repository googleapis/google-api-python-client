{
  "title": "Admin SDK API",
  "packagePath": "admin",
  "schemas": {
    "UserAbout": {
      "type": "object",
      "id": "UserAbout",
      "description": "JSON template for About (notes) of a user in Directory API.",
      "properties": {
        "contentType": {
          "description": "About entry can have a type which indicates the content type. It can either be plain or html. By default, notes contents are assumed to contain plain text.",
          "type": "string"
        },
        "value": {
          "type": "string",
          "description": "Actual value of notes."
        }
      }
    },
    "Domains2": {
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "domains": {
          "description": "List of domain objects.",
          "type": "array",
          "items": {
            "$ref": "Domains"
          }
        },
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#domains",
          "type": "string"
        }
      },
      "type": "object",
      "id": "Domains2"
    },
    "UserUndelete": {
      "id": "UserUndelete",
      "properties": {
        "orgUnitPath": {
          "type": "string",
          "description": "OrgUnit of User"
        }
      },
      "type": "object"
    },
    "Schema": {
      "properties": {
        "etag": {
          "description": "The ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#schema",
          "description": "Kind of resource this is.",
          "type": "string"
        },
        "schemaName": {
          "description": "The schema's name.",
          "annotations": {
            "required": [
              "directory.schemas.insert"
            ]
          },
          "type": "string"
        },
        "displayName": {
          "description": "Display name for the schema.",
          "annotations": {
            "required": [
              "directory.schemas.insert"
            ]
          },
          "type": "string"
        },
        "schemaId": {
          "type": "string",
          "description": "The unique identifier of the schema (Read-only)"
        },
        "fields": {
          "type": "array",
          "items": {
            "$ref": "SchemaFieldSpec"
          },
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          },
          "description": "A list of fields in the schema."
        }
      },
      "description": "The type of API resource. For Schema resources, this is always `admin#directory#schema`.",
      "type": "object",
      "id": "Schema"
    },
    "CalendarResources": {
      "id": "CalendarResources",
      "description": "Public API: Resources.calendars",
      "type": "object",
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "nextPageToken": {
          "type": "string",
          "description": "The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results."
        },
        "items": {
          "type": "array",
          "description": "The CalendarResources in this page of results.",
          "items": {
            "$ref": "CalendarResource"
          }
        },
        "kind": {
          "default": "admin#directory#resources#calendars#calendarResourcesList",
          "type": "string",
          "description": "Identifies this as a collection of CalendarResources. This is always `admin#directory#resources#calendars#calendarResourcesList`."
        }
      }
    },
    "VerificationCode": {
      "properties": {
        "kind": {
          "default": "admin#directory#verificationCode",
          "description": "The type of the resource. This is always `admin#directory#verificationCode`.",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "userId": {
          "description": "The obfuscated unique ID of the user.",
          "type": "string"
        },
        "verificationCode": {
          "description": "A current verification code for the user. Invalidated or used verification codes are not returned as part of the result.",
          "type": "string"
        }
      },
      "description": "The Directory API allows you to view, generate, and invalidate backup verification codes for a user.",
      "type": "object",
      "id": "VerificationCode"
    },
    "ChromeOsMoveDevicesToOu": {
      "properties": {
        "deviceIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "annotations": {
            "required": [
              "directory.chromeosdevices.moveDevicesToOu"
            ]
          },
          "description": "Chrome OS devices to be moved to OU"
        }
      },
      "id": "ChromeOsMoveDevicesToOu",
      "type": "object"
    },
    "UserPosixAccount": {
      "type": "object",
      "description": "JSON template for a POSIX account entry.",
      "id": "UserPosixAccount",
      "properties": {
        "accountId": {
          "description": "A POSIX account field identifier.",
          "type": "string"
        },
        "systemId": {
          "description": "System identifier for which account Username or Uid apply to.",
          "type": "string"
        },
        "gecos": {
          "description": "The GECOS (user information) for this account.",
          "type": "string"
        },
        "uid": {
          "type": "string",
          "description": "The POSIX compliant user ID.",
          "format": "uint64"
        },
        "homeDirectory": {
          "description": "The path to the home directory for this account.",
          "type": "string"
        },
        "operatingSystemType": {
          "type": "string",
          "description": "The operating system type for this account."
        },
        "gid": {
          "type": "string",
          "description": "The default group ID.",
          "format": "uint64"
        },
        "shell": {
          "description": "The path to the login shell for this account.",
          "type": "string"
        },
        "username": {
          "type": "string",
          "description": "The username of the account."
        },
        "primary": {
          "description": "If this is user's primary account within the SystemId.",
          "type": "boolean"
        }
      }
    },
    "CustomerPostalAddress": {
      "type": "object",
      "id": "CustomerPostalAddress",
      "properties": {
        "postalCode": {
          "description": "The postal code. A postalCode example is a postal zip code such as `10009`. This is in accordance with - http: //portablecontacts.net/draft-spec.html#address_element.",
          "type": "string"
        },
        "countryCode": {
          "description": "This is a required property. For `countryCode` information see the [ISO 3166 country code elements](http://www.iso.org/iso/country_codes.htm).",
          "type": "string"
        },
        "addressLine2": {
          "type": "string",
          "description": "Address line 2 of the address."
        },
        "organizationName": {
          "description": "The company or company division name.",
          "type": "string"
        },
        "region": {
          "description": "Name of the region. An example of a region value is `NY` for the state of New York.",
          "type": "string"
        },
        "addressLine1": {
          "type": "string",
          "description": "A customer's physical address. The address can be composed of one to three lines."
        },
        "addressLine3": {
          "type": "string",
          "description": "Address line 3 of the address."
        },
        "contactName": {
          "description": "The customer contact's name.",
          "type": "string"
        },
        "locality": {
          "type": "string",
          "description": "Name of the locality. An example of a locality value is the city of `San Francisco`."
        }
      }
    },
    "RoleAssignments": {
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "items": {
          "type": "array",
          "description": "A list of RoleAssignment resources.",
          "items": {
            "$ref": "RoleAssignment"
          }
        },
        "kind": {
          "type": "string",
          "description": "The type of the API resource. This is always `admin#directory#roleAssignments`.",
          "default": "admin#directory#roleAssignments"
        },
        "nextPageToken": {
          "type": "string"
        }
      },
      "id": "RoleAssignments",
      "type": "object"
    },
    "UserPhone": {
      "description": "JSON template for a phone entry.",
      "id": "UserPhone",
      "type": "object",
      "properties": {
        "customType": {
          "description": "Custom Type.",
          "type": "string"
        },
        "value": {
          "description": "Phone number.",
          "type": "string"
        },
        "primary": {
          "type": "boolean",
          "description": "If this is user's primary phone or not."
        },
        "type": {
          "description": "Each entry can have a type which indicates standard types of that entry. For example phone could be of home_fax work mobile etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        }
      }
    },
    "Channel": {
      "type": "object",
      "description": "An notification channel used to watch for resource changes.",
      "properties": {
        "expiration": {
          "description": "Date and time of notification channel expiration, expressed as a Unix timestamp, in milliseconds. Optional.",
          "format": "int64",
          "type": "string"
        },
        "id": {
          "type": "string",
          "description": "A UUID or similar unique string that identifies this channel."
        },
        "resourceUri": {
          "type": "string",
          "description": "A version-specific identifier for the watched resource."
        },
        "token": {
          "description": "An arbitrary string delivered to the target address with each notification delivered over this channel. Optional.",
          "type": "string"
        },
        "type": {
          "description": "The type of delivery mechanism used for this channel.",
          "type": "string"
        },
        "address": {
          "type": "string",
          "description": "The address where notifications are delivered for this channel."
        },
        "payload": {
          "description": "A Boolean value to indicate whether payload is wanted. Optional.",
          "type": "boolean"
        },
        "resourceId": {
          "type": "string",
          "description": "An opaque ID that identifies the resource being watched on this channel. Stable across different API versions."
        },
        "params": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Additional parameters controlling delivery channel behavior. Optional."
        },
        "kind": {
          "description": "Identifies this as a notification channel used to watch for changes to a resource, which is `api#channel`.",
          "type": "string",
          "default": "api#channel"
        }
      },
      "id": "Channel"
    },
    "Tokens": {
      "id": "Tokens",
      "description": "JSON response template for List tokens operation in Directory API.",
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "description": "The type of the API resource. This is always `admin#directory#tokenList`.",
          "default": "admin#directory#tokenList",
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "Token"
          },
          "type": "array",
          "description": "A list of Token resources."
        }
      },
      "type": "object"
    },
    "FeatureRename": {
      "id": "FeatureRename",
      "type": "object",
      "properties": {
        "newName": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.resources.features.rename"
            ]
          },
          "description": "New name of the feature."
        }
      }
    },
    "Roles": {
      "type": "object",
      "properties": {
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "Role"
          },
          "type": "array",
          "description": "A list of Role resources."
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#roles",
          "description": "The type of the API resource. This is always `admin#directory#roles`."
        },
        "nextPageToken": {
          "type": "string"
        }
      },
      "id": "Roles"
    },
    "UserPhoto": {
      "id": "UserPhoto",
      "type": "object",
      "properties": {
        "primaryEmail": {
          "description": "The user's primary email address.",
          "type": "string"
        },
        "id": {
          "type": "string",
          "description": "The ID the API uses to uniquely identify the user."
        },
        "width": {
          "description": "Width of the photo in pixels.",
          "format": "int32",
          "type": "integer"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "height": {
          "description": "Height of the photo in pixels.",
          "type": "integer",
          "format": "int32"
        },
        "kind": {
          "type": "string",
          "description": "The type of the API resource. For Photo resources, this is `admin#directory#user#photo`.",
          "default": "admin#directory#user#photo"
        },
        "photoData": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.users.photos.update"
            ]
          },
          "description": "The user photo's upload data in [web-safe Base64](https://code.google.com/p/stringencoders/wiki/WebSafeBase64) format in bytes. This means: * The slash (/) character is replaced with the underscore (_) character. * The plus sign (+) character is replaced with the hyphen (-) character. * The equals sign (=) character is replaced with the asterisk (*). * For padding, the period (.) character is used instead of the RFC-4648 baseURL definition which uses the equals sign (=) for padding. This is done to simplify URL-parsing. * Whatever the size of the photo being uploaded, the API downsizes it to 96x96 pixels.",
          "format": "byte"
        },
        "mimeType": {
          "type": "string",
          "description": "The MIME type of the photo. Allowed values are `JPEG`, `PNG`, `GIF`, `BMP`, `TIFF`, and web-safe base64 encoding."
        }
      }
    },
    "Buildings": {
      "type": "object",
      "description": "Public API: Resources.buildings",
      "properties": {
        "buildings": {
          "type": "array",
          "items": {
            "$ref": "Building"
          },
          "description": "The Buildings in this page of results."
        },
        "nextPageToken": {
          "type": "string",
          "description": "The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results."
        },
        "kind": {
          "default": "admin#directory#resources#buildings#buildingsList",
          "description": "Kind of resource this is.",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      },
      "id": "Buildings"
    },
    "MembersHasMember": {
      "properties": {
        "isMember": {
          "readOnly": true,
          "description": "Output only. Identifies whether the given user is a member of the group. Membership can be direct or nested.",
          "type": "boolean"
        }
      },
      "type": "object",
      "description": "JSON template for Has Member response in Directory API.",
      "id": "MembersHasMember"
    },
    "UserName": {
      "properties": {
        "givenName": {
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          },
          "type": "string",
          "description": "The user's first name. Required when creating a user account."
        },
        "fullName": {
          "description": "The user's full name formed by concatenating the first and last name values.",
          "type": "string"
        },
        "familyName": {
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          },
          "type": "string",
          "description": "The user's last name. Required when creating a user account."
        }
      },
      "id": "UserName",
      "type": "object"
    },
    "UserGender": {
      "properties": {
        "customGender": {
          "type": "string",
          "description": "Custom gender."
        },
        "type": {
          "description": "Gender.",
          "type": "string"
        },
        "addressMeAs": {
          "type": "string",
          "description": "AddressMeAs. A human-readable string containing the proper way to refer to the profile owner by humans for example he/him/his or they/them/their."
        }
      },
      "type": "object",
      "id": "UserGender"
    },
    "Building": {
      "description": "Public API: Resources.buildings",
      "properties": {
        "coordinates": {
          "description": "The geographic coordinates of the center of the building, expressed as latitude and longitude in decimal degrees.",
          "$ref": "BuildingCoordinates"
        },
        "description": {
          "type": "string",
          "description": "A brief description of the building. For example, \"Chelsea Market\"."
        },
        "buildingId": {
          "description": "Unique identifier for the building. The maximum length is 100 characters.",
          "type": "string"
        },
        "address": {
          "$ref": "BuildingAddress",
          "description": "The postal address of the building. See [`PostalAddress`](/my-business/reference/rest/v4/PostalAddress) for details. Note that only a single address line and region code are required."
        },
        "etags": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "floorNames": {
          "description": "The display names for all floors in this building. The floors are expected to be sorted in ascending order, from lowest floor to highest floor. For example, [\"B2\", \"B1\", \"L\", \"1\", \"2\", \"2M\", \"3\", \"PH\"] Must contain at least one entry.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "kind": {
          "default": "admin#directory#resources#buildings#Building",
          "type": "string",
          "description": "Kind of resource this is."
        },
        "buildingName": {
          "description": "The building name as seen by users in Calendar. Must be unique for the customer. For example, \"NYC-CHEL\". The maximum length is 100 characters.",
          "type": "string"
        }
      },
      "id": "Building",
      "type": "object"
    },
    "UserIm": {
      "id": "UserIm",
      "description": "JSON template for instant messenger of an user.",
      "properties": {
        "customType": {
          "type": "string",
          "description": "Custom type."
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard types of that entry. For example instant messengers could be of home work etc. In addition to the standard type an entry can have a custom type and can take any value. Such types should have the CUSTOM value as type and also have a customType value."
        },
        "primary": {
          "description": "If this is user's primary im. Only one entry could be marked as primary.",
          "type": "boolean"
        },
        "im": {
          "type": "string",
          "description": "Instant messenger id."
        },
        "customProtocol": {
          "description": "Custom protocol.",
          "type": "string"
        },
        "protocol": {
          "description": "Protocol used in the instant messenger. It should be one of the values from ImProtocolTypes map. Similar to type it can take a CUSTOM value and specify the custom name in customProtocol field.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Groups": {
      "properties": {
        "kind": {
          "type": "string",
          "description": "Kind of resource this is.",
          "default": "admin#directory#groups"
        },
        "nextPageToken": {
          "description": "Token used to access next page of this result.",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "groups": {
          "type": "array",
          "items": {
            "$ref": "Group"
          },
          "description": "List of group objects."
        }
      },
      "type": "object",
      "id": "Groups"
    },
    "ChromeOsDevice": {
      "properties": {
        "kind": {
          "default": "admin#directory#chromeosdevice",
          "description": "The type of resource. For the Chromeosdevices resource, the value is `admin#directory#chromeosdevice`.",
          "type": "string"
        },
        "deviceFiles": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "File name"
              },
              "createTime": {
                "description": "Date and time the file was created",
                "format": "date-time",
                "type": "string"
              },
              "downloadUrl": {
                "description": "File download URL",
                "type": "string"
              },
              "type": {
                "description": "File type",
                "type": "string"
              }
            }
          },
          "description": "List of device files to download (Read-only)"
        },
        "annotatedLocation": {
          "description": "The address or location of the device as noted by the administrator. Maximum length is `200` characters. Empty values are allowed.",
          "type": "string"
        },
        "supportEndDate": {
          "type": "string",
          "description": "Final date the device will be supported (Read-only)",
          "format": "date-time"
        },
        "orderNumber": {
          "description": "The device's order number. Only devices directly purchased from Google have an order number.",
          "type": "string"
        },
        "ethernetMacAddress": {
          "description": "The device's MAC address on the ethernet network interface.",
          "type": "string"
        },
        "autoUpdateExpiration": {
          "type": "string",
          "format": "int64",
          "description": "(Read-only) The timestamp after which the device will stop receiving Chrome updates or support"
        },
        "macAddress": {
          "type": "string",
          "description": "The device's wireless MAC address. If the device does not have this information, it is not included in the response."
        },
        "model": {
          "type": "string",
          "description": "The device's model information. If the device does not have this information, this property is not included in the response."
        },
        "recentUsers": {
          "type": "array",
          "items": {
            "$ref": "RecentUsers"
          },
          "description": "List of recent device users, in descending order, by last login time."
        },
        "lastKnownNetwork": {
          "description": "Contains last known network (Read-only)",
          "type": "array",
          "items": {
            "properties": {
              "wanIpAddress": {
                "description": "The WAN IP address.",
                "type": "string"
              },
              "ipAddress": {
                "type": "string",
                "description": "The IP address."
              }
            },
            "description": "Information for an ip address.",
            "type": "object"
          }
        },
        "tpmVersionInfo": {
          "description": "Trusted Platform Module (TPM) (Read-only)",
          "type": "object",
          "properties": {
            "tpmModel": {
              "description": "TPM model number.",
              "type": "string"
            },
            "specLevel": {
              "description": "TPM specification level. See Library Specification for TPM 2.0 and Main Specification for TPM 1.2.",
              "type": "string"
            },
            "manufacturer": {
              "type": "string",
              "description": "TPM manufacturer code."
            },
            "firmwareVersion": {
              "type": "string",
              "description": "TPM firmware version."
            },
            "family": {
              "type": "string",
              "description": "TPM family. We use the TPM 2.0 style encoding, e.g.: TPM 1.2: \"1.2\" -\u003e 312e3200 TPM 2.0: \"2.0\" -\u003e 322e3000"
            },
            "vendorSpecific": {
              "description": "Vendor-specific information such as Vendor ID.",
              "type": "string"
            }
          }
        },
        "status": {
          "description": "The status of the device.",
          "type": "string"
        },
        "annotatedAssetId": {
          "type": "string",
          "description": "The asset identifier as noted by an administrator or specified during enrollment."
        },
        "systemRamFreeReports": {
          "items": {
            "properties": {
              "systemRamFreeInfo": {
                "type": "array",
                "items": {
                  "format": "int64",
                  "type": "string"
                }
              },
              "reportTime": {
                "format": "date-time",
                "description": "Date and time the report was received.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": "array",
          "description": "Reports of amounts of available RAM memory (Read-only)"
        },
        "ethernetMacAddress0": {
          "type": "string",
          "description": "(Read-only) MAC address used by the Chromebook’s internal ethernet port, and for onboard network (ethernet) interface. The format is twelve (12) hexadecimal digits without any delimiter (uppercase letters). This is only relevant for some devices."
        },
        "cpuStatusReports": {
          "description": "Reports of CPU utilization and temperature (Read-only)",
          "items": {
            "properties": {
              "cpuUtilizationPercentageInfo": {
                "items": {
                  "type": "integer",
                  "format": "int32"
                },
                "type": "array"
              },
              "reportTime": {
                "type": "string",
                "format": "date-time",
                "description": "Date and time the report was received."
              },
              "cpuTemperatureInfo": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "temperature": {
                      "format": "int32",
                      "description": "Temperature in Celsius degrees.",
                      "type": "integer"
                    },
                    "label": {
                      "description": "CPU label",
                      "type": "string"
                    }
                  }
                },
                "description": "List of CPU temperature samples."
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "annotatedUser": {
          "type": "string",
          "description": "The user of the device as noted by the administrator. Maximum length is 100 characters. Empty values are allowed."
        },
        "osVersion": {
          "type": "string",
          "description": "The Chrome device's operating system version."
        },
        "activeTimeRanges": {
          "items": {
            "properties": {
              "date": {
                "format": "date",
                "type": "string",
                "description": "Date of usage"
              },
              "activeTime": {
                "type": "integer",
                "description": "Duration of usage in milliseconds.",
                "format": "int32"
              }
            },
            "type": "object"
          },
          "type": "array",
          "description": "List of active time ranges (Read-only)."
        },
        "notes": {
          "type": "string",
          "description": "Notes about this device added by the administrator. This property can be [searched](http://support.google.com/chromeos/a/bin/answer.py?answer=1698333) with the [list](/admin-sdk/directory/v1/reference/chromeosdevices/list) method's `query` parameter. Maximum length is 500 characters. Empty values are allowed."
        },
        "lastSync": {
          "description": "Date and time the device was last synchronized with the policy settings in the G Suite administrator control panel (Read-only)",
          "type": "string",
          "format": "date-time"
        },
        "dockMacAddress": {
          "description": "(Read-only) Built-in MAC address for the docking station that the device connected to. Factory sets Media access control address (MAC address) assigned for use by a dock. It is reserved specifically for MAC pass through device policy. The format is twelve (12) hexadecimal digits without any delimiter (uppercase letters). This is only relevant for some devices.",
          "type": "string"
        },
        "bootMode": {
          "description": "The boot mode for the device. The possible values are: * `Verified`: The device is running a valid version of the Chrome OS. * `Dev`: The devices's developer hardware switch is enabled. When booted, the device has a command line shell. For an example of a developer switch, see the [Chromebook developer information](http://www.chromium.org/chromium-os/developer-information-for-chrome-os-devices/samsung-series-5-chromebook#TOC-Developer-switch).",
          "type": "string"
        },
        "lastEnrollmentTime": {
          "format": "date-time",
          "description": "Date and time the device was last enrolled (Read-only)",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "systemRamTotal": {
          "description": "Total RAM on the device [in bytes] (Read-only)",
          "type": "string",
          "format": "int64"
        },
        "meid": {
          "type": "string",
          "description": "The Mobile Equipment Identifier (MEID) or the International Mobile Equipment Identity (IMEI) for the 3G mobile card in a mobile device. A MEID/IMEI is typically used when adding a device to a wireless carrier's post-pay service plan. If the device does not have this information, this property is not included in the response. For more information on how to export a MEID/IMEI list, see the [Developer's Guide](/admin-sdk/directory/v1/guides/manage-chrome-devices.html#export_meid)."
        },
        "diskVolumeReports": {
          "items": {
            "type": "object",
            "properties": {
              "volumeInfo": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "storageFree": {
                      "description": "Free disk space [in bytes]",
                      "format": "int64",
                      "type": "string"
                    },
                    "volumeId": {
                      "type": "string",
                      "description": "Volume id"
                    },
                    "storageTotal": {
                      "type": "string",
                      "format": "int64",
                      "description": "Total disk space [in bytes]"
                    }
                  }
                },
                "description": "Disk volumes"
              }
            }
          },
          "type": "array",
          "description": "Reports of disk space and other info about mounted/connected volumes."
        },
        "deviceId": {
          "description": "The unique ID of the Chrome device.",
          "type": "string"
        },
        "firmwareVersion": {
          "description": "The Chrome device's firmware version.",
          "type": "string"
        },
        "manufactureDate": {
          "description": "(Read-only) The date the device was manufactured in yyyy-mm-dd format.",
          "type": "string"
        },
        "platformVersion": {
          "description": "The Chrome device's platform version.",
          "type": "string"
        },
        "willAutoRenew": {
          "type": "boolean",
          "description": "Determines if the device will auto renew its support after the support end date. This is a read-only property."
        },
        "orgUnitPath": {
          "type": "string",
          "description": "The full parent path with the organizational unit's name associated with the device. Path names are case insensitive. If the parent organizational unit is the top-level organization, it is represented as a forward slash, `/`. This property can be [updated](/admin-sdk/directory/v1/guides/manage-chrome-devices#update_chrome_device) using the API. For more information about how to create an organizational structure for your device, see the [administration help center](http://support.google.com/a/bin/answer.py?answer=182433)."
        },
        "serialNumber": {
          "description": "The Chrome device serial number entered when the device was enabled. This value is the same as the Admin console's *Serial Number* in the *Chrome OS Devices* tab.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "Google Chrome devices run on the [Chrome OS](http://support.google.com/chromeos). For more information about common API tasks, see the [Developer's Guide](/admin-sdk/directory/v1/guides/manage-chrome-devices).",
      "id": "ChromeOsDevice"
    },
    "Aliases": {
      "properties": {
        "etag": {
          "type": "string"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#aliases"
        },
        "aliases": {
          "type": "array",
          "items": {
            "type": "any"
          }
        }
      },
      "id": "Aliases",
      "description": "JSON response template to list aliases in Directory API.",
      "type": "object"
    },
    "Customer": {
      "type": "object",
      "id": "Customer",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique ID for the customer's G Suite account. (Readonly)"
        },
        "alternateEmail": {
          "type": "string",
          "description": "The customer's secondary contact email address. This email address cannot be on the same domain as the `customerDomain`"
        },
        "kind": {
          "description": "Identifies the resource as a customer. Value: `admin#directory#customer`",
          "default": "admin#directory#customer",
          "type": "string"
        },
        "postalAddress": {
          "$ref": "CustomerPostalAddress",
          "description": "The customer's postal address information."
        },
        "phoneNumber": {
          "description": "The customer's contact phone number in [E.164](http://en.wikipedia.org/wiki/E.164) format.",
          "type": "string"
        },
        "language": {
          "description": "The customer's ISO 639-2 language code. See the [Language Codes](/admin-sdk/directory/v1/languages) page for the list of supported codes. Valid language codes outside the supported set will be accepted by the API but may lead to unexpected behavior. The default value is `en`.",
          "type": "string"
        },
        "customerCreationTime": {
          "format": "date-time",
          "type": "string",
          "description": "The customer's creation time (Readonly)"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "customerDomain": {
          "type": "string",
          "description": "The customer's primary domain name string. Do not include the `www` prefix when creating a new customer."
        }
      }
    },
    "CalendarResource": {
      "description": "Public API: Resources.calendars",
      "id": "CalendarResource",
      "properties": {
        "resourceEmail": {
          "type": "string",
          "description": "The read-only email for the calendar resource. Generated as part of creating a new calendar resource."
        },
        "floorSection": {
          "description": "Name of the section within a floor a resource is located in.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "The type of the resource. For calendar resources, the value is `admin#directory#resources#calendars#CalendarResource`.",
          "default": "admin#directory#resources#calendars#CalendarResource"
        },
        "resourceType": {
          "description": "The type of the calendar resource, intended for non-room resources.",
          "type": "string"
        },
        "resourceId": {
          "description": "The unique ID for the calendar resource.",
          "annotations": {
            "required": [
              "directory.resources.calendars.insert"
            ]
          },
          "type": "string"
        },
        "etags": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "userVisibleDescription": {
          "type": "string",
          "description": "Description of the resource, visible to users and admins."
        },
        "featureInstances": {
          "type": "any",
          "description": "Instances of features for the calendar resource."
        },
        "generatedResourceName": {
          "type": "string",
          "description": "The read-only auto-generated name of the calendar resource which includes metadata about the resource such as building name, floor, capacity, etc. For example, \"NYC-2-Training Room 1A (16)\"."
        },
        "resourceCategory": {
          "type": "string",
          "description": "The category of the calendar resource. Either CONFERENCE_ROOM or OTHER. Legacy data is set to CATEGORY_UNKNOWN."
        },
        "floorName": {
          "description": "Name of the floor a resource is located on.",
          "type": "string"
        },
        "capacity": {
          "format": "int32",
          "description": "Capacity of a resource, number of seats in a room.",
          "type": "integer"
        },
        "resourceDescription": {
          "type": "string",
          "description": "Description of the resource, visible only to admins."
        },
        "resourceName": {
          "annotations": {
            "required": [
              "directory.resources.calendars.insert"
            ]
          },
          "type": "string",
          "description": "The name of the calendar resource. For example, \"Training Room 1A\"."
        },
        "buildingId": {
          "type": "string",
          "description": "Unique ID for the building a resource is located in."
        }
      },
      "type": "object"
    },
    "Alias": {
      "type": "object",
      "description": "JSON template for Alias object in Directory API.",
      "properties": {
        "kind": {
          "type": "string",
          "default": "admin#directory#alias"
        },
        "alias": {
          "type": "string"
        },
        "primaryEmail": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "etag": {
          "type": "string"
        }
      },
      "id": "Alias"
    },
    "VerificationCodes": {
      "type": "object",
      "description": "JSON response template for List verification codes operation in Directory API.",
      "id": "VerificationCodes",
      "properties": {
        "kind": {
          "description": "The type of the resource. This is always `admin#directory#verificationCodesList`.",
          "default": "admin#directory#verificationCodesList",
          "type": "string"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "items": {
          "description": "A list of verification code resources.",
          "items": {
            "$ref": "VerificationCode"
          },
          "type": "array"
        }
      }
    },
    "UserKeyword": {
      "description": "JSON template for a keyword entry.",
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "description": "Keyword."
        },
        "type": {
          "description": "Each entry can have a type which indicates standard type of that entry. For example keyword could be of type occupation or outlook. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        },
        "customType": {
          "description": "Custom Type.",
          "type": "string"
        }
      },
      "id": "UserKeyword"
    },
    "MobileDevice": {
      "properties": {
        "networkOperator": {
          "type": "string",
          "description": "Mobile Device mobile or network operator (if available) (Read-only)"
        },
        "hardware": {
          "description": "Mobile Device Hardware (Read-only)",
          "type": "string"
        },
        "adbStatus": {
          "type": "boolean",
          "description": "Adb (USB debugging) enabled or disabled on device (Read-only)"
        },
        "brand": {
          "description": "Mobile Device Brand (Read-only)",
          "type": "string"
        },
        "encryptionStatus": {
          "type": "string",
          "description": "Mobile Device Encryption Status (Read-only)"
        },
        "securityPatchLevel": {
          "description": "Mobile Device Security patch level (Read-only)",
          "format": "int64",
          "type": "string"
        },
        "buildNumber": {
          "type": "string",
          "description": "The device's operating system build number."
        },
        "unknownSourcesStatus": {
          "type": "boolean",
          "description": "Unknown sources enabled or disabled on device (Read-only)"
        },
        "otherAccountsInfo": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "List of accounts added on device (Read-only)"
        },
        "serialNumber": {
          "type": "string",
          "description": "The device's serial number."
        },
        "hardwareId": {
          "description": "The IMEI/MEID unique identifier for Android hardware. It is not applicable to Google Sync devices. When adding an Android mobile device, this is an optional property. When updating one of these devices, this is a read-only property.",
          "type": "string"
        },
        "kernelVersion": {
          "type": "string",
          "description": "The device's kernel version."
        },
        "kind": {
          "default": "admin#directory#mobiledevice",
          "description": "The type of the API resource. For Mobiledevices resources, the value is `admin#directory#mobiledevice`.",
          "type": "string"
        },
        "imei": {
          "description": "The device's IMEI number.",
          "type": "string"
        },
        "os": {
          "description": "The mobile device's operating system, for example IOS 4.3 or Android 2.3.5. This property can be [updated](/admin-sdk/directory/v1/reference/mobiledevices/update.html). For more information, see the [Developer's Guide](/admin-sdk/directory/v1/guides/manage-mobile-devices#update_mobile_device).",
          "type": "string"
        },
        "type": {
          "description": "The type of mobile device.",
          "type": "string"
        },
        "status": {
          "description": "The device's status.",
          "type": "string"
        },
        "applications": {
          "type": "array",
          "description": "The list of applications installed on an Android mobile device. It is not applicable to Google Sync and iOS devices. The list includes any Android applications that access G Suite data. When updating an applications list, it is important to note that updates replace the existing list. If the Android device has two existing applications and the API updates the list with five applications, the is now the updated list of five applications.",
          "items": {
            "type": "object",
            "properties": {
              "versionCode": {
                "description": "The application's version code. An example is `13`.",
                "type": "integer",
                "format": "int32"
              },
              "permission": {
                "items": {
                  "type": "string"
                },
                "type": "array",
                "description": "The list of permissions of this application. These can be either a standard Android permission or one defined by the application, and are found in an application's [Android manifest](http://developer.android.com/guide/topics/manifest/uses-permission-element.html). Examples of a Calendar application's permissions are `READ_CALENDAR`, or `MANAGE_ACCOUNTS`."
              },
              "displayName": {
                "description": "The application's display name. An example is `Browser`.",
                "type": "string"
              },
              "versionName": {
                "type": "string",
                "description": "The application's version name. An example is `3.2-140714`."
              },
              "packageName": {
                "description": "The application's package name. An example is `com.android.browser`.",
                "type": "string"
              }
            }
          }
        },
        "manufacturer": {
          "description": "Mobile Device manufacturer (Read-only)",
          "type": "string"
        },
        "privilege": {
          "description": "DMAgentPermission (Read-only)",
          "type": "string"
        },
        "deviceCompromisedStatus": {
          "description": "The compromised device status.",
          "type": "string"
        },
        "lastSync": {
          "format": "date-time",
          "type": "string",
          "description": "Date and time the device was last synchronized with the policy settings in the G Suite administrator control panel (Read-only)"
        },
        "meid": {
          "type": "string",
          "description": "The device's MEID number."
        },
        "firstSync": {
          "format": "date-time",
          "type": "string",
          "description": "Date and time the device was first synchronized with the policy settings in the G Suite administrator control panel (Read-only)"
        },
        "name": {
          "items": {
            "type": "string"
          },
          "description": "List of the owner's user names. If your application needs the current list of device owner names, use the [get](/admin-sdk/directory/v1/reference/mobiledevices/get.html) method. For more information about retrieving mobile device user information, see the [Developer's Guide](/admin-sdk/directory/v1/guides/manage-users#get_user).",
          "type": "array"
        },
        "managedAccountIsOnOwnerProfile": {
          "description": "Boolean indicating if this account is on owner/primary profile or not.",
          "type": "boolean"
        },
        "deviceId": {
          "type": "string",
          "description": "The serial number for a Google Sync mobile device. For Android and iOS devices, this is a software generated unique identifier."
        },
        "defaultLanguage": {
          "type": "string",
          "description": "The default locale used on the device."
        },
        "resourceId": {
          "type": "string",
          "description": "The unique ID the API service uses to identify the mobile device."
        },
        "releaseVersion": {
          "description": "Mobile Device release version version (Read-only)",
          "type": "string"
        },
        "userAgent": {
          "description": "Gives information about the device such as `os` version. This property can be [updated](/admin-sdk/directory/v1/reference/mobiledevices/update.html). For more information, see the [Developer's Guide](/admin-sdk/directory/v1/guides/manage-mobile-devices#update_mobile_device).",
          "type": "string"
        },
        "bootloaderVersion": {
          "type": "string",
          "description": "Mobile Device Bootloader version (Read-only)"
        },
        "model": {
          "description": "The mobile device's model name, for example Nexus S. This property can be [updated](/admin-sdk/directory/v1/reference/mobiledevices/update.html). For more information, see the [Developer's Guide](/admin-sdk/directory/v1/guides/manage-mobile=devices#update_mobile_device).",
          "type": "string"
        },
        "basebandVersion": {
          "type": "string",
          "description": "The device's baseband version."
        },
        "wifiMacAddress": {
          "description": "The device's MAC address on Wi-Fi networks.",
          "type": "string"
        },
        "supportsWorkProfile": {
          "type": "boolean",
          "description": "Work profile supported on device (Read-only)"
        },
        "email": {
          "items": {
            "type": "string"
          },
          "description": "List of owner's email addresses. If your application needs the current list of user emails, use the [get](/admin-sdk/directory/v1/reference/mobiledevices/get.html) method. For additional information, see the [retrieve a user](/admin-sdk/directory/v1/guides/manage-users#get_user) method.",
          "type": "array"
        },
        "devicePasswordStatus": {
          "description": "DevicePasswordStatus (Read-only)",
          "type": "string"
        },
        "developerOptionsStatus": {
          "type": "boolean",
          "description": "Developer options enabled or disabled on device (Read-only)"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        }
      },
      "description": "G Suite Mobile Management includes Android, [Google Sync](http://support.google.com/a/bin/answer.py?answer=135937), and iOS devices. For more information about common group mobile device API tasks, see the [Developer's Guide](/admin-sdk/directory/v1/guides/manage-mobile-devices.html).",
      "id": "MobileDevice",
      "type": "object"
    },
    "ChromeOsDeviceAction": {
      "type": "object",
      "id": "ChromeOsDeviceAction",
      "properties": {
        "deprovisionReason": {
          "type": "string",
          "description": "Only used when the action is `deprovision`. With the `deprovision` action, this field is required. *Note*: The deprovision reason is audited because it might have implications on licenses for perpetual subscription customers."
        },
        "action": {
          "annotations": {
            "required": [
              "directory.chromeosdevices.action"
            ]
          },
          "description": "Action to be taken on the Chrome OS device.",
          "type": "string"
        }
      }
    },
    "MobileDeviceAction": {
      "properties": {
        "action": {
          "type": "string",
          "description": "The action to be performed on the device.",
          "annotations": {
            "required": [
              "directory.mobiledevices.action"
            ]
          }
        }
      },
      "id": "MobileDeviceAction",
      "type": "object"
    },
    "DirectoryChromeosdevicesIssueCommandResponse": {
      "description": "A response for issuing a command.",
      "type": "object",
      "id": "DirectoryChromeosdevicesIssueCommandResponse",
      "properties": {
        "commandId": {
          "type": "string",
          "format": "int64",
          "description": "The unique ID of the issued command, used to retrieve the command status."
        }
      }
    },
    "Asps": {
      "id": "Asps",
      "properties": {
        "items": {
          "items": {
            "$ref": "Asp"
          },
          "type": "array",
          "description": "A list of ASP resources."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#aspList",
          "description": "The type of the API resource. This is always `admin#directory#aspList`.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "UserMakeAdmin": {
      "id": "UserMakeAdmin",
      "properties": {
        "status": {
          "type": "boolean",
          "description": "Indicates the administrator status of the user.",
          "annotations": {
            "required": [
              "directory.users.makeAdmin"
            ]
          }
        }
      },
      "type": "object"
    },
    "OrgUnits": {
      "id": "OrgUnits",
      "type": "object",
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "organizationUnits": {
          "items": {
            "$ref": "OrgUnit"
          },
          "description": "List of organizational unit objects.",
          "type": "array"
        },
        "kind": {
          "type": "string",
          "description": "The type of the API resource. For Org Unit resources, the type is `admin#directory#orgUnits`.",
          "default": "admin#directory#orgUnits"
        }
      }
    },
    "UserExternalId": {
      "type": "object",
      "id": "UserExternalId",
      "description": "JSON template for an externalId entry.",
      "properties": {
        "value": {
          "type": "string",
          "description": "The value of the id."
        },
        "type": {
          "description": "The type of the Id.",
          "type": "string"
        },
        "customType": {
          "type": "string",
          "description": "Custom type."
        }
      }
    },
    "DirectoryChromeosdevicesCommandResult": {
      "description": "The result of executing a command.",
      "type": "object",
      "id": "DirectoryChromeosdevicesCommandResult",
      "properties": {
        "result": {
          "type": "string",
          "enumDescriptions": [
            "The command result was unspecified.",
            "The command was ignored as obsolete.",
            "The command could not be executed successfully.",
            "The command was successfully executed."
          ],
          "enum": [
            "COMMAND_RESULT_TYPE_UNSPECIFIED",
            "IGNORED",
            "FAILURE",
            "SUCCESS"
          ],
          "description": "The result of the command."
        },
        "errorMessage": {
          "description": "The error message with a short explanation as to why the command failed. Only present if the command failed.",
          "type": "string"
        },
        "executeTime": {
          "type": "string",
          "format": "google-datetime",
          "description": "The time at which the command was executed or failed to execute."
        }
      }
    },
    "Features": {
      "description": "Public API: Resources.features",
      "type": "object",
      "properties": {
        "features": {
          "description": "The Features in this page of results.",
          "items": {
            "$ref": "Feature"
          },
          "type": "array"
        },
        "nextPageToken": {
          "type": "string",
          "description": "The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "default": "admin#directory#resources#features#featuresList",
          "type": "string",
          "description": "Kind of resource this is."
        }
      },
      "id": "Features"
    },
    "DirectoryChromeosdevicesIssueCommandRequest": {
      "properties": {
        "commandType": {
          "type": "string",
          "enum": [
            "COMMAND_TYPE_UNSPECIFIED",
            "REBOOT",
            "TAKE_A_SCREENSHOT",
            "SET_VOLUME",
            "WIPE_USERS",
            "REMOTE_POWERWASH"
          ],
          "description": "The type of command.",
          "enumDescriptions": [
            "The command type was unspecified.",
            "Reboot the device. Can only be issued to Kiosk and managed guest session devices.",
            "Take a screenshot of the device. Only available if the device is in Kiosk Mode.",
            "Set the volume of the device. Can only be issued to Kiosk and managed guest session devices.",
            "Wipe all the users off of the device. Executing this command in the device will remove all user profile data, but it will keep device policy and enrollment.",
            "Wipes the device by performing a power wash. Executing this command in the device will remove all data including user policies, device policies and enrollment policies. Warning: This will revert the device back to a factory state with no enrollment unless the device is subject to forced or auto enrollment. Use with caution, as this is an irreversible action!"
          ]
        },
        "payload": {
          "description": "The payload for the command, provide it only if command supports it. The following commands support adding payload: - SET_VOLUME: Payload is a stringified JSON object in the form: { \"volume\": 50 }. The volume has to be an integer in the range [0,100].",
          "type": "string"
        }
      },
      "type": "object",
      "id": "DirectoryChromeosdevicesIssueCommandRequest",
      "description": "A request for issuing a command."
    },
    "DirectoryChromeosdevicesCommand": {
      "properties": {
        "commandId": {
          "type": "string",
          "description": "Unique ID of a device command.",
          "format": "int64"
        },
        "type": {
          "type": "string",
          "description": "The type of the command.",
          "enum": [
            "COMMAND_TYPE_UNSPECIFIED",
            "REBOOT",
            "TAKE_A_SCREENSHOT",
            "SET_VOLUME",
            "WIPE_USERS",
            "REMOTE_POWERWASH"
          ],
          "enumDescriptions": [
            "The command type was unspecified.",
            "Reboot the device. Can only be issued to Kiosk and managed guest session devices.",
            "Take a screenshot of the device. Only available if the device is in Kiosk Mode.",
            "Set the volume of the device. Can only be issued to Kiosk and managed guest session devices.",
            "Wipe all the users off of the device. Executing this command in the device will remove all user profile data, but it will keep device policy and enrollment.",
            "Wipes the device by performing a power wash. Executing this command in the device will remove all data including user policies, device policies and enrollment policies. Warning: This will revert the device back to a factory state with no enrollment unless the device is subject to forced or auto enrollment. Use with caution, as this is an irreversible action!"
          ]
        },
        "commandResult": {
          "$ref": "DirectoryChromeosdevicesCommandResult",
          "description": "The result of the command execution."
        },
        "commandExpireTime": {
          "format": "google-datetime",
          "description": "The time at which the command will expire. If the device doesn't execute the command within this time the command will become expired.",
          "type": "string"
        },
        "payload": {
          "description": "The payload that the command specified, if any.",
          "type": "string"
        },
        "issueTime": {
          "description": "The timestamp when the command was issued by the admin.",
          "type": "string",
          "format": "google-datetime"
        },
        "state": {
          "enumDescriptions": [
            "The command status was unspecified.",
            "An unexpired command not yet sent to the client.",
            "The command didn't get executed by the client within the expected time.",
            "The command is cancelled by admin while in PENDING.",
            "The command has been sent to the client.",
            "The client has responded that it received the command.",
            "The client has (un)successfully executed the command."
          ],
          "description": "Indicates the command state.",
          "type": "string",
          "enum": [
            "STATE_UNSPECIFIED",
            "PENDING",
            "EXPIRED",
            "CANCELLED",
            "SENT_TO_CLIENT",
            "ACKED_BY_CLIENT",
            "EXECUTED_BY_CLIENT"
          ]
        }
      },
      "description": "Information regarding a command that was issued to a device.",
      "id": "DirectoryChromeosdevicesCommand",
      "type": "object"
    },
    "Users": {
      "properties": {
        "nextPageToken": {
          "description": "Token used to access next page of this result.",
          "type": "string"
        },
        "trigger_event": {
          "type": "string",
          "description": "Event that triggered this response (only used in case of Push Response)"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#users"
        },
        "users": {
          "type": "array",
          "description": "List of user objects.",
          "items": {
            "$ref": "User"
          }
        }
      },
      "id": "Users",
      "type": "object"
    },
    "UserAddress": {
      "description": "JSON template for address.",
      "properties": {
        "sourceIsStructured": {
          "type": "boolean",
          "description": "User supplied address was structured. Structured addresses are NOT supported at this time. You might be able to write structured addresses but any values will eventually be clobbered."
        },
        "formatted": {
          "description": "Formatted address.",
          "type": "string"
        },
        "extendedAddress": {
          "description": "Extended Address.",
          "type": "string"
        },
        "countryCode": {
          "type": "string",
          "description": "Country code."
        },
        "region": {
          "description": "Region.",
          "type": "string"
        },
        "country": {
          "description": "Country.",
          "type": "string"
        },
        "postalCode": {
          "type": "string",
          "description": "Postal code."
        },
        "customType": {
          "description": "Custom type.",
          "type": "string"
        },
        "primary": {
          "type": "boolean",
          "description": "If this is user's primary address. Only one entry could be marked as primary."
        },
        "type": {
          "description": "Each entry can have a type which indicates standard values of that entry. For example address could be of home work etc. In addition to the standard type an entry can have a custom type and can take any value. Such type should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        },
        "streetAddress": {
          "type": "string",
          "description": "Street."
        },
        "poBox": {
          "description": "Other parts of address.",
          "type": "string"
        },
        "locality": {
          "type": "string",
          "description": "Locality."
        }
      },
      "type": "object",
      "id": "UserAddress"
    },
    "Feature": {
      "id": "Feature",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.resources.features.insert"
            ]
          },
          "description": "The name of the feature."
        },
        "etags": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#resources#features#Feature",
          "type": "string"
        }
      },
      "description": "JSON template for Feature object in Directory API."
    },
    "UserLanguage": {
      "type": "object",
      "properties": {
        "customLanguage": {
          "description": "Other language. User can provide own language name if there is no corresponding Google III language code. If this is set LanguageCode can't be set",
          "type": "string"
        },
        "languageCode": {
          "type": "string",
          "description": "Language Code. Should be used for storing Google III LanguageCode string representation for language. Illegal values cause SchemaException."
        }
      },
      "id": "UserLanguage",
      "description": "JSON template for a language entry."
    },
    "UserRelation": {
      "properties": {
        "customType": {
          "type": "string",
          "description": "Custom Type."
        },
        "value": {
          "type": "string",
          "description": "The name of the relation."
        },
        "type": {
          "type": "string",
          "description": "The relation of the user. Some of the possible values are mother father sister brother manager assistant partner."
        }
      },
      "type": "object",
      "description": "JSON template for a relation entry.",
      "id": "UserRelation"
    },
    "MobileDevices": {
      "type": "object",
      "properties": {
        "mobiledevices": {
          "items": {
            "$ref": "MobileDevice"
          },
          "description": "List of Mobile Device objects.",
          "type": "array"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#mobiledevices",
          "type": "string"
        },
        "nextPageToken": {
          "type": "string",
          "description": "Token used to access next page of this result."
        }
      },
      "id": "MobileDevices"
    },
    "Role": {
      "id": "Role",
      "properties": {
        "roleId": {
          "description": "ID of the role.",
          "type": "string",
          "format": "int64"
        },
        "roleDescription": {
          "description": "A short description of the role.",
          "type": "string"
        },
        "roleName": {
          "annotations": {
            "required": [
              "directory.roles.insert"
            ]
          },
          "type": "string",
          "description": "Name of the role."
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "rolePrivileges": {
          "annotations": {
            "required": [
              "directory.roles.insert"
            ]
          },
          "items": {
            "type": "object",
            "properties": {
              "serviceId": {
                "description": "The obfuscated ID of the service this privilege is for. This value is returned with [`Privileges.list()`](/admin-sdk/directory/v1/reference/privileges/list).",
                "type": "string"
              },
              "privilegeName": {
                "description": "The name of the privilege.",
                "type": "string"
              }
            }
          },
          "description": "The set of privileges that are granted to this role.",
          "type": "array"
        },
        "isSystemRole": {
          "type": "boolean",
          "description": "Returns `true` if this is a pre-defined system role."
        },
        "isSuperAdminRole": {
          "type": "boolean",
          "description": "Returns `true` if the role is a super admin role."
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#role",
          "description": "The type of the API resource. This is always `admin#directory#role`."
        }
      },
      "type": "object"
    },
    "Token": {
      "type": "object",
      "id": "Token",
      "description": "JSON template for token resource in Directory API.",
      "properties": {
        "userKey": {
          "description": "The unique ID of the user that issued the token.",
          "type": "string"
        },
        "scopes": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "A list of authorization scopes the application is granted."
        },
        "clientId": {
          "type": "string",
          "description": "The Client ID of the application the token is issued to."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#token",
          "description": "The type of the API resource. This is always `admin#directory#token`."
        },
        "displayText": {
          "description": "The displayable name of the application the token is issued to.",
          "type": "string"
        },
        "nativeApp": {
          "description": "Whether the token is issued to an installed application. The value is `true` if the application is installed to a desktop or mobile device.",
          "type": "boolean"
        },
        "anonymous": {
          "description": "Whether the application is registered with Google. The value is `true` if the application has an anonymous Client ID.",
          "type": "boolean"
        }
      }
    },
    "BuildingAddress": {
      "description": "Public API: Resources.buildings",
      "type": "object",
      "properties": {
        "postalCode": {
          "description": "Optional. Postal code of the address.",
          "type": "string"
        },
        "languageCode": {
          "type": "string",
          "description": "Optional. BCP-47 language code of the contents of this address (if known)."
        },
        "regionCode": {
          "description": "Required. CLDR region code of the country/region of the address.",
          "type": "string"
        },
        "administrativeArea": {
          "type": "string",
          "description": "Optional. Highest administrative subdivision which is used for postal addresses of a country or region."
        },
        "addressLines": {
          "description": "Unstructured address lines describing the lower levels of an address.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "sublocality": {
          "description": "Optional. Sublocality of the address.",
          "type": "string"
        },
        "locality": {
          "type": "string",
          "description": "Optional. Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world where localities are not well defined or do not fit into this structure well, leave locality empty and use addressLines."
        }
      },
      "id": "BuildingAddress"
    },
    "Domains": {
      "type": "object",
      "properties": {
        "domainName": {
          "annotations": {
            "required": [
              "directory.domains.insert"
            ]
          },
          "description": "The domain name of the customer.",
          "type": "string"
        },
        "domainAliases": {
          "items": {
            "$ref": "DomainAlias"
          },
          "type": "array",
          "description": "List of domain alias objects. (Read-only)"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "verified": {
          "type": "boolean",
          "description": "Indicates the verification state of a domain. (Read-only)."
        },
        "isPrimary": {
          "description": "Indicates if the domain is a primary domain (Read-only).",
          "type": "boolean"
        },
        "creationTime": {
          "description": "Creation time of the domain. Expressed in [Unix time](http://en.wikipedia.org/wiki/Epoch_time) format. (Read-only).",
          "type": "string",
          "format": "int64"
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#domain",
          "description": "Kind of resource this is."
        }
      },
      "id": "Domains"
    },
    "Privileges": {
      "properties": {
        "kind": {
          "default": "admin#directory#privileges",
          "description": "The type of the API resource. This is always `admin#directory#privileges`.",
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "Privilege"
          },
          "description": "A list of Privilege resources.",
          "type": "array"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      },
      "type": "object",
      "id": "Privileges"
    },
    "DomainAliases": {
      "id": "DomainAliases",
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#domainAliases"
        },
        "domainAliases": {
          "items": {
            "$ref": "DomainAlias"
          },
          "type": "array",
          "description": "List of domain alias objects."
        }
      },
      "type": "object"
    },
    "SchemaFieldSpec": {
      "description": "You can use schemas to add custom fields to user profiles. You can use these fields to store information such as the projects your users work on, their physical locations, their hire dates, or whatever else fits your business needs. For more information, see [Custom User Fields](/admin-sdk/directory/v1/guides/manage-schemas).",
      "type": "object",
      "properties": {
        "multiValued": {
          "type": "boolean",
          "description": "A boolean specifying whether this is a multi-valued field or not. Default: `false`."
        },
        "fieldName": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          },
          "description": "The name of the field."
        },
        "displayName": {
          "description": "Display Name of the field.",
          "type": "string",
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          }
        },
        "kind": {
          "type": "string",
          "description": "The kind of resource this is. For schema fields this is always `admin#directory#schema#fieldspec`.",
          "default": "admin#directory#schema#fieldspec"
        },
        "numericIndexingSpec": {
          "type": "object",
          "properties": {
            "minValue": {
              "type": "number",
              "format": "double",
              "description": "Minimum value of this field. This is meant to be indicative rather than enforced. Values outside this range will still be indexed, but search may not be as performant."
            },
            "maxValue": {
              "format": "double",
              "description": "Maximum value of this field. This is meant to be indicative rather than enforced. Values outside this range will still be indexed, but search may not be as performant.",
              "type": "number"
            }
          },
          "description": "Indexing spec for a numeric field. By default, only exact match queries will be supported for numeric fields. Setting the `numericIndexingSpec` allows range queries to be supported."
        },
        "fieldId": {
          "type": "string",
          "description": "The unique identifier of the field (Read-only)"
        },
        "etag": {
          "description": "The ETag of the field.",
          "type": "string"
        },
        "readAccessType": {
          "default": "ALL_DOMAIN_USERS",
          "type": "string",
          "description": "Specifies who can view values of this field. See [Retrieve users as a non-administrator](/admin-sdk/directory/v1/guides/manage-users#retrieve_users_non_admin) for more information. Note: It may take up to 24 hours for changes to this field to be reflected."
        },
        "indexed": {
          "default": "true",
          "description": "Boolean specifying whether the field is indexed or not. Default: `true`.",
          "type": "boolean"
        },
        "fieldType": {
          "annotations": {
            "required": [
              "directory.schemas.insert",
              "directory.schemas.update"
            ]
          },
          "description": "The type of the field.",
          "type": "string"
        }
      },
      "id": "SchemaFieldSpec"
    },
    "Privilege": {
      "id": "Privilege",
      "properties": {
        "serviceId": {
          "type": "string",
          "description": "The obfuscated ID of the service this privilege is for. This value is returned with [`Privileges.list()`](/admin-sdk/directory/v1/reference/privileges/list)."
        },
        "isOuScopable": {
          "type": "boolean",
          "description": "If the privilege can be restricted to an organization unit."
        },
        "childPrivileges": {
          "description": "A list of child privileges. Privileges for a service form a tree. Each privilege can have a list of child privileges; this list is empty for a leaf privilege.",
          "items": {
            "$ref": "Privilege"
          },
          "type": "array"
        },
        "privilegeName": {
          "description": "The name of the privilege.",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "kind": {
          "default": "admin#directory#privilege",
          "type": "string",
          "description": "The type of the API resource. This is always `admin#directory#privilege`."
        },
        "serviceName": {
          "description": "The name of the service this privilege is for.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "UserLocation": {
      "properties": {
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard types of that entry. For example location could be of types default and desk. In addition to standard type an entry can have a custom type and can give it any name. Such types should have 'custom' as type and also have a customType value."
        },
        "floorName": {
          "type": "string",
          "description": "Floor name/number."
        },
        "customType": {
          "description": "Custom Type.",
          "type": "string"
        },
        "deskCode": {
          "description": "Most specific textual code of individual desk location.",
          "type": "string"
        },
        "area": {
          "type": "string",
          "description": "Textual location. This is most useful for display purposes to concisely describe the location. For example 'Mountain View, CA', 'Near Seattle', 'US-NYC-9TH 9A209A.''"
        },
        "floorSection": {
          "type": "string",
          "description": "Floor section. More specific location within the floor. For example if a floor is divided into sections 'A', 'B' and 'C' this field would identify one of those values."
        },
        "buildingId": {
          "description": "Building Identifier.",
          "type": "string"
        }
      },
      "type": "object",
      "description": "JSON template for a location entry.",
      "id": "UserLocation"
    },
    "DomainAlias": {
      "properties": {
        "kind": {
          "default": "admin#directory#domainAlias",
          "description": "Kind of resource this is.",
          "type": "string"
        },
        "domainAliasName": {
          "type": "string",
          "description": "The domain alias name."
        },
        "parentDomainName": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.domains.insert"
            ]
          },
          "description": "The parent domain name that the domain alias is associated with. This can either be a primary or secondary domain name within a customer."
        },
        "verified": {
          "type": "boolean",
          "description": "Indicates the verification state of a domain alias. (Read-only)"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "creationTime": {
          "format": "int64",
          "description": "The creation time of the domain alias. (Read-only).",
          "type": "string"
        }
      },
      "id": "DomainAlias",
      "type": "object"
    },
    "BuildingCoordinates": {
      "id": "BuildingCoordinates",
      "properties": {
        "longitude": {
          "type": "number",
          "description": "Longitude in decimal degrees.",
          "format": "double"
        },
        "latitude": {
          "description": "Latitude in decimal degrees.",
          "format": "double",
          "type": "number"
        }
      },
      "type": "object",
      "description": "Public API: Resources.buildings"
    },
    "RecentUsers": {
      "properties": {
        "email": {
          "description": "The user's email address. This is only present if the user type is `USER_TYPE_MANAGED`.",
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "The type of the user."
        }
      },
      "type": "object",
      "id": "RecentUsers",
      "description": "List of recent device users, in descending order, by last login time."
    },
    "RoleAssignment": {
      "type": "object",
      "id": "RoleAssignment",
      "properties": {
        "roleId": {
          "description": "The ID of the role that is assigned.",
          "format": "int64",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "orgUnitId": {
          "type": "string",
          "description": "If the role is restricted to an organization unit, this contains the ID for the organization unit the exercise of this role is restricted to."
        },
        "kind": {
          "default": "admin#directory#roleAssignment",
          "type": "string",
          "description": "The type of the API resource. This is always `admin#directory#roleAssignment`."
        },
        "scopeType": {
          "description": "The scope in which this role is assigned.",
          "type": "string"
        },
        "assignedTo": {
          "type": "string",
          "description": "The unique ID of the user this role is assigned to."
        },
        "roleAssignmentId": {
          "format": "int64",
          "description": "ID of this roleAssignment.",
          "type": "string"
        }
      }
    },
    "ChromeOsDevices": {
      "type": "object",
      "id": "ChromeOsDevices",
      "properties": {
        "kind": {
          "description": "Kind of resource this is.",
          "type": "string",
          "default": "admin#directory#chromeosdevices"
        },
        "nextPageToken": {
          "description": "Token used to access the next page of this result. To access the next page, use this token's value in the `pageToken` query string of this request.",
          "type": "string"
        },
        "chromeosdevices": {
          "description": "List of Chrome OS Device objects.",
          "items": {
            "$ref": "ChromeOsDevice"
          },
          "type": "array"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      }
    },
    "UserOrganization": {
      "type": "object",
      "id": "UserOrganization",
      "properties": {
        "customType": {
          "description": "Custom type.",
          "type": "string"
        },
        "location": {
          "type": "string",
          "description": "Location of the organization. This need not be fully qualified address."
        },
        "department": {
          "type": "string",
          "description": "Department within the organization."
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard types of that entry. For example organization could be of school work etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a CustomType value."
        },
        "name": {
          "type": "string",
          "description": "Name of the organization"
        },
        "primary": {
          "description": "If it user's primary organization.",
          "type": "boolean"
        },
        "domain": {
          "description": "The domain to which the organization belongs to.",
          "type": "string"
        },
        "symbol": {
          "type": "string",
          "description": "Symbol of the organization."
        },
        "description": {
          "description": "Description of the organization.",
          "type": "string"
        },
        "fullTimeEquivalent": {
          "description": "The full-time equivalent millipercent within the organization (100000 = 100%).",
          "type": "integer",
          "format": "int32"
        },
        "costCenter": {
          "description": "The cost center of the users department.",
          "type": "string"
        },
        "title": {
          "type": "string",
          "description": "Title (designation) of the user in the organization."
        }
      },
      "description": "JSON template for an organization entry."
    },
    "OrgUnit": {
      "id": "OrgUnit",
      "description": "Managing your account's organizational units allows you to configure your users' access to services and custom settings. For more information about common organizational unit tasks, see the [Developer's Guide](/admin-sdk/directory/v1/guides/manage-org-units.html).",
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of the organizational unit."
        },
        "orgUnitPath": {
          "type": "string",
          "description": "The full path to the organizational unit. The `orgUnitPath` is a derived property. When listed, it is derived from `parentOrgunitPath` and organizational unit's `name`. For example, for an organizational unit named 'apps' under parent organization '/engineering', the orgUnitPath is '/engineering/apps'. In order to edit an `orgUnitPath`, either update the name of the organization or the `parentOrgunitPath`. A user's organizational unit determines which G Suite services the user has access to. If the user is moved to a new organization, the user's access changes. For more information about organization structures, see the [administration help center](http://support.google.com/a/bin/answer.py?answer=182433&topic=1227584&ctx=topic). For more information about moving a user to a different organization, see [Update a user](/admin-sdk/directory/v1/guides/manage-users.html#update_user)."
        },
        "name": {
          "annotations": {
            "required": [
              "directory.orgunits.insert"
            ]
          },
          "description": "The organizational unit's path name. For example, an organizational unit's name within the /corp/support/sales_support parent path is sales_support. Required.",
          "type": "string"
        },
        "orgUnitId": {
          "type": "string",
          "description": "The unique ID of the organizational unit."
        },
        "blockInheritance": {
          "type": "boolean",
          "description": "Determines if a sub-organizational unit can inherit the settings of the parent organization. The default value is `false`, meaning a sub-organizational unit inherits the settings of the nearest parent organizational unit. For more information on inheritance and users in an organization structure, see the [administration help center](http://support.google.com/a/bin/answer.py?answer=182442&topic=1227584&ctx=topic)."
        },
        "parentOrgUnitId": {
          "type": "string",
          "description": "The unique ID of the parent organizational unit. Required, unless `parentOrgUnitPath` is set."
        },
        "parentOrgUnitPath": {
          "type": "string",
          "description": "The organizational unit's parent path. For example, /corp/sales is the parent path for /corp/sales/sales_support organizational unit. Required, unless `parentOrgUnitId` is set."
        },
        "kind": {
          "default": "admin#directory#orgUnit",
          "type": "string",
          "description": "The type of the API resource. For Orgunits resources, the value is `admin#directory#orgUnit`."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        }
      }
    },
    "Member": {
      "description": "A Google Groups member can be a user or another group. This member can be inside or outside of your account's domains. For more information about common group member tasks, see the [Developer's Guide](/admin-sdk/directory/v1/guides/manage-group-members).",
      "id": "Member",
      "properties": {
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "type": {
          "description": "The type of group member.",
          "type": "string"
        },
        "kind": {
          "description": "The type of the API resource. For Members resources, the value is `admin#directory#member`.",
          "default": "admin#directory#member",
          "type": "string"
        },
        "delivery_settings": {
          "description": "Defines mail delivery preferences of member. This is only supported by create/update/get.",
          "type": "string"
        },
        "id": {
          "type": "string",
          "description": "The unique ID of the group member. A member `id` can be used as a member request URI's `memberKey`."
        },
        "email": {
          "type": "string",
          "description": "The member's email address. A member can be a user or another group. This property is required when adding a member to a group. The `email` must be unique and cannot be an alias of another group. If the email address is changed, the API automatically reflects the email address changes."
        },
        "role": {
          "type": "string",
          "description": "The member's role in a group. The API returns an error for cycles in group memberships. For example, if `group1` is a member of `group2`, `group2` cannot be a member of `group1`. For more information about a member's role, see the [administration help center](http://support.google.com/a/bin/answer.py?answer=167094)."
        },
        "status": {
          "type": "string",
          "description": "Status of member (Immutable)"
        }
      },
      "type": "object"
    },
    "Schemas": {
      "type": "object",
      "description": "JSON response template for List Schema operation in Directory API.",
      "properties": {
        "kind": {
          "type": "string",
          "description": "Kind of resource this is.",
          "default": "admin#directory#schemas"
        },
        "etag": {
          "description": "ETag of the resource.",
          "type": "string"
        },
        "schemas": {
          "items": {
            "$ref": "Schema"
          },
          "type": "array",
          "description": "List of UserSchema objects."
        }
      },
      "id": "Schemas"
    },
    "UserCustomProperties": {
      "type": "object",
      "additionalProperties": {
        "type": "any"
      },
      "description": "JSON template for a set of custom properties (i.e. all fields in a particular schema)",
      "id": "UserCustomProperties"
    },
    "FeatureInstance": {
      "type": "object",
      "id": "FeatureInstance",
      "properties": {
        "feature": {
          "description": "The feature that this is an instance of. A calendar resource may have multiple instances of a feature.",
          "$ref": "Feature"
        }
      },
      "description": "JSON template for a feature instance."
    },
    "Asp": {
      "description": "An application-specific password (ASP) is used with applications that do not accept a verification code when logging into the application on certain devices. The ASP access code is used instead of the login and password you commonly use when accessing an application through a browser. For more information about ASPs and how to create one, see the [help center](//http://support.google.com/a/bin/answer.py?amp;answer=1032419).",
      "properties": {
        "lastTimeUsed": {
          "type": "string",
          "format": "int64",
          "description": "The time when the ASP was last used. Expressed in [Unix time](http://en.wikipedia.org/wiki/Epoch_time) format."
        },
        "userKey": {
          "type": "string",
          "description": "The unique ID of the user who issued the ASP."
        },
        "etag": {
          "description": "ETag of the ASP.",
          "type": "string"
        },
        "kind": {
          "default": "admin#directory#asp",
          "description": "The type of the API resource. This is always `admin#directory#asp`.",
          "type": "string"
        },
        "name": {
          "description": "The name of the application that the user, represented by their `userId`, entered when the ASP was created.",
          "type": "string"
        },
        "creationTime": {
          "description": "The time when the ASP was created. Expressed in [Unix time](http://en.wikipedia.org/wiki/Epoch_time) format.",
          "format": "int64",
          "type": "string"
        },
        "codeId": {
          "type": "integer",
          "format": "int32",
          "description": "The unique ID of the ASP."
        }
      },
      "type": "object",
      "id": "Asp"
    },
    "UserWebsite": {
      "type": "object",
      "id": "UserWebsite",
      "properties": {
        "value": {
          "description": "Website.",
          "type": "string"
        },
        "primary": {
          "description": "If this is user's primary website or not.",
          "type": "boolean"
        },
        "customType": {
          "type": "string",
          "description": "Custom Type."
        },
        "type": {
          "type": "string",
          "description": "Each entry can have a type which indicates standard types of that entry. For example website could be of home work blog etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value."
        }
      },
      "description": "JSON template for a website entry."
    },
    "UserEmail": {
      "properties": {
        "address": {
          "description": "Email id of the user.",
          "type": "string"
        },
        "type": {
          "description": "Each entry can have a type which indicates standard types of that entry. For example email could be of home, work etc. In addition to the standard type, an entry can have a custom type and can take any value Such types should have the CUSTOM value as type and also have a customType value.",
          "type": "string"
        },
        "primary": {
          "description": "If this is user's primary email. Only one entry could be marked as primary.",
          "type": "boolean"
        },
        "customType": {
          "type": "string",
          "description": "Custom Type."
        }
      },
      "type": "object",
      "description": "JSON template for an email.",
      "id": "UserEmail"
    },
    "Members": {
      "properties": {
        "members": {
          "description": "List of member objects.",
          "type": "array",
          "items": {
            "$ref": "Member"
          }
        },
        "kind": {
          "description": "Kind of resource this is.",
          "default": "admin#directory#members",
          "type": "string"
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "nextPageToken": {
          "type": "string",
          "description": "Token used to access next page of this result."
        }
      },
      "type": "object",
      "id": "Members"
    },
    "Group": {
      "description": "Google Groups provide your users the ability to send messages to groups of people using the group's email address. For more information about common tasks, see the [Developer's Guide](/admin-sdk/directory/v1/guides/manage-groups).",
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.groups.insert"
            ]
          },
          "description": "The group's email address. If your account has multiple domains, select the appropriate domain for the email address. The `email` must be unique. This property is required when creating a group. Group email addresses are subject to the same character usage rules as usernames, see the [administration help center](http://support.google.com/a/bin/answer.py?answer=33386) for the details."
        },
        "etag": {
          "type": "string",
          "description": "ETag of the resource."
        },
        "description": {
          "type": "string",
          "description": "An extended description to help users determine the purpose of a group. For example, you can include information about who should join the group, the types of messages to send to the group, links to FAQs about the group, or related groups. Maximum length is `4,096` characters."
        },
        "kind": {
          "type": "string",
          "default": "admin#directory#group",
          "description": "The type of the API resource. For Groups resources, the value is `admin#directory#group`."
        },
        "aliases": {
          "type": "array",
          "description": "List of a group's alias email addresses.",
          "items": {
            "type": "string"
          }
        },
        "directMembersCount": {
          "description": "The number of users that are direct members of the group. If a group is a member (child) of this group (the parent), members of the child group are not counted in the `directMembersCount` property of the parent group.",
          "format": "int64",
          "type": "string"
        },
        "adminCreated": {
          "description": "Value is `true` if this group was created by an administrator rather than a user.",
          "type": "boolean"
        },
        "nonEditableAliases": {
          "description": "List of the group's non-editable alias email addresses that are outside of the account's primary domain or subdomains. These are functioning email addresses used by the group. This is a read-only property returned in the API's response for a group. If edited in a group's POST or PUT request, the edit is ignored by the API service.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "type": "string",
          "description": "The unique ID of a group. A group `id` can be used as a group request URI's `groupKey`."
        },
        "name": {
          "type": "string",
          "description": "The group's display name."
        }
      },
      "id": "Group"
    },
    "UserSshPublicKey": {
      "description": "JSON template for a POSIX account entry.",
      "id": "UserSshPublicKey",
      "properties": {
        "fingerprint": {
          "type": "string",
          "readOnly": true,
          "description": "A SHA-256 fingerprint of the SSH public key. (Read-only)"
        },
        "expirationTimeUsec": {
          "type": "string",
          "format": "int64",
          "description": "An expiration time in microseconds since epoch."
        },
        "key": {
          "type": "string",
          "description": "An SSH public key."
        }
      },
      "type": "object"
    },
    "User": {
      "id": "User",
      "description": "The Directory API allows you to create and manage your account's users, user aliases, and user Gmail chat profile photos. For more information about common tasks, see the [User Accounts Developer's Guide](/admin-sdk/directory/v1/guides/manage-users.html) and the [User Aliases Developer's Guide](/admin-sdk/directory/v1/guides/manage-user-aliases.html).",
      "properties": {
        "agreedToTerms": {
          "description": "Output only. This property is `true` if the user has completed an initial login and accepted the Terms of Service agreement.",
          "type": "boolean",
          "readOnly": true
        },
        "id": {
          "description": "The unique ID for the user. A user `id` can be used as a user request URI's `userKey`.",
          "type": "string"
        },
        "isEnforcedIn2Sv": {
          "readOnly": true,
          "description": "Output only. Is 2-step verification enforced (Read-only)",
          "type": "boolean"
        },
        "ipWhitelisted": {
          "description": "If `true`, the user's IP address is [white listed](http://support.google.com/a/bin/answer.py?answer=60752).",
          "type": "boolean"
        },
        "phones": {
          "description": "A list of the user's phone numbers. The maximum allowed data size for this field is 1Kb.",
          "type": "any"
        },
        "creationTime": {
          "type": "string",
          "format": "date-time",
          "description": "User's G Suite account creation time. (Read-only)",
          "readOnly": true
        },
        "ims": {
          "description": "The user's Instant Messenger (IM) accounts. A user account can have multiple ims properties. But, only one of these ims properties can be the primary IM contact. The maximum allowed data size for this field is 2Kb.",
          "type": "any"
        },
        "orgUnitPath": {
          "description": "The full path of the parent organization associated with the user. If the parent organization is the top-level, it is represented as a forward slash (`/`).",
          "type": "string"
        },
        "locations": {
          "description": "The user's locations. The maximum allowed data size for this field is 10Kb.",
          "type": "any"
        },
        "deletionTime": {
          "format": "date-time",
          "type": "string",
          "readOnly": true
        },
        "thumbnailPhotoEtag": {
          "readOnly": true,
          "description": "Output only. ETag of the user's photo (Read-only)",
          "type": "string"
        },
        "thumbnailPhotoUrl": {
          "type": "string",
          "description": "Output only. Photo Url of the user (Read-only)",
          "readOnly": true
        },
        "isMailboxSetup": {
          "readOnly": true,
          "type": "boolean",
          "description": "Output only. Indicates if the user's Google mailbox is created. This property is only applicable if the user has been assigned a Gmail license."
        },
        "archived": {
          "description": "Indicates if user is archived.",
          "type": "boolean"
        },
        "aliases": {
          "description": "Output only. List of the user's alias email addresses.",
          "items": {
            "type": "string"
          },
          "type": "array",
          "readOnly": true
        },
        "suspended": {
          "type": "boolean",
          "description": "Indicates if user is suspended."
        },
        "isDelegatedAdmin": {
          "type": "boolean",
          "description": "Output only. Indicates if the user is a delegated administrator. Delegated administrators are supported by the API but cannot create or undelete users, or make users administrators. These requests are ignored by the API service. Roles and privileges for administrators are assigned using the [Admin console](http://support.google.com/a/bin/answer.py?answer=33325).",
          "readOnly": true
        },
        "emails": {
          "type": "any",
          "description": "A list of the user's email addresses. The maximum allowed data size for this field is 10Kb."
        },
        "lastLoginTime": {
          "description": "User's last login time. (Read-only)",
          "readOnly": true,
          "type": "string",
          "format": "date-time"
        },
        "includeInGlobalAddressList": {
          "type": "boolean",
          "description": "Indicates if the user's profile is visible in the G Suite global address list when the contact sharing feature is enabled for the domain. For more information about excluding user profiles, see the [administration help center](http://support.google.com/a/bin/answer.py?answer=1285988)."
        },
        "isEnrolledIn2Sv": {
          "readOnly": true,
          "type": "boolean",
          "description": "Output only. Is enrolled in 2-step verification (Read-only)"
        },
        "sshPublicKeys": {
          "type": "any",
          "description": "A list of SSH public keys."
        },
        "recoveryEmail": {
          "description": "Recovery email of the user.",
          "type": "string"
        },
        "nonEditableAliases": {
          "readOnly": true,
          "description": "Output only. List of the user's non-editable alias email addresses. These are typically outside the account's primary domain or sub-domain.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "relations": {
          "description": "A list of the user's relationships to other users. The maximum allowed data size for this field is 2Kb.",
          "type": "any"
        },
        "gender": {
          "type": "any",
          "description": "The user's gender. The maximum allowed data size for this field is 1Kb."
        },
        "isAdmin": {
          "description": "Output only. Indicates a user with super admininistrator privileges. The `isAdmin` property can only be edited in the [Make a user an administrator](/admin-sdk/directory/v1/guides/manage-users.html#make_admin) operation ( [makeAdmin](/admin-sdk/directory/v1/reference/users/makeAdmin.html) method). If edited in the user [insert](/admin-sdk/directory/v1/reference/users/insert.html) or [update](/admin-sdk/directory/v1/reference/users/update.html) methods, the edit is ignored by the API service.",
          "readOnly": true,
          "type": "boolean"
        },
        "notes": {
          "description": "Notes for the user.",
          "type": "any"
        },
        "externalIds": {
          "type": "any",
          "description": "A list of external IDs for the user, such as an employee or network ID. The maximum allowed data size for this field is 2Kb."
        },
        "password": {
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          },
          "type": "string",
          "description": "User's password"
        },
        "primaryEmail": {
          "type": "string",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          },
          "description": "The user's primary email address. This property is required in a request to create a user account. The `primaryEmail` must be unique and cannot be an alias of another user."
        },
        "websites": {
          "type": "any",
          "description": "The user's websites. The maximum allowed data size for this field is 2Kb."
        },
        "organizations": {
          "type": "any",
          "description": "A list of organizations the user belongs to. The maximum allowed data size for this field is 10Kb."
        },
        "keywords": {
          "type": "any",
          "description": "The user's keywords. The maximum allowed data size for this field is 1Kb."
        },
        "kind": {
          "description": "Output only. The type of the API resource. For Users resources, the value is `admin#directory#user`.",
          "type": "string",
          "readOnly": true,
          "default": "admin#directory#user"
        },
        "customSchemas": {
          "additionalProperties": {
            "$ref": "UserCustomProperties"
          },
          "description": "Custom fields of the user.",
          "type": "object"
        },
        "recoveryPhone": {
          "type": "string",
          "description": "Recovery phone of the user. The phone number must be in the E.164 format, starting with the plus sign (+). Example: *+16506661212*."
        },
        "changePasswordAtNextLogin": {
          "type": "boolean",
          "description": "Indicates if the user is forced to change their password at next login. This setting doesn't apply when [the user signs in via a third-party identity provider](https://support.google.com/a/answer/60224)."
        },
        "etag": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. ETag of the resource."
        },
        "name": {
          "description": "Holds the given and family names of the user, and the read-only `fullName` value. The maximum number of characters in the `givenName` and in the `familyName` values is 60. In addition, name values support unicode/UTF-8 characters, and can contain spaces, letters (a-z), numbers (0-9), dashes (-), forward slashes (/), and periods (.). For more information about character usage rules, see the [administration help center](http://support.google.com/a/bin/answer.py?answer=33386). Maximum allowed data size for this field is 1Kb.",
          "annotations": {
            "required": [
              "directory.users.insert"
            ]
          },
          "$ref": "UserName"
        },
        "posixAccounts": {
          "type": "any",
          "description": "A list of [POSIX](http://www.opengroup.org/austin/papers/posix_faq.html) account information for the user."
        },
        "hashFunction": {
          "description": "Stores the hash format of the password property. We recommend sending the `password` property value as a base 16 bit hexadecimal-encoded hash value. Set the `hashFunction` values as either the [SHA-1](http://wikipedia.org/wiki/SHA-1), [MD5](http://wikipedia.org/wiki/MD5), or [crypt](https://en.wikipedia.org/wiki/Crypt_(C)) hash format.",
          "type": "string"
        },
        "addresses": {
          "type": "any",
          "description": "A list of the user's addresses. The maximum allowed data size for this field is 10Kb."
        },
        "languages": {
          "type": "any",
          "description": "The user's languages. The maximum allowed data size for this field is 1Kb."
        },
        "suspensionReason": {
          "readOnly": true,
          "description": "Output only. Has the reason a user account is suspended either by the administrator or by Google at the time of suspension. The property is returned only if the `suspended` property is `true`.",
          "type": "string"
        },
        "customerId": {
          "description": "Output only. The customer ID to [retrieve all account users](/admin-sdk/directory/v1/guides/manage-users.html#get_all_users). You can use the alias `my_customer` to represent your account's `customerId`. As a reseller administrator, you can use the resold customer account's `customerId`. To get a `customerId`, use the account's primary domain in the `domain` parameter of a [users.list](/admin-sdk/directory/v1/reference/users/list) request.",
          "readOnly": true,
          "type": "string"
        }
      },
      "type": "object"
    }
  },
  "version": "directory_v1",
  "kind": "discovery#restDescription",
  "fullyEncodeReservedExpansion": true,
  "icons": {
    "x32": "http://www.google.com/images/icons/product/search-32.gif",
    "x16": "http://www.google.com/images/icons/product/search-16.gif"
  },
  "resources": {
    "customers": {
      "methods": {
        "get": {
          "description": "Retrieves a customer.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.customer",
            "https://www.googleapis.com/auth/admin.directory.customer.readonly"
          ],
          "flatPath": "admin/directory/v1/customers/{customerKey}",
          "id": "directory.customers.get",
          "parameterOrder": [
            "customerKey"
          ],
          "path": "admin/directory/v1/customers/{customerKey}",
          "response": {
            "$ref": "Customer"
          },
          "httpMethod": "GET",
          "parameters": {
            "customerKey": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Id of the customer to be retrieved"
            }
          }
        },
        "patch": {
          "flatPath": "admin/directory/v1/customers/{customerKey}",
          "parameterOrder": [
            "customerKey"
          ],
          "description": "Patch Customers via Apiary Patch Orchestration",
          "httpMethod": "PATCH",
          "request": {
            "$ref": "Customer"
          },
          "path": "admin/directory/v1/customers/{customerKey}",
          "parameters": {
            "customerKey": {
              "description": "Id of the customer to be updated",
              "type": "string",
              "location": "path",
              "required": true
            }
          },
          "response": {
            "$ref": "Customer"
          },
          "id": "directory.customers.patch",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.customer"
          ]
        },
        "update": {
          "flatPath": "admin/directory/v1/customers/{customerKey}",
          "response": {
            "$ref": "Customer"
          },
          "parameterOrder": [
            "customerKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.customer"
          ],
          "description": "Updates a customer.",
          "parameters": {
            "customerKey": {
              "location": "path",
              "required": true,
              "description": "Id of the customer to be updated",
              "type": "string"
            }
          },
          "request": {
            "$ref": "Customer"
          },
          "path": "admin/directory/v1/customers/{customerKey}",
          "id": "directory.customers.update",
          "httpMethod": "PUT"
        }
      }
    },
    "resources": {
      "resources": {
        "calendars": {
          "methods": {
            "insert": {
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "parameterOrder": [
                "customer"
              ],
              "response": {
                "$ref": "CalendarResource"
              },
              "description": "Inserts a calendar resource.",
              "parameters": {
                "customer": {
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID.",
                  "location": "path",
                  "type": "string"
                }
              },
              "request": {
                "$ref": "CalendarResource"
              },
              "httpMethod": "POST",
              "path": "admin/directory/v1/customer/{customer}/resources/calendars",
              "id": "directory.resources.calendars.insert"
            },
            "list": {
              "response": {
                "$ref": "CalendarResources"
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars",
              "id": "directory.resources.calendars.list",
              "parameters": {
                "orderBy": {
                  "type": "string",
                  "description": "Field(s) to sort results by in either ascending or descending order. Supported fields include `resourceId`, `resourceName`, `capacity`, `buildingId`, and `floorName`. If no order is specified, defaults to ascending. Should be of the form \"field [asc|desc], field [asc|desc], ...\". For example `buildingId, capacity desc` would return results sorted first by `buildingId` in ascending order then by `capacity` in descending order.",
                  "location": "query"
                },
                "maxResults": {
                  "minimum": "1",
                  "description": "Maximum number of results to return.",
                  "format": "int32",
                  "type": "integer",
                  "maximum": "500",
                  "location": "query"
                },
                "pageToken": {
                  "description": "Token to specify the next page in the list.",
                  "location": "query",
                  "type": "string"
                },
                "query": {
                  "type": "string",
                  "location": "query",
                  "description": "String query used to filter results. Should be of the form \"field operator value\" where field can be any of supported fields and operators can be any of supported operations. Operators include '=' for exact match, '!=' for mismatch and ':' for prefix match or HAS match where applicable. For prefix match, the value should always be followed by a *. Logical operators NOT and AND are supported (in this order of precedence). Supported fields include `generatedResourceName`, `name`, `buildingId`, `floor_name`, `capacity`, `featureInstances.feature.name`, `resourceEmail`, `resourceCategory`. For example `buildingId=US-NYC-9TH AND featureInstances.feature.name:Phone`."
                },
                "customer": {
                  "required": true,
                  "location": "path",
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID."
                }
              },
              "path": "admin/directory/v1/customer/{customer}/resources/calendars",
              "httpMethod": "GET",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "description": "Retrieves a list of calendar resources for an account.",
              "parameterOrder": [
                "customer"
              ]
            },
            "update": {
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "description": "Updates a calendar resource. This method supports patch semantics, meaning you only need to include the fields you wish to update. Fields that are not present in the request will be preserved.",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "httpMethod": "PUT",
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "response": {
                "$ref": "CalendarResource"
              },
              "parameters": {
                "calendarResourceId": {
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "description": "The unique ID of the calendar resource to update."
                },
                "customer": {
                  "location": "path",
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID.",
                  "type": "string"
                }
              },
              "id": "directory.resources.calendars.update",
              "request": {
                "$ref": "CalendarResource"
              }
            },
            "patch": {
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "httpMethod": "PATCH",
              "id": "directory.resources.calendars.patch",
              "description": "Patches a calendar resource via Apiary Patch Orchestration.",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "parameters": {
                "customer": {
                  "location": "path",
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID.",
                  "required": true
                },
                "calendarResourceId": {
                  "location": "path",
                  "required": true,
                  "description": "The unique ID of the calendar resource to update.",
                  "type": "string"
                }
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "response": {
                "$ref": "CalendarResource"
              },
              "request": {
                "$ref": "CalendarResource"
              }
            },
            "delete": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "description": "Deletes a calendar resource.",
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "id": "directory.resources.calendars.delete",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "httpMethod": "DELETE",
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "parameters": {
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "calendarResourceId": {
                  "type": "string",
                  "required": true,
                  "description": "The unique ID of the calendar resource to delete.",
                  "location": "path"
                }
              }
            },
            "get": {
              "path": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
              "response": {
                "$ref": "CalendarResource"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "httpMethod": "GET",
              "id": "directory.resources.calendars.get",
              "parameterOrder": [
                "customer",
                "calendarResourceId"
              ],
              "description": "Retrieves a calendar resource.",
              "parameters": {
                "customer": {
                  "location": "path",
                  "type": "string",
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID."
                },
                "calendarResourceId": {
                  "type": "string",
                  "required": true,
                  "description": "The unique ID of the calendar resource to retrieve.",
                  "location": "path"
                }
              }
            }
          }
        },
        "features": {
          "methods": {
            "patch": {
              "httpMethod": "PATCH",
              "response": {
                "$ref": "Feature"
              },
              "request": {
                "$ref": "Feature"
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "description": "Patches a feature via Apiary Patch Orchestration.",
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "parameters": {
                "customer": {
                  "type": "string",
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID.",
                  "location": "path"
                },
                "featureKey": {
                  "required": true,
                  "location": "path",
                  "type": "string",
                  "description": "The unique ID of the feature to update."
                }
              },
              "id": "directory.resources.features.patch",
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ]
            },
            "update": {
              "httpMethod": "PUT",
              "request": {
                "$ref": "Feature"
              },
              "response": {
                "$ref": "Feature"
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "id": "directory.resources.features.update",
              "description": "Updates a feature.",
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "parameters": {
                "featureKey": {
                  "description": "The unique ID of the feature to update.",
                  "type": "string",
                  "location": "path",
                  "required": true
                },
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID.",
                  "required": true,
                  "type": "string",
                  "location": "path"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "parameterOrder": [
                "customer",
                "featureKey"
              ]
            },
            "delete": {
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "id": "directory.resources.features.delete",
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "description": "Deletes a feature.",
              "parameters": {
                "customer": {
                  "location": "path",
                  "required": true,
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID."
                },
                "featureKey": {
                  "location": "path",
                  "required": true,
                  "description": "The unique ID of the feature to delete.",
                  "type": "string"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "httpMethod": "DELETE"
            },
            "insert": {
              "httpMethod": "POST",
              "parameterOrder": [
                "customer"
              ],
              "request": {
                "$ref": "Feature"
              },
              "response": {
                "$ref": "Feature"
              },
              "path": "admin/directory/v1/customer/{customer}/resources/features",
              "id": "directory.resources.features.insert",
              "parameters": {
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID.",
                  "type": "string",
                  "location": "path",
                  "required": true
                }
              },
              "description": "Inserts a feature.",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ]
            },
            "get": {
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "parameterOrder": [
                "customer",
                "featureKey"
              ],
              "description": "Retrieves a feature.",
              "path": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "parameters": {
                "featureKey": {
                  "description": "The unique ID of the feature to retrieve.",
                  "required": true,
                  "location": "path",
                  "type": "string"
                },
                "customer": {
                  "type": "string",
                  "required": true,
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID.",
                  "location": "path"
                }
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
              "id": "directory.resources.features.get",
              "httpMethod": "GET",
              "response": {
                "$ref": "Feature"
              }
            },
            "list": {
              "parameters": {
                "pageToken": {
                  "type": "string",
                  "description": "Token to specify the next page in the list.",
                  "location": "query"
                },
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID.",
                  "location": "path",
                  "type": "string",
                  "required": true
                },
                "maxResults": {
                  "description": "Maximum number of results to return.",
                  "format": "int32",
                  "minimum": "1",
                  "type": "integer",
                  "location": "query",
                  "maximum": "500"
                }
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features",
              "response": {
                "$ref": "Features"
              },
              "parameterOrder": [
                "customer"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/features",
              "description": "Retrieves a list of features for an account.",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "id": "directory.resources.features.list",
              "httpMethod": "GET"
            },
            "rename": {
              "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{oldName}/rename",
              "parameterOrder": [
                "customer",
                "oldName"
              ],
              "id": "directory.resources.features.rename",
              "description": "Renames a feature.",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "request": {
                "$ref": "FeatureRename"
              },
              "path": "admin/directory/v1/customer/{customer}/resources/features/{oldName}/rename",
              "httpMethod": "POST",
              "parameters": {
                "oldName": {
                  "description": "The unique ID of the feature to rename.",
                  "type": "string",
                  "required": true,
                  "location": "path"
                },
                "customer": {
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID."
                }
              }
            }
          }
        },
        "buildings": {
          "methods": {
            "insert": {
              "httpMethod": "POST",
              "parameters": {
                "coordinatesSource": {
                  "default": "SOURCE_UNSPECIFIED",
                  "enumDescriptions": [
                    "",
                    "Building.coordinates are set to the coordinates included in the request.",
                    "Building.coordinates are automatically populated based on the postal address.",
                    "Defaults to `RESOLVED_FROM_ADDRESS` if postal address is provided. Otherwise, defaults to `CLIENT_SPECIFIED` if coordinates are provided."
                  ],
                  "type": "string",
                  "description": "Source from which Building.coordinates are derived.",
                  "enum": [
                    "COORDINATES_SOURCE_UNDEFINED",
                    "CLIENT_SPECIFIED",
                    "RESOLVED_FROM_ADDRESS",
                    "SOURCE_UNSPECIFIED"
                  ],
                  "location": "query"
                },
                "customer": {
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID.",
                  "type": "string",
                  "required": true
                }
              },
              "description": "Inserts a building.",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "id": "directory.resources.buildings.insert",
              "request": {
                "$ref": "Building"
              },
              "path": "admin/directory/v1/customer/{customer}/resources/buildings",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings",
              "response": {
                "$ref": "Building"
              },
              "parameterOrder": [
                "customer"
              ]
            },
            "list": {
              "description": "Retrieves a list of buildings for an account.",
              "parameterOrder": [
                "customer"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/buildings",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "parameters": {
                "pageToken": {
                  "location": "query",
                  "description": "Token to specify the next page in the list.",
                  "type": "string"
                },
                "customer": {
                  "location": "path",
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID.",
                  "required": true
                },
                "maxResults": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Maximum number of results to return.",
                  "maximum": "500",
                  "minimum": "1",
                  "location": "query"
                }
              },
              "response": {
                "$ref": "Buildings"
              },
              "httpMethod": "GET",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings",
              "id": "directory.resources.buildings.list"
            },
            "update": {
              "parameters": {
                "customer": {
                  "type": "string",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID.",
                  "required": true,
                  "location": "path"
                },
                "buildingId": {
                  "location": "path",
                  "type": "string",
                  "description": "The id of the building to update.",
                  "required": true
                },
                "coordinatesSource": {
                  "default": "SOURCE_UNSPECIFIED",
                  "type": "string",
                  "enum": [
                    "COORDINATES_SOURCE_UNDEFINED",
                    "CLIENT_SPECIFIED",
                    "RESOLVED_FROM_ADDRESS",
                    "SOURCE_UNSPECIFIED"
                  ],
                  "enumDescriptions": [
                    "",
                    "Building.coordinates are set to the coordinates included in the request.",
                    "Building.coordinates are automatically populated based on the postal address.",
                    "Defaults to `RESOLVED_FROM_ADDRESS` if postal address is provided. Otherwise, defaults to `CLIENT_SPECIFIED` if coordinates are provided."
                  ],
                  "description": "Source from which Building.coordinates are derived.",
                  "location": "query"
                }
              },
              "id": "directory.resources.buildings.update",
              "httpMethod": "PUT",
              "description": "Updates a building.",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "response": {
                "$ref": "Building"
              },
              "request": {
                "$ref": "Building"
              },
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}"
            },
            "delete": {
              "parameters": {
                "buildingId": {
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "description": "The id of the building to delete."
                },
                "customer": {
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID."
                }
              },
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "description": "Deletes a building.",
              "httpMethod": "DELETE",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "id": "directory.resources.buildings.delete"
            },
            "get": {
              "response": {
                "$ref": "Building"
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar",
                "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly"
              ],
              "description": "Retrieves a building.",
              "httpMethod": "GET",
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "id": "directory.resources.buildings.get",
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "parameters": {
                "customer": {
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID.",
                  "required": true,
                  "location": "path",
                  "type": "string"
                },
                "buildingId": {
                  "description": "The unique ID of the building to retrieve.",
                  "type": "string",
                  "required": true,
                  "location": "path"
                }
              }
            },
            "patch": {
              "description": "Patches a building via Apiary Patch Orchestration.",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.resource.calendar"
              ],
              "response": {
                "$ref": "Building"
              },
              "parameters": {
                "buildingId": {
                  "location": "path",
                  "required": true,
                  "description": "The id of the building to update.",
                  "type": "string"
                },
                "coordinatesSource": {
                  "location": "query",
                  "default": "SOURCE_UNSPECIFIED",
                  "description": "Source from which Building.coordinates are derived.",
                  "enum": [
                    "COORDINATES_SOURCE_UNDEFINED",
                    "CLIENT_SPECIFIED",
                    "RESOLVED_FROM_ADDRESS",
                    "SOURCE_UNSPECIFIED"
                  ],
                  "type": "string",
                  "enumDescriptions": [
                    "",
                    "Building.coordinates are set to the coordinates included in the request.",
                    "Building.coordinates are automatically populated based on the postal address.",
                    "Defaults to `RESOLVED_FROM_ADDRESS` if postal address is provided. Otherwise, defaults to `CLIENT_SPECIFIED` if coordinates are provided."
                  ]
                },
                "customer": {
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the `my_customer` alias to represent your account's customer ID."
                }
              },
              "request": {
                "$ref": "Building"
              },
              "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "parameterOrder": [
                "customer",
                "buildingId"
              ],
              "path": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
              "id": "directory.resources.buildings.patch",
              "httpMethod": "PATCH"
            }
          }
        }
      }
    },
    "users": {
      "methods": {
        "watch": {
          "response": {
            "$ref": "Channel"
          },
          "httpMethod": "POST",
          "parameterOrder": [],
          "path": "admin/directory/v1/users/watch",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "description": "Watch for changes in users list",
          "parameters": {
            "pageToken": {
              "type": "string",
              "location": "query",
              "description": "Token to specify next page in the list"
            },
            "projection": {
              "enumDescriptions": [
                "",
                "Do not include any custom fields for the user.",
                "Include custom fields from schemas mentioned in customFieldMask.",
                "Include all fields associated with this user."
              ],
              "enum": [
                "projectionUnspecified",
                "basic",
                "custom",
                "full"
              ],
              "default": "basic",
              "description": "What subset of fields to fetch for this user.",
              "type": "string",
              "location": "query"
            },
            "domain": {
              "location": "query",
              "description": "Name of the domain. Fill this field to get users from only this domain. To return all users in a multi-domain fill customer field instead.\"",
              "type": "string"
            },
            "sortOrder": {
              "location": "query",
              "type": "string",
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "enum": [
                "sortOrderUnspecified",
                "ASCENDING",
                "DESCENDING"
              ],
              "description": "Whether to return results in ascending or descending order."
            },
            "customFieldMask": {
              "description": "Comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when projection=custom.",
              "type": "string",
              "location": "query"
            },
            "orderBy": {
              "description": "Column to use for sorting results",
              "location": "query",
              "type": "string",
              "enum": [
                "orderByUnspecified",
                "email",
                "familyName",
                "givenName"
              ],
              "enumDescriptions": [
                "",
                "Primary email of the user.",
                "User's family name.",
                "User's given name."
              ]
            },
            "event": {
              "enumDescriptions": [
                "",
                "User Created Event",
                "User Deleted Event",
                "User Admin Status Change Event",
                "User Undeleted Event",
                "User Updated Event"
              ],
              "enum": [
                "eventTypeUnspecified",
                "add",
                "delete",
                "makeAdmin",
                "undelete",
                "update"
              ],
              "description": "Events to watch for.",
              "type": "string",
              "location": "query"
            },
            "customer": {
              "location": "query",
              "type": "string",
              "description": "Immutable ID of the G Suite account. In case of multi-domain, to fetch all users for a customer, fill this field instead of domain."
            },
            "maxResults": {
              "minimum": "1",
              "description": "Maximum number of results to return.",
              "format": "int32",
              "location": "query",
              "maximum": "500",
              "default": "100",
              "type": "integer"
            },
            "showDeleted": {
              "location": "query",
              "type": "string",
              "description": "If set to true, retrieves the list of deleted users. (Default: false)"
            },
            "viewType": {
              "description": "Whether to fetch the administrator-only or domain-wide public view of the user. For more information, see [Retrieve a user as a non-administrator](/admin-sdk/directory/v1/guides/manage-users#retrieve_users_non_admin).",
              "enum": [
                "admin_view",
                "domain_public"
              ],
              "enumDescriptions": [
                "Results include both administrator-only and domain-public fields.",
                "Results only include fields for the user that are publicly visible to other users in the domain."
              ],
              "default": "admin_view",
              "type": "string",
              "location": "query"
            },
            "query": {
              "type": "string",
              "location": "query",
              "description": "Query string search. Should be of the form \"\". Complete documentation is at https: //developers.google.com/admin-sdk/directory/v1/guides/search-users"
            }
          },
          "flatPath": "admin/directory/v1/users/watch",
          "id": "directory.users.watch",
          "request": {
            "$ref": "Channel"
          }
        },
        "signOut": {
          "id": "directory.users.signOut",
          "parameterOrder": [
            "userKey"
          ],
          "parameters": {
            "userKey": {
              "description": "Identifies the target user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "type": "string",
              "location": "path",
              "required": true
            }
          },
          "path": "admin/directory/v1/users/{userKey}/signOut",
          "flatPath": "admin/directory/v1/users/{userKey}/signOut",
          "httpMethod": "POST",
          "description": "Sign a user out of all web and device sessions and reset their sign-in cookies. User will have to sign in by authenticating again.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ]
        },
        "makeAdmin": {
          "request": {
            "$ref": "UserMakeAdmin"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "description": "Makes a user a super administrator.",
          "id": "directory.users.makeAdmin",
          "parameterOrder": [
            "userKey"
          ],
          "parameters": {
            "userKey": {
              "required": true,
              "location": "path",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "type": "string"
            }
          },
          "flatPath": "admin/directory/v1/users/{userKey}/makeAdmin",
          "path": "admin/directory/v1/users/{userKey}/makeAdmin",
          "httpMethod": "POST"
        },
        "delete": {
          "httpMethod": "DELETE",
          "flatPath": "admin/directory/v1/users/{userKey}",
          "path": "admin/directory/v1/users/{userKey}",
          "parameters": {
            "userKey": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID."
            }
          },
          "parameterOrder": [
            "userKey"
          ],
          "description": "Deletes a user.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "id": "directory.users.delete"
        },
        "update": {
          "request": {
            "$ref": "User"
          },
          "path": "admin/directory/v1/users/{userKey}",
          "id": "directory.users.update",
          "flatPath": "admin/directory/v1/users/{userKey}",
          "description": "Updates a user. This method supports patch semantics, meaning you only need to include the fields you wish to update. Fields that are not present in the request will be preserved, and fields set to `null` will be cleared.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "httpMethod": "PUT",
          "parameters": {
            "userKey": {
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "required": true,
              "type": "string",
              "location": "path"
            }
          },
          "parameterOrder": [
            "userKey"
          ],
          "response": {
            "$ref": "User"
          }
        },
        "undelete": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "parameterOrder": [
            "userKey"
          ],
          "parameters": {
            "userKey": {
              "description": "The immutable id of the user",
              "required": true,
              "type": "string",
              "location": "path"
            }
          },
          "id": "directory.users.undelete",
          "httpMethod": "POST",
          "request": {
            "$ref": "UserUndelete"
          },
          "path": "admin/directory/v1/users/{userKey}/undelete",
          "description": "Undeletes a deleted user.",
          "flatPath": "admin/directory/v1/users/{userKey}/undelete"
        },
        "list": {
          "id": "directory.users.list",
          "response": {
            "$ref": "Users"
          },
          "parameterOrder": [],
          "description": "Retrieves a paginated list of either deleted users or all users in a domain.",
          "parameters": {
            "customFieldMask": {
              "location": "query",
              "type": "string",
              "description": "A comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when `projection=custom`."
            },
            "sortOrder": {
              "location": "query",
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "description": "Whether to return results in ascending or descending order.",
              "type": "string",
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ]
            },
            "domain": {
              "location": "query",
              "description": "The domain name. Use this field to get fields from only one domain. To return all domains for a customer account, use the `customer` query parameter instead. Either the `customer` or the `domain` parameter must be provided.",
              "type": "string"
            },
            "customer": {
              "type": "string",
              "description": "The unique ID for the customer's G Suite account. In case of a multi-domain account, to fetch all groups for a customer, fill this field instead of domain. You can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users). Either the `customer` or the `domain` parameter must be provided.",
              "location": "query"
            },
            "orderBy": {
              "type": "string",
              "location": "query",
              "enumDescriptions": [
                "",
                "Primary email of the user.",
                "User's family name.",
                "User's given name."
              ],
              "enum": [
                "orderByUndefined",
                "email",
                "familyName",
                "givenName"
              ],
              "description": "Property to use for sorting results."
            },
            "viewType": {
              "enumDescriptions": [
                "",
                "Results include both administrator-only and domain-public fields for the user.",
                "Results only include fields for the user that are publicly visible to other users in the domain."
              ],
              "enum": [
                "view_type_undefined",
                "admin_view",
                "domain_public"
              ],
              "location": "query",
              "default": "admin_view",
              "description": "Whether to fetch the administrator-only or domain-wide public view of the user. For more information, see [Retrieve a user as a non-administrator](/admin-sdk/directory/v1/guides/manage-users#retrieve_users_non_admin).",
              "type": "string"
            },
            "query": {
              "description": "Query string for searching user fields. For more information on constructing user queries, see [Search for Users](/admin-sdk/directory/v1/guides/search-users).",
              "location": "query",
              "type": "string"
            },
            "maxResults": {
              "format": "int32",
              "description": "Maximum number of results to return.",
              "type": "integer",
              "minimum": "1",
              "default": "100",
              "maximum": "500",
              "location": "query"
            },
            "showDeleted": {
              "location": "query",
              "description": "If set to `true`, retrieves the list of deleted users. (Default: `false`)",
              "type": "string"
            },
            "pageToken": {
              "location": "query",
              "description": "Token to specify next page in the list",
              "type": "string"
            },
            "projection": {
              "enum": [
                "projectionUndefined",
                "basic",
                "custom",
                "full"
              ],
              "enumDescriptions": [
                "",
                "Do not include any custom fields for the user.",
                "Include custom fields from schemas requested in `customFieldMask`.",
                "Include all fields associated with this user."
              ],
              "location": "query",
              "description": "What subset of fields to fetch for this user.",
              "type": "string",
              "default": "basic"
            }
          },
          "path": "admin/directory/v1/users",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "flatPath": "admin/directory/v1/users",
          "httpMethod": "GET"
        },
        "get": {
          "parameters": {
            "customFieldMask": {
              "location": "query",
              "description": "A comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when `projection=custom`.",
              "type": "string"
            },
            "projection": {
              "default": "basic",
              "enum": [
                "projectionUndefined",
                "basic",
                "custom",
                "full"
              ],
              "enumDescriptions": [
                "",
                "Do not include any custom fields for the user.",
                "Include custom fields from schemas requested in `customFieldMask`.",
                "Include all fields associated with this user."
              ],
              "type": "string",
              "location": "query",
              "description": "What subset of fields to fetch for this user."
            },
            "userKey": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID."
            },
            "viewType": {
              "enumDescriptions": [
                "",
                "Results include both administrator-only and domain-public fields for the user.",
                "Results only include fields for the user that are publicly visible to other users in the domain."
              ],
              "default": "admin_view",
              "location": "query",
              "type": "string",
              "description": "Whether to fetch the administrator-only or domain-wide public view of the user. For more information, see [Retrieve a user as a non-administrator](/admin-sdk/directory/v1/guides/manage-users#retrieve_users_non_admin).",
              "enum": [
                "view_type_undefined",
                "admin_view",
                "domain_public"
              ]
            }
          },
          "parameterOrder": [
            "userKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.readonly"
          ],
          "path": "admin/directory/v1/users/{userKey}",
          "description": "Retrieves a user.",
          "httpMethod": "GET",
          "response": {
            "$ref": "User"
          },
          "id": "directory.users.get",
          "flatPath": "admin/directory/v1/users/{userKey}"
        },
        "patch": {
          "description": "Updates a user using patch semantics. The update method should be used instead, since it also supports patch semantics and has better performance. This method is unable to clear fields that contain repeated objects (`addresses`, `phones`, etc). Use the update method instead.",
          "request": {
            "$ref": "User"
          },
          "parameterOrder": [
            "userKey"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}",
          "httpMethod": "PATCH",
          "parameters": {
            "userKey": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID."
            }
          },
          "path": "admin/directory/v1/users/{userKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "response": {
            "$ref": "User"
          },
          "id": "directory.users.patch"
        },
        "insert": {
          "request": {
            "$ref": "User"
          },
          "flatPath": "admin/directory/v1/users",
          "parameters": {},
          "id": "directory.users.insert",
          "description": "Creates a user.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user"
          ],
          "parameterOrder": [],
          "response": {
            "$ref": "User"
          },
          "httpMethod": "POST",
          "path": "admin/directory/v1/users"
        }
      },
      "resources": {
        "photos": {
          "methods": {
            "patch": {
              "parameters": {
                "userKey": {
                  "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
                  "type": "string",
                  "location": "path",
                  "required": true
                }
              },
              "httpMethod": "PATCH",
              "parameterOrder": [
                "userKey"
              ],
              "request": {
                "$ref": "UserPhoto"
              },
              "description": "Adds a photo for the user. This method supports [patch semantics](/admin-sdk/directory/v1/guides/performance#patch).",
              "id": "directory.users.photos.patch",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user"
              ],
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "response": {
                "$ref": "UserPhoto"
              },
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail"
            },
            "update": {
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "request": {
                "$ref": "UserPhoto"
              },
              "httpMethod": "PUT",
              "id": "directory.users.photos.update",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user"
              ],
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "description": "Adds a photo for the user.",
              "response": {
                "$ref": "UserPhoto"
              },
              "parameterOrder": [
                "userKey"
              ],
              "parameters": {
                "userKey": {
                  "required": true,
                  "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
                  "type": "string",
                  "location": "path"
                }
              }
            },
            "get": {
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "description": "Retrieves the user's photo.",
              "response": {
                "$ref": "UserPhoto"
              },
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "httpMethod": "GET",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.readonly"
              ],
              "id": "directory.users.photos.get",
              "parameterOrder": [
                "userKey"
              ],
              "parameters": {
                "userKey": {
                  "location": "path",
                  "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
                  "required": true,
                  "type": "string"
                }
              }
            },
            "delete": {
              "path": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "httpMethod": "DELETE",
              "parameters": {
                "userKey": {
                  "required": true,
                  "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
                  "type": "string",
                  "location": "path"
                }
              },
              "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user"
              ],
              "id": "directory.users.photos.delete",
              "parameterOrder": [
                "userKey"
              ],
              "description": "Removes the user's photo."
            }
          }
        },
        "aliases": {
          "methods": {
            "insert": {
              "id": "directory.users.aliases.insert",
              "request": {
                "$ref": "Alias"
              },
              "httpMethod": "POST",
              "parameters": {
                "userKey": {
                  "required": true,
                  "type": "string",
                  "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
                  "location": "path"
                }
              },
              "path": "admin/directory/v1/users/{userKey}/aliases",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias"
              ],
              "flatPath": "admin/directory/v1/users/{userKey}/aliases",
              "parameterOrder": [
                "userKey"
              ],
              "response": {
                "$ref": "Alias"
              },
              "description": "Adds an alias."
            },
            "list": {
              "httpMethod": "GET",
              "parameterOrder": [
                "userKey"
              ],
              "parameters": {
                "userKey": {
                  "location": "path",
                  "type": "string",
                  "required": true,
                  "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID."
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias",
                "https://www.googleapis.com/auth/admin.directory.user.alias.readonly",
                "https://www.googleapis.com/auth/admin.directory.user.readonly"
              ],
              "path": "admin/directory/v1/users/{userKey}/aliases",
              "flatPath": "admin/directory/v1/users/{userKey}/aliases",
              "description": "Lists all aliases for a user.",
              "id": "directory.users.aliases.list",
              "response": {
                "$ref": "Aliases"
              }
            },
            "delete": {
              "httpMethod": "DELETE",
              "flatPath": "admin/directory/v1/users/{userKey}/aliases/{alias}",
              "description": "Removes an alias.",
              "parameterOrder": [
                "userKey",
                "alias"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias"
              ],
              "parameters": {
                "alias": {
                  "required": true,
                  "type": "string",
                  "location": "path",
                  "description": "The alias to be removed."
                },
                "userKey": {
                  "location": "path",
                  "required": true,
                  "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
                  "type": "string"
                }
              },
              "id": "directory.users.aliases.delete",
              "path": "admin/directory/v1/users/{userKey}/aliases/{alias}"
            },
            "watch": {
              "httpMethod": "POST",
              "response": {
                "$ref": "Channel"
              },
              "request": {
                "$ref": "Channel"
              },
              "parameterOrder": [
                "userKey"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.user",
                "https://www.googleapis.com/auth/admin.directory.user.alias",
                "https://www.googleapis.com/auth/admin.directory.user.alias.readonly",
                "https://www.googleapis.com/auth/admin.directory.user.readonly"
              ],
              "flatPath": "admin/directory/v1/users/{userKey}/aliases/watch",
              "description": "Watch for changes in users list.",
              "id": "directory.users.aliases.watch",
              "path": "admin/directory/v1/users/{userKey}/aliases/watch",
              "parameters": {
                "event": {
                  "enumDescriptions": [
                    "",
                    "Alias Created Event",
                    "Alias Deleted Event"
                  ],
                  "enum": [
                    "eventUndefined",
                    "add",
                    "delete"
                  ],
                  "type": "string",
                  "description": "Events to watch for.",
                  "location": "query"
                },
                "userKey": {
                  "type": "string",
                  "location": "path",
                  "required": true,
                  "description": "Email or immutable ID of the user"
                }
              }
            }
          }
        }
      }
    },
    "groups": {
      "resources": {
        "aliases": {
          "methods": {
            "list": {
              "parameterOrder": [
                "groupKey"
              ],
              "httpMethod": "GET",
              "description": "Lists all aliases for a group.",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.group",
                "https://www.googleapis.com/auth/admin.directory.group.readonly"
              ],
              "id": "directory.groups.aliases.list",
              "response": {
                "$ref": "Aliases"
              },
              "parameters": {
                "groupKey": {
                  "type": "string",
                  "required": true,
                  "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.",
                  "location": "path"
                }
              },
              "path": "admin/directory/v1/groups/{groupKey}/aliases",
              "flatPath": "admin/directory/v1/groups/{groupKey}/aliases"
            },
            "insert": {
              "id": "directory.groups.aliases.insert",
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.group"
              ],
              "response": {
                "$ref": "Alias"
              },
              "description": "Adds an alias for the group.",
              "request": {
                "$ref": "Alias"
              },
              "httpMethod": "POST",
              "parameters": {
                "groupKey": {
                  "type": "string",
                  "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.",
                  "location": "path",
                  "required": true
                }
              },
              "path": "admin/directory/v1/groups/{groupKey}/aliases",
              "flatPath": "admin/directory/v1/groups/{groupKey}/aliases",
              "parameterOrder": [
                "groupKey"
              ]
            },
            "delete": {
              "parameters": {
                "groupKey": {
                  "location": "path",
                  "required": true,
                  "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.",
                  "type": "string"
                },
                "alias": {
                  "type": "string",
                  "location": "path",
                  "required": true,
                  "description": "The alias to be removed"
                }
              },
              "id": "directory.groups.aliases.delete",
              "httpMethod": "DELETE",
              "path": "admin/directory/v1/groups/{groupKey}/aliases/{alias}",
              "flatPath": "admin/directory/v1/groups/{groupKey}/aliases/{alias}",
              "parameterOrder": [
                "groupKey",
                "alias"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/admin.directory.group"
              ],
              "description": "Removes an alias."
            }
          }
        }
      },
      "methods": {
        "delete": {
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "id": "directory.groups.delete",
          "httpMethod": "DELETE",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "path": "admin/directory/v1/groups/{groupKey}",
          "parameterOrder": [
            "groupKey"
          ],
          "parameters": {
            "groupKey": {
              "required": true,
              "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.",
              "location": "path",
              "type": "string"
            }
          },
          "description": "Deletes a group."
        },
        "get": {
          "description": "Retrieves a group's properties.",
          "parameterOrder": [
            "groupKey"
          ],
          "path": "admin/directory/v1/groups/{groupKey}",
          "response": {
            "$ref": "Group"
          },
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "parameters": {
            "groupKey": {
              "type": "string",
              "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.",
              "location": "path",
              "required": true
            }
          },
          "id": "directory.groups.get",
          "flatPath": "admin/directory/v1/groups/{groupKey}"
        },
        "patch": {
          "request": {
            "$ref": "Group"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "parameterOrder": [
            "groupKey"
          ],
          "httpMethod": "PATCH",
          "description": "Updates a group's properties. This method supports [patch semantics](/admin-sdk/directory/v1/guides/performance#patch).",
          "parameters": {
            "groupKey": {
              "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.",
              "type": "string",
              "location": "path",
              "required": true
            }
          },
          "path": "admin/directory/v1/groups/{groupKey}",
          "response": {
            "$ref": "Group"
          },
          "id": "directory.groups.patch"
        },
        "update": {
          "response": {
            "$ref": "Group"
          },
          "httpMethod": "PUT",
          "path": "admin/directory/v1/groups/{groupKey}",
          "description": "Updates a group's properties.",
          "id": "directory.groups.update",
          "request": {
            "$ref": "Group"
          },
          "parameters": {
            "groupKey": {
              "location": "path",
              "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.",
              "type": "string",
              "required": true
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "flatPath": "admin/directory/v1/groups/{groupKey}",
          "parameterOrder": [
            "groupKey"
          ]
        },
        "list": {
          "parameters": {
            "domain": {
              "type": "string",
              "location": "query",
              "description": "The domain name. Use this field to get fields from only one domain. To return all domains for a customer account, use the `customer` query parameter instead."
            },
            "pageToken": {
              "location": "query",
              "type": "string",
              "description": "Token to specify next page in the list"
            },
            "query": {
              "location": "query",
              "type": "string",
              "description": "Query string search. Should be of the form \"\". Complete documentation is at https: //developers.google.com/admin-sdk/directory/v1/guides/search-groups"
            },
            "orderBy": {
              "description": "Column to use for sorting results",
              "type": "string",
              "enumDescriptions": [
                "",
                "Email of the group."
              ],
              "location": "query",
              "enum": [
                "orderByUndefined",
                "email"
              ]
            },
            "sortOrder": {
              "description": "Whether to return results in ascending or descending order. Only of use when orderBy is also used",
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ],
              "type": "string",
              "location": "query",
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ]
            },
            "userKey": {
              "description": "Email or immutable ID of the user if only those groups are to be listed, the given user is a member of. If it's an ID, it should match with the ID of the user object.",
              "location": "query",
              "type": "string"
            },
            "maxResults": {
              "format": "int32",
              "location": "query",
              "minimum": "1",
              "type": "integer",
              "description": "Maximum number of results to return. Max allowed value is 200.",
              "default": "200"
            },
            "customer": {
              "type": "string",
              "location": "query",
              "description": "The unique ID for the customer's G Suite account. In case of a multi-domain account, to fetch all groups for a customer, fill this field instead of domain. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users](/admin-sdk/directory/v1/reference/users)"
            }
          },
          "response": {
            "$ref": "Groups"
          },
          "id": "directory.groups.list",
          "flatPath": "admin/directory/v1/groups",
          "httpMethod": "GET",
          "parameterOrder": [],
          "description": "Retrieve all groups of a domain or of a user given a userKey (paginated)",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "path": "admin/directory/v1/groups"
        },
        "insert": {
          "parameters": {},
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group"
          ],
          "id": "directory.groups.insert",
          "path": "admin/directory/v1/groups",
          "response": {
            "$ref": "Group"
          },
          "request": {
            "$ref": "Group"
          },
          "httpMethod": "POST",
          "parameterOrder": [],
          "flatPath": "admin/directory/v1/groups",
          "description": "Creates a group."
        }
      }
    },
    "schemas": {
      "methods": {
        "list": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema",
            "https://www.googleapis.com/auth/admin.directory.userschema.readonly"
          ],
          "path": "admin/directory/v1/customer/{customerId}/schemas",
          "description": "Retrieve all schemas for a customer",
          "response": {
            "$ref": "Schemas"
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas",
          "httpMethod": "GET",
          "parameterOrder": [
            "customerId"
          ],
          "id": "directory.schemas.list",
          "parameters": {
            "customerId": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Immutable ID of the G Suite account."
            }
          }
        },
        "get": {
          "id": "directory.schemas.get",
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "description": "Retrieve schema",
          "response": {
            "$ref": "Schema"
          },
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "parameters": {
            "customerId": {
              "required": true,
              "description": "Immutable ID of the G Suite account.",
              "type": "string",
              "location": "path"
            },
            "schemaKey": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "Name or immutable ID of the schema."
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema",
            "https://www.googleapis.com/auth/admin.directory.userschema.readonly"
          ],
          "httpMethod": "GET"
        },
        "patch": {
          "response": {
            "$ref": "Schema"
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "description": "Patch Schema via Apiary Patch Orchestration",
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "request": {
            "$ref": "Schema"
          },
          "parameters": {
            "customerId": {
              "required": true,
              "description": "Immutable ID of the G Suite account.",
              "type": "string",
              "location": "path"
            },
            "schemaKey": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Name or immutable ID of the schema."
            }
          },
          "id": "directory.schemas.patch",
          "httpMethod": "PATCH",
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ]
        },
        "insert": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "response": {
            "$ref": "Schema"
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas",
          "description": "Create schema.",
          "path": "admin/directory/v1/customer/{customerId}/schemas",
          "parameterOrder": [
            "customerId"
          ],
          "httpMethod": "POST",
          "id": "directory.schemas.insert",
          "parameters": {
            "customerId": {
              "description": "Immutable ID of the G Suite account.",
              "location": "path",
              "type": "string",
              "required": true
            }
          },
          "request": {
            "$ref": "Schema"
          }
        },
        "update": {
          "description": "Update schema",
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "parameters": {
            "schemaKey": {
              "description": "Name or immutable ID of the schema.",
              "required": true,
              "location": "path",
              "type": "string"
            },
            "customerId": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Immutable ID of the G Suite account."
            }
          },
          "response": {
            "$ref": "Schema"
          },
          "request": {
            "$ref": "Schema"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "httpMethod": "PUT",
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "id": "directory.schemas.update"
        },
        "delete": {
          "httpMethod": "DELETE",
          "path": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "parameterOrder": [
            "customerId",
            "schemaKey"
          ],
          "parameters": {
            "schemaKey": {
              "type": "string",
              "location": "path",
              "description": "Name or immutable ID of the schema.",
              "required": true
            },
            "customerId": {
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the G Suite account.",
              "required": true
            }
          },
          "id": "directory.schemas.delete",
          "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
          "description": "Delete schema",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.userschema"
          ]
        }
      }
    },
    "tokens": {
      "methods": {
        "get": {
          "description": "Get information about an access token issued by a user.",
          "path": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "id": "directory.tokens.get",
          "response": {
            "$ref": "Token"
          },
          "parameters": {
            "clientId": {
              "required": true,
              "description": "The Client ID of the application the token is issued to.",
              "location": "path",
              "type": "string"
            },
            "userKey": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID."
            }
          },
          "httpMethod": "GET",
          "parameterOrder": [
            "userKey",
            "clientId"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}/tokens/{clientId}"
        },
        "list": {
          "parameterOrder": [
            "userKey"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}/tokens",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "parameters": {
            "userKey": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID."
            }
          },
          "httpMethod": "GET",
          "path": "admin/directory/v1/users/{userKey}/tokens",
          "id": "directory.tokens.list",
          "response": {
            "$ref": "Tokens"
          },
          "description": "Returns the set of tokens specified user has issued to 3rd party applications."
        },
        "delete": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "description": "Delete all access tokens issued by a user for an application.",
          "path": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "flatPath": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
          "parameterOrder": [
            "userKey",
            "clientId"
          ],
          "httpMethod": "DELETE",
          "id": "directory.tokens.delete",
          "parameters": {
            "userKey": {
              "location": "path",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "type": "string",
              "required": true
            },
            "clientId": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "The Client ID of the application the token is issued to."
            }
          }
        }
      }
    },
    "roleAssignments": {
      "methods": {
        "delete": {
          "parameters": {
            "customer": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account."
            },
            "roleAssignmentId": {
              "required": true,
              "location": "path",
              "description": "Immutable ID of the role assignment.",
              "type": "string"
            }
          },
          "parameterOrder": [
            "customer",
            "roleAssignmentId"
          ],
          "path": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "id": "directory.roleAssignments.delete",
          "httpMethod": "DELETE",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "description": "Deletes a role assignment.",
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}"
        },
        "get": {
          "parameters": {
            "roleAssignmentId": {
              "required": true,
              "description": "Immutable ID of the role assignment.",
              "location": "path",
              "type": "string"
            },
            "customer": {
              "type": "string",
              "required": true,
              "description": "Immutable ID of the G Suite account.",
              "location": "path"
            }
          },
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "path": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
          "id": "directory.roleAssignments.get",
          "response": {
            "$ref": "RoleAssignment"
          },
          "parameterOrder": [
            "customer",
            "roleAssignmentId"
          ],
          "description": "Retrieve a role assignment."
        },
        "insert": {
          "parameters": {
            "customer": {
              "required": true,
              "description": "Immutable ID of the G Suite account.",
              "location": "path",
              "type": "string"
            }
          },
          "description": "Creates a role assignment.",
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "id": "directory.roleAssignments.insert",
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments",
          "parameterOrder": [
            "customer"
          ],
          "request": {
            "$ref": "RoleAssignment"
          },
          "response": {
            "$ref": "RoleAssignment"
          },
          "path": "admin/directory/v1/customer/{customer}/roleassignments"
        },
        "list": {
          "path": "admin/directory/v1/customer/{customer}/roleassignments",
          "id": "directory.roleAssignments.list",
          "description": "Retrieves a paginated list of all roleAssignments.",
          "response": {
            "$ref": "RoleAssignments"
          },
          "parameters": {
            "maxResults": {
              "minimum": "1",
              "type": "integer",
              "maximum": "200",
              "location": "query",
              "format": "int32",
              "description": "Maximum number of results to return."
            },
            "pageToken": {
              "location": "query",
              "description": "Token to specify the next page in the list.",
              "type": "string"
            },
            "roleId": {
              "type": "string",
              "location": "query",
              "description": "Immutable ID of a role. If included in the request, returns only role assignments containing this role ID."
            },
            "userKey": {
              "location": "query",
              "description": "The user's primary email address, alias email address, or unique user ID. If included in the request, returns role assignments only for this user.",
              "type": "string"
            },
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "required": true,
              "location": "path",
              "type": "string"
            }
          },
          "parameterOrder": [
            "customer"
          ],
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/roleassignments"
        }
      }
    },
    "domainAliases": {
      "methods": {
        "list": {
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "path": "admin/directory/v1/customer/{customer}/domainaliases",
          "id": "directory.domainAliases.list",
          "response": {
            "$ref": "DomainAliases"
          },
          "parameters": {
            "customer": {
              "type": "string",
              "description": "Immutable ID of the G Suite account.",
              "location": "path",
              "required": true
            },
            "parentDomainName": {
              "description": "Name of the parent domain for which domain aliases are to be fetched.",
              "type": "string",
              "location": "query"
            }
          },
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases",
          "description": "Lists the domain aliases of the customer.",
          "parameterOrder": [
            "customer"
          ]
        },
        "delete": {
          "httpMethod": "DELETE",
          "description": "Deletes a domain Alias of the customer.",
          "path": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "id": "directory.domainAliases.delete",
          "parameterOrder": [
            "customer",
            "domainAliasName"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "parameters": {
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "type": "string",
              "location": "path",
              "required": true
            },
            "domainAliasName": {
              "location": "path",
              "description": "Name of domain alias to be retrieved.",
              "type": "string",
              "required": true
            }
          }
        },
        "get": {
          "parameterOrder": [
            "customer",
            "domainAliasName"
          ],
          "parameters": {
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "type": "string",
              "location": "path",
              "required": true
            },
            "domainAliasName": {
              "type": "string",
              "description": "Name of domain alias to be retrieved.",
              "location": "path",
              "required": true
            }
          },
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "response": {
            "$ref": "DomainAlias"
          },
          "path": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
          "httpMethod": "GET",
          "id": "directory.domainAliases.get",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "description": "Retrieves a domain alias of the customer."
        },
        "insert": {
          "request": {
            "$ref": "DomainAlias"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "parameterOrder": [
            "customer"
          ],
          "response": {
            "$ref": "DomainAlias"
          },
          "id": "directory.domainAliases.insert",
          "description": "Inserts a domain alias of the customer.",
          "parameters": {
            "customer": {
              "required": true,
              "type": "string",
              "description": "Immutable ID of the G Suite account.",
              "location": "path"
            }
          },
          "flatPath": "admin/directory/v1/customer/{customer}/domainaliases",
          "path": "admin/directory/v1/customer/{customer}/domainaliases",
          "httpMethod": "POST"
        }
      }
    },
    "twoStepVerification": {
      "methods": {
        "turnOff": {
          "description": "Turn off 2-Step Verification for user.",
          "path": "admin/directory/v1/users/{userKey}/twoStepVerification/turnOff",
          "id": "directory.twoStepVerification.turnOff",
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}/twoStepVerification/turnOff",
          "parameterOrder": [
            "userKey"
          ],
          "parameters": {
            "userKey": {
              "type": "string",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "required": true,
              "location": "path"
            }
          }
        }
      }
    },
    "privileges": {
      "methods": {
        "list": {
          "flatPath": "admin/directory/v1/customer/{customer}/roles/ALL/privileges",
          "response": {
            "$ref": "Privileges"
          },
          "id": "directory.privileges.list",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "parameters": {
            "customer": {
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the G Suite account.",
              "required": true
            }
          },
          "parameterOrder": [
            "customer"
          ],
          "description": "Retrieves a paginated list of all privileges for a customer.",
          "httpMethod": "GET",
          "path": "admin/directory/v1/customer/{customer}/roles/ALL/privileges"
        }
      }
    },
    "verificationCodes": {
      "methods": {
        "generate": {
          "httpMethod": "POST",
          "parameters": {
            "userKey": {
              "location": "path",
              "description": "Email or immutable ID of the user",
              "type": "string",
              "required": true
            }
          },
          "flatPath": "admin/directory/v1/users/{userKey}/verificationCodes/generate",
          "parameterOrder": [
            "userKey"
          ],
          "id": "directory.verificationCodes.generate",
          "description": "Generate new backup verification codes for the user.",
          "path": "admin/directory/v1/users/{userKey}/verificationCodes/generate",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ]
        },
        "invalidate": {
          "id": "directory.verificationCodes.invalidate",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "httpMethod": "POST",
          "path": "admin/directory/v1/users/{userKey}/verificationCodes/invalidate",
          "parameters": {
            "userKey": {
              "description": "Email or immutable ID of the user",
              "required": true,
              "type": "string",
              "location": "path"
            }
          },
          "flatPath": "admin/directory/v1/users/{userKey}/verificationCodes/invalidate",
          "description": "Invalidate the current backup verification codes for the user.",
          "parameterOrder": [
            "userKey"
          ]
        },
        "list": {
          "parameterOrder": [
            "userKey"
          ],
          "path": "admin/directory/v1/users/{userKey}/verificationCodes",
          "parameters": {
            "userKey": {
              "location": "path",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "type": "string",
              "required": true
            }
          },
          "id": "directory.verificationCodes.list",
          "response": {
            "$ref": "VerificationCodes"
          },
          "flatPath": "admin/directory/v1/users/{userKey}/verificationCodes",
          "description": "Returns the current set of valid backup verification codes for the specified user.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "httpMethod": "GET"
        }
      }
    },
    "roles": {
      "methods": {
        "patch": {
          "request": {
            "$ref": "Role"
          },
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "id": "directory.roles.patch",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "description": "Patch role via Apiary Patch Orchestration",
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "response": {
            "$ref": "Role"
          },
          "httpMethod": "PATCH",
          "parameters": {
            "roleId": {
              "type": "string",
              "description": "Immutable ID of the role.",
              "location": "path",
              "required": true
            },
            "customer": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the G Suite account."
            }
          },
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}"
        },
        "insert": {
          "request": {
            "$ref": "Role"
          },
          "response": {
            "$ref": "Role"
          },
          "parameters": {
            "customer": {
              "required": true,
              "location": "path",
              "description": "Immutable ID of the G Suite account.",
              "type": "string"
            }
          },
          "path": "admin/directory/v1/customer/{customer}/roles",
          "httpMethod": "POST",
          "id": "directory.roles.insert",
          "flatPath": "admin/directory/v1/customer/{customer}/roles",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "description": "Creates a role.",
          "parameterOrder": [
            "customer"
          ]
        },
        "update": {
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "id": "directory.roles.update",
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "response": {
            "$ref": "Role"
          },
          "description": "Updates a role.",
          "parameters": {
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "type": "string",
              "location": "path",
              "required": true
            },
            "roleId": {
              "type": "string",
              "description": "Immutable ID of the role.",
              "location": "path",
              "required": true
            }
          },
          "httpMethod": "PUT",
          "request": {
            "$ref": "Role"
          }
        },
        "list": {
          "id": "directory.roles.list",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "parameterOrder": [
            "customer"
          ],
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/customer/{customer}/roles",
          "description": "Retrieves a paginated list of all the roles in a domain.",
          "path": "admin/directory/v1/customer/{customer}/roles",
          "parameters": {
            "customer": {
              "location": "path",
              "type": "string",
              "description": "Immutable ID of the G Suite account.",
              "required": true
            },
            "maxResults": {
              "type": "integer",
              "format": "int32",
              "minimum": "1",
              "maximum": "100",
              "description": "Maximum number of results to return.",
              "location": "query"
            },
            "pageToken": {
              "type": "string",
              "location": "query",
              "description": "Token to specify the next page in the list."
            }
          },
          "response": {
            "$ref": "Roles"
          }
        },
        "delete": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement"
          ],
          "parameterOrder": [
            "customer",
            "roleId"
          ],
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "parameters": {
            "customer": {
              "required": true,
              "description": "Immutable ID of the G Suite account.",
              "location": "path",
              "type": "string"
            },
            "roleId": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "Immutable ID of the role."
            }
          },
          "description": "Deletes a role.",
          "id": "directory.roles.delete",
          "httpMethod": "DELETE"
        },
        "get": {
          "id": "directory.roles.get",
          "path": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "response": {
            "$ref": "Role"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.rolemanagement",
            "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly"
          ],
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
          "parameters": {
            "customer": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Immutable ID of the G Suite account."
            },
            "roleId": {
              "description": "Immutable ID of the role.",
              "required": true,
              "location": "path",
              "type": "string"
            }
          },
          "description": "Retrieves a role.",
          "parameterOrder": [
            "customer",
            "roleId"
          ]
        }
      }
    },
    "channels": {
      "methods": {
        "stop": {
          "flatPath": "admin/directory_v1/channels/stop",
          "parameters": {},
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user",
            "https://www.googleapis.com/auth/admin.directory.user.alias",
            "https://www.googleapis.com/auth/admin.directory.user.alias.readonly",
            "https://www.googleapis.com/auth/admin.directory.user.readonly",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "description": "Stop watching resources through this channel.",
          "path": "admin/directory_v1/channels/stop",
          "parameterOrder": [],
          "httpMethod": "POST",
          "id": "admin.channels.stop",
          "request": {
            "$ref": "Channel"
          }
        }
      }
    },
    "asps": {
      "methods": {
        "list": {
          "path": "admin/directory/v1/users/{userKey}/asps",
          "id": "directory.asps.list",
          "flatPath": "admin/directory/v1/users/{userKey}/asps",
          "description": "List the ASPs issued by a user.",
          "httpMethod": "GET",
          "parameters": {
            "userKey": {
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "required": true,
              "location": "path",
              "type": "string"
            }
          },
          "response": {
            "$ref": "Asps"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "parameterOrder": [
            "userKey"
          ]
        },
        "delete": {
          "httpMethod": "DELETE",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "description": "Delete an ASP issued by a user.",
          "id": "directory.asps.delete",
          "path": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "parameters": {
            "codeId": {
              "type": "integer",
              "format": "int32",
              "location": "path",
              "description": "The unique ID of the ASP to be deleted.",
              "required": true
            },
            "userKey": {
              "required": true,
              "location": "path",
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "type": "string"
            }
          },
          "parameterOrder": [
            "userKey",
            "codeId"
          ],
          "flatPath": "admin/directory/v1/users/{userKey}/asps/{codeId}"
        },
        "get": {
          "parameters": {
            "codeId": {
              "required": true,
              "format": "int32",
              "type": "integer",
              "location": "path",
              "description": "The unique ID of the ASP."
            },
            "userKey": {
              "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
              "required": true,
              "type": "string",
              "location": "path"
            }
          },
          "description": "Get information about an ASP issued by a user.",
          "id": "directory.asps.get",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.user.security"
          ],
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/users/{userKey}/asps/{codeId}",
          "response": {
            "$ref": "Asp"
          },
          "parameterOrder": [
            "userKey",
            "codeId"
          ],
          "path": "admin/directory/v1/users/{userKey}/asps/{codeId}"
        }
      }
    },
    "orgunits": {
      "methods": {
        "update": {
          "parameters": {
            "customerId": {
              "type": "string",
              "location": "path",
              "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).",
              "required": true
            },
            "orgUnitPath": {
              "location": "path",
              "pattern": "^.*$",
              "type": "string",
              "description": "The full path of the organizational unit or its unique ID.",
              "required": true
            }
          },
          "response": {
            "$ref": "OrgUnit"
          },
          "description": "Updates an organizational unit.",
          "httpMethod": "PUT",
          "request": {
            "$ref": "OrgUnit"
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "id": "directory.orgunits.update",
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ]
        },
        "get": {
          "parameters": {
            "orgUnitPath": {
              "location": "path",
              "description": "The full path of the organizational unit or its unique ID.",
              "required": true,
              "pattern": "^.*$",
              "type": "string"
            },
            "customerId": {
              "required": true,
              "location": "path",
              "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).",
              "type": "string"
            }
          },
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "id": "directory.orgunits.get",
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit",
            "https://www.googleapis.com/auth/admin.directory.orgunit.readonly"
          ],
          "description": "Retrieves an organizational unit.",
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "response": {
            "$ref": "OrgUnit"
          },
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ]
        },
        "insert": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "request": {
            "$ref": "OrgUnit"
          },
          "parameterOrder": [
            "customerId"
          ],
          "id": "directory.orgunits.insert",
          "parameters": {
            "customerId": {
              "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).",
              "type": "string",
              "required": true,
              "location": "path"
            }
          },
          "response": {
            "$ref": "OrgUnit"
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits",
          "path": "admin/directory/v1/customer/{customerId}/orgunits",
          "httpMethod": "POST",
          "description": "Adds an organizational unit."
        },
        "patch": {
          "httpMethod": "PATCH",
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "parameters": {
            "orgUnitPath": {
              "description": "The full path of the organizational unit or its unique ID.",
              "required": true,
              "pattern": "^.*$",
              "location": "path",
              "type": "string"
            },
            "customerId": {
              "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "request": {
            "$ref": "OrgUnit"
          },
          "id": "directory.orgunits.patch",
          "response": {
            "$ref": "OrgUnit"
          },
          "description": "Updates an organizational unit. This method supports [patch semantics](/admin-sdk/directory/v1/guides/performance#patch)",
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ]
        },
        "list": {
          "parameterOrder": [
            "customerId"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit",
            "https://www.googleapis.com/auth/admin.directory.orgunit.readonly"
          ],
          "response": {
            "$ref": "OrgUnits"
          },
          "parameters": {
            "orgUnitPath": {
              "type": "string",
              "location": "query",
              "description": "The full path to the organizational unit or its unique ID. Returns the children of the specified organizational unit.",
              "default": ""
            },
            "customerId": {
              "type": "string",
              "required": true,
              "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).",
              "location": "path"
            },
            "type": {
              "description": "Whether to return all sub-organizations or just immediate children.",
              "enumDescriptions": [
                "",
                "All sub-organizational units.",
                "Immediate children only (default)."
              ],
              "type": "string",
              "location": "query",
              "enum": [
                "typeUndefined",
                "all",
                "children"
              ]
            }
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits",
          "httpMethod": "GET",
          "id": "directory.orgunits.list",
          "path": "admin/directory/v1/customer/{customerId}/orgunits",
          "description": "Retrieves a list of all organizational units for an account."
        },
        "delete": {
          "parameters": {
            "customerId": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users)."
            },
            "orgUnitPath": {
              "pattern": "^.*$",
              "description": "The full path of the organizational unit or its unique ID.",
              "location": "path",
              "type": "string",
              "required": true
            }
          },
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "description": "Removes an organizational unit.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.orgunit"
          ],
          "id": "directory.orgunits.delete",
          "path": "admin/directory/v1/customer/{customerId}/orgunits/{+orgUnitPath}",
          "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
          "httpMethod": "DELETE"
        }
      }
    },
    "customer": {
      "resources": {
        "devices": {
          "resources": {
            "chromeos": {
              "resources": {
                "commands": {
                  "methods": {
                    "get": {
                      "parameterOrder": [
                        "customerId",
                        "deviceId",
                        "commandId"
                      ],
                      "scopes": [
                        "https://www.googleapis.com/auth/admin.directory.device.chromeos",
                        "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly"
                      ],
                      "parameters": {
                        "commandId": {
                          "location": "path",
                          "type": "string",
                          "format": "int64",
                          "description": "Immutable. Immutable ID of Chrome OS Device Command.",
                          "required": true
                        },
                        "deviceId": {
                          "required": true,
                          "location": "path",
                          "type": "string",
                          "description": "Immutable. Immutable ID of Chrome OS Device."
                        },
                        "customerId": {
                          "location": "path",
                          "required": true,
                          "type": "string",
                          "description": "Immutable. Immutable ID of the G Suite account."
                        }
                      },
                      "httpMethod": "GET",
                      "response": {
                        "$ref": "DirectoryChromeosdevicesCommand"
                      },
                      "description": "Gets command data a specific command issued to the device.",
                      "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}/commands/{commandId}",
                      "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}/commands/{commandId}",
                      "id": "admin.customer.devices.chromeos.commands.get"
                    }
                  }
                }
              },
              "methods": {
                "issueCommand": {
                  "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}:issueCommand",
                  "response": {
                    "$ref": "DirectoryChromeosdevicesIssueCommandResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/admin.directory.device.chromeos"
                  ],
                  "parameters": {
                    "deviceId": {
                      "required": true,
                      "type": "string",
                      "description": "Immutable. Immutable ID of Chrome OS Device.",
                      "location": "path"
                    },
                    "customerId": {
                      "required": true,
                      "description": "Immutable. Immutable ID of the G Suite account.",
                      "type": "string",
                      "location": "path"
                    }
                  },
                  "httpMethod": "POST",
                  "description": "Issues a command for the device to execute.",
                  "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}:issueCommand",
                  "request": {
                    "$ref": "DirectoryChromeosdevicesIssueCommandRequest"
                  },
                  "parameterOrder": [
                    "customerId",
                    "deviceId"
                  ],
                  "id": "admin.customer.devices.chromeos.issueCommand"
                }
              }
            }
          }
        }
      }
    },
    "chromeosdevices": {
      "methods": {
        "patch": {
          "response": {
            "$ref": "ChromeOsDevice"
          },
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "request": {
            "$ref": "ChromeOsDevice"
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "description": "Updates a device's updatable properties, such as `annotatedUser`, `annotatedLocation`, `notes`, `orgUnitPath`, or `annotatedAssetId`. This method supports [patch semantics](/admin-sdk/directory/v1/guides/performance#patch).",
          "parameters": {
            "deviceId": {
              "description": "The unique ID of the device. The `deviceId`s are returned in the response from the [chromeosdevices.list](/admin-sdk/v1/reference/chromeosdevices/list) method.",
              "location": "path",
              "type": "string",
              "required": true
            },
            "customerId": {
              "required": true,
              "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).",
              "type": "string",
              "location": "path"
            },
            "projection": {
              "type": "string",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "location": "query",
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ],
              "description": "Restrict information returned to a set of selected fields."
            }
          },
          "httpMethod": "PATCH",
          "id": "directory.chromeosdevices.patch",
          "parameterOrder": [
            "customerId",
            "deviceId"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ]
        },
        "list": {
          "parameterOrder": [
            "customerId"
          ],
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos",
          "description": "Retrieves a paginated list of Chrome OS devices within an account.",
          "response": {
            "$ref": "ChromeOsDevices"
          },
          "httpMethod": "GET",
          "id": "directory.chromeosdevices.list",
          "parameters": {
            "sortOrder": {
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ],
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "location": "query",
              "description": "Whether to return results in ascending or descending order. Must be used with the `orderBy` parameter.",
              "type": "string"
            },
            "query": {
              "description": "Search string in the format given at http://support.google.com/chromeos/a/bin/answer.py?answer=1698333",
              "location": "query",
              "type": "string"
            },
            "orderBy": {
              "enum": [
                "orderByUndefined",
                "annotatedLocation",
                "annotatedUser",
                "lastSync",
                "notes",
                "serialNumber",
                "status",
                "supportEndDate"
              ],
              "location": "query",
              "type": "string",
              "enumDescriptions": [
                "",
                "Chrome device location as annotated by the administrator.",
                "Chromebook user as annotated by administrator.",
                "The date and time the Chrome device was last synchronized with the policy settings in the Admin console.",
                "Chrome device notes as annotated by the administrator.",
                "The Chrome device serial number entered when the device was enabled.",
                "Chrome device status. For more information, see the \u003ca [chromeosdevices](/admin-sdk/directory/v1/reference/chromeosdevices.html).",
                "Chrome device support end date. This is applicable only for devices purchased directly from Google."
              ],
              "description": "Device property to use for sorting results."
            },
            "orgUnitPath": {
              "type": "string",
              "description": "The full path of the organizational unit or its unique ID.",
              "location": "query"
            },
            "pageToken": {
              "description": "The `pageToken` query parameter is used to request the next page of query results. The follow-on request's `pageToken` query parameter is the `nextPageToken` from your previous response.",
              "type": "string",
              "location": "query"
            },
            "projection": {
              "description": "Restrict information returned to a set of selected fields.",
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ],
              "location": "query",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "type": "string"
            },
            "customerId": {
              "location": "path",
              "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).",
              "required": true,
              "type": "string"
            },
            "maxResults": {
              "minimum": "1",
              "description": "Maximum number of results to return.",
              "format": "int32",
              "location": "query",
              "default": "100",
              "type": "integer"
            }
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos",
            "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly"
          ]
        },
        "update": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "parameters": {
            "deviceId": {
              "description": "The unique ID of the device. The `deviceId`s are returned in the response from the [chromeosdevices.list](/admin-sdk/v1/reference/chromeosdevices/list) method.",
              "required": true,
              "location": "path",
              "type": "string"
            },
            "projection": {
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "description": "Restrict information returned to a set of selected fields.",
              "location": "query",
              "type": "string",
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ]
            },
            "customerId": {
              "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).",
              "type": "string",
              "required": true,
              "location": "path"
            }
          },
          "id": "directory.chromeosdevices.update",
          "parameterOrder": [
            "customerId",
            "deviceId"
          ],
          "httpMethod": "PUT",
          "response": {
            "$ref": "ChromeOsDevice"
          },
          "request": {
            "$ref": "ChromeOsDevice"
          },
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "description": "Updates a device's updatable properties, such as `annotatedUser`, `annotatedLocation`, `notes`, `orgUnitPath`, or `annotatedAssetId`."
        },
        "action": {
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{resourceId}/action",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{resourceId}/action",
          "request": {
            "$ref": "ChromeOsDeviceAction"
          },
          "id": "directory.chromeosdevices.action",
          "parameters": {
            "customerId": {
              "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).",
              "required": true,
              "type": "string",
              "location": "path"
            },
            "resourceId": {
              "required": true,
              "location": "path",
              "description": "The unique ID of the device. The `resourceId`s are returned in the response from the [chromeosdevices.list](/admin-sdk/directory/v1/reference/chromeosdevices/list) method.",
              "type": "string"
            }
          },
          "httpMethod": "POST",
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "description": "Takes an action that affects a Chrome OS Device. This includes deprovisioning, disabling, and re-enabling devices. *Warning:* * Deprovisioning a device will stop device policy syncing and remove device-level printers. After a device is deprovisioned, it must be wiped before it can be re-enrolled. * Lost or stolen devices should use the disable action. * Re-enabling a disabled device will consume a device license. If you do not have sufficient licenses available when completing the re-enable action, you will receive an error. For more information about deprovisioning and disabling devices, visit the [help center](https://support.google.com/chrome/a/answer/3523633)."
        },
        "moveDevicesToOu": {
          "request": {
            "$ref": "ChromeOsMoveDevicesToOu"
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/moveDevicesToOu",
          "id": "directory.chromeosdevices.moveDevicesToOu",
          "httpMethod": "POST",
          "description": "Move or insert multiple Chrome OS devices to an organizational unit. You can move up to 50 devices at once.",
          "parameters": {
            "customerId": {
              "type": "string",
              "description": "Immutable ID of the G Suite account",
              "location": "path",
              "required": true
            },
            "orgUnitPath": {
              "required": true,
              "location": "query",
              "type": "string",
              "description": "Full path of the target organizational unit or its ID"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos"
          ],
          "parameterOrder": [
            "customerId",
            "orgUnitPath"
          ],
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/moveDevicesToOu"
        },
        "get": {
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.chromeos",
            "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly"
          ],
          "response": {
            "$ref": "ChromeOsDevice"
          },
          "description": "Retrieves a Chrome OS device's properties.",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
          "id": "directory.chromeosdevices.get",
          "parameterOrder": [
            "customerId",
            "deviceId"
          ],
          "parameters": {
            "deviceId": {
              "required": true,
              "type": "string",
              "description": "The unique ID of the device. The `deviceId`s are returned in the response from the [chromeosdevices.list](/admin-sdk/directory/v1/reference/chromeosdevices/list) method.",
              "location": "path"
            },
            "customerId": {
              "location": "path",
              "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).",
              "required": true,
              "type": "string"
            },
            "projection": {
              "description": "Determines whether the response contains the full list of properties or only a subset.",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, serialNumber, status, and user)",
                "Includes all metadata fields"
              ],
              "type": "string",
              "location": "query"
            }
          },
          "path": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}"
        }
      }
    },
    "domains": {
      "methods": {
        "insert": {
          "id": "directory.domains.insert",
          "flatPath": "admin/directory/v1/customer/{customer}/domains",
          "parameterOrder": [
            "customer"
          ],
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "description": "Inserts a domain of the customer.",
          "request": {
            "$ref": "Domains"
          },
          "response": {
            "$ref": "Domains"
          },
          "parameters": {
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "required": true,
              "type": "string",
              "location": "path"
            }
          },
          "path": "admin/directory/v1/customer/{customer}/domains"
        },
        "get": {
          "httpMethod": "GET",
          "description": "Retrieves a domain of the customer.",
          "parameters": {
            "customer": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "Immutable ID of the G Suite account."
            },
            "domainName": {
              "description": "Name of domain to be retrieved",
              "type": "string",
              "location": "path",
              "required": true
            }
          },
          "id": "directory.domains.get",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ],
          "path": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "response": {
            "$ref": "Domains"
          },
          "parameterOrder": [
            "customer",
            "domainName"
          ],
          "flatPath": "admin/directory/v1/customer/{customer}/domains/{domainName}"
        },
        "list": {
          "parameters": {
            "customer": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Immutable ID of the G Suite account."
            }
          },
          "parameterOrder": [
            "customer"
          ],
          "path": "admin/directory/v1/customer/{customer}/domains",
          "flatPath": "admin/directory/v1/customer/{customer}/domains",
          "httpMethod": "GET",
          "response": {
            "$ref": "Domains2"
          },
          "description": "Lists the domains of the customer.",
          "id": "directory.domains.list",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain",
            "https://www.googleapis.com/auth/admin.directory.domain.readonly"
          ]
        },
        "delete": {
          "httpMethod": "DELETE",
          "id": "directory.domains.delete",
          "flatPath": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "parameterOrder": [
            "customer",
            "domainName"
          ],
          "path": "admin/directory/v1/customer/{customer}/domains/{domainName}",
          "parameters": {
            "domainName": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Name of domain to be deleted"
            },
            "customer": {
              "description": "Immutable ID of the G Suite account.",
              "type": "string",
              "required": true,
              "location": "path"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.domain"
          ],
          "description": "Deletes a domain of the customer."
        }
      }
    },
    "members": {
      "methods": {
        "get": {
          "id": "directory.members.get",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member",
            "https://www.googleapis.com/auth/admin.directory.group.member.readonly",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "httpMethod": "GET",
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "parameters": {
            "memberKey": {
              "description": "Identifies the group member in the API request. A group member can be a user or another group. The value can be the member's (group or user) primary email address, alias, or unique ID.",
              "type": "string",
              "location": "path",
              "required": true
            },
            "groupKey": {
              "location": "path",
              "type": "string",
              "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.",
              "required": true
            }
          },
          "response": {
            "$ref": "Member"
          },
          "description": "Retrieves a group member's properties."
        },
        "insert": {
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "parameters": {
            "groupKey": {
              "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.",
              "type": "string",
              "location": "path",
              "required": true
            }
          },
          "response": {
            "$ref": "Member"
          },
          "path": "admin/directory/v1/groups/{groupKey}/members",
          "httpMethod": "POST",
          "request": {
            "$ref": "Member"
          },
          "parameterOrder": [
            "groupKey"
          ],
          "flatPath": "admin/directory/v1/groups/{groupKey}/members",
          "id": "directory.members.insert",
          "description": "Adds a user to the specified group."
        },
        "delete": {
          "description": "Removes a member from a group.",
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "id": "directory.members.delete",
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "httpMethod": "DELETE",
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "parameters": {
            "groupKey": {
              "required": true,
              "type": "string",
              "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.",
              "location": "path"
            },
            "memberKey": {
              "description": "Identifies the group member in the API request. A group member can be a user or another group. The value can be the member's (group or user) primary email address, alias, or unique ID.",
              "location": "path",
              "type": "string",
              "required": true
            }
          }
        },
        "update": {
          "request": {
            "$ref": "Member"
          },
          "description": "Updates the membership of a user in the specified group.",
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "parameters": {
            "groupKey": {
              "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.",
              "type": "string",
              "location": "path",
              "required": true
            },
            "memberKey": {
              "type": "string",
              "required": true,
              "location": "path",
              "description": "Identifies the group member in the API request. A group member can be a user or another group. The value can be the member's (group or user) primary email address, alias, or unique ID."
            }
          },
          "id": "directory.members.update",
          "response": {
            "$ref": "Member"
          },
          "httpMethod": "PUT"
        },
        "patch": {
          "parameters": {
            "memberKey": {
              "type": "string",
              "required": true,
              "description": "Identifies the group member in the API request. A group member can be a user or another group. The value can be the member's (group or user) primary email address, alias, or unique ID.",
              "location": "path"
            },
            "groupKey": {
              "location": "path",
              "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.",
              "required": true,
              "type": "string"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member"
          ],
          "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "id": "directory.members.patch",
          "request": {
            "$ref": "Member"
          },
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "response": {
            "$ref": "Member"
          },
          "httpMethod": "PATCH",
          "path": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
          "description": "Updates the membership properties of a user in the specified group. This method supports [patch semantics](/admin-sdk/directory/v1/guides/performance#patch)."
        },
        "list": {
          "flatPath": "admin/directory/v1/groups/{groupKey}/members",
          "path": "admin/directory/v1/groups/{groupKey}/members",
          "parameterOrder": [
            "groupKey"
          ],
          "description": "Retrieves a paginated list of all members in a group.",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member",
            "https://www.googleapis.com/auth/admin.directory.group.member.readonly",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ],
          "httpMethod": "GET",
          "parameters": {
            "roles": {
              "type": "string",
              "description": "The `roles` query parameter allows you to retrieve group members by role. Allowed values are `OWNER`, `MANAGER`, and `MEMBER`.",
              "location": "query"
            },
            "includeDerivedMembership": {
              "description": "Whether to list indirect memberships. Default: false.",
              "location": "query",
              "type": "boolean"
            },
            "maxResults": {
              "minimum": "1",
              "type": "integer",
              "default": "200",
              "description": "Maximum number of results to return. Max allowed value is 200.",
              "format": "int32",
              "location": "query"
            },
            "groupKey": {
              "required": true,
              "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.",
              "location": "path",
              "type": "string"
            },
            "pageToken": {
              "type": "string",
              "description": "Token to specify next page in the list.",
              "location": "query"
            }
          },
          "id": "directory.members.list",
          "response": {
            "$ref": "Members"
          }
        },
        "hasMember": {
          "path": "admin/directory/v1/groups/{groupKey}/hasMember/{memberKey}",
          "parameterOrder": [
            "groupKey",
            "memberKey"
          ],
          "id": "directory.members.hasMember",
          "flatPath": "admin/directory/v1/groups/{groupKey}/hasMember/{memberKey}",
          "description": "Checks whether the given user is a member of the group. Membership can be direct or nested.",
          "response": {
            "$ref": "MembersHasMember"
          },
          "parameters": {
            "memberKey": {
              "location": "path",
              "description": "Identifies the user member in the API request. The value can be the user's primary email address, alias, or unique ID.",
              "type": "string",
              "required": true
            },
            "groupKey": {
              "required": true,
              "description": "Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.",
              "location": "path",
              "type": "string"
            }
          },
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.group",
            "https://www.googleapis.com/auth/admin.directory.group.member",
            "https://www.googleapis.com/auth/admin.directory.group.member.readonly",
            "https://www.googleapis.com/auth/admin.directory.group.readonly"
          ]
        }
      }
    },
    "mobiledevices": {
      "methods": {
        "get": {
          "id": "directory.mobiledevices.get",
          "httpMethod": "GET",
          "parameters": {
            "projection": {
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, model, status, type, and status)",
                "Includes all metadata fields"
              ],
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "location": "query",
              "description": "Restrict information returned to a set of selected fields.",
              "type": "string"
            },
            "customerId": {
              "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).",
              "location": "path",
              "type": "string",
              "required": true
            },
            "resourceId": {
              "description": "The unique ID the API service uses to identify the mobile device.",
              "required": true,
              "type": "string",
              "location": "path"
            }
          },
          "response": {
            "$ref": "MobileDevice"
          },
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.action",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.readonly"
          ],
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "description": "Retrieves a mobile device's properties.",
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}"
        },
        "action": {
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.action"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}/action",
          "description": "Takes an action that affects a mobile device. For example, remotely wiping a device.",
          "parameters": {
            "resourceId": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "The unique ID the API service uses to identify the mobile device."
            },
            "customerId": {
              "required": true,
              "location": "path",
              "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).",
              "type": "string"
            }
          },
          "id": "directory.mobiledevices.action",
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}/action",
          "request": {
            "$ref": "MobileDeviceAction"
          }
        },
        "list": {
          "id": "directory.mobiledevices.list",
          "description": "Retrieves a paginated list of all mobile devices for an account.",
          "httpMethod": "GET",
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile",
          "parameterOrder": [
            "customerId"
          ],
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile",
          "response": {
            "$ref": "MobileDevices"
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.action",
            "https://www.googleapis.com/auth/admin.directory.device.mobile.readonly"
          ],
          "parameters": {
            "customerId": {
              "location": "path",
              "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).",
              "required": true,
              "type": "string"
            },
            "orderBy": {
              "type": "string",
              "enum": [
                "orderByUndefined",
                "deviceId",
                "email",
                "lastSync",
                "model",
                "name",
                "os",
                "status",
                "type"
              ],
              "description": "Device property to use for sorting results.",
              "enumDescriptions": [
                "",
                "The serial number for a Google Sync mobile device. For Android devices, this is a software generated unique identifier.",
                "The device owner's email address.",
                "Last policy settings sync date time of the device.",
                "The mobile device's model.",
                "The device owner's user name.",
                "The device's operating system.",
                "The device status.",
                "Type of the device."
              ],
              "location": "query"
            },
            "pageToken": {
              "location": "query",
              "type": "string",
              "description": "Token to specify next page in the list"
            },
            "sortOrder": {
              "location": "query",
              "enum": [
                "SORT_ORDER_UNDEFINED",
                "ASCENDING",
                "DESCENDING"
              ],
              "description": "Whether to return results in ascending or descending order. Must be used with the `orderBy` parameter.",
              "enumDescriptions": [
                "",
                "Ascending order.",
                "Descending order."
              ],
              "type": "string"
            },
            "maxResults": {
              "type": "integer",
              "maximum": "100",
              "description": "Maximum number of results to return. Max allowed value is 100.",
              "minimum": "1",
              "location": "query",
              "format": "int32",
              "default": "100"
            },
            "query": {
              "location": "query",
              "description": "Search string in the format given at http://support.google.com/a/bin/answer.py?answer=1408863#search",
              "type": "string"
            },
            "projection": {
              "enumDescriptions": [
                "",
                "Includes only the basic metadata fields (e.g., deviceId, model, status, type, and status)",
                "Includes all metadata fields"
              ],
              "description": "Restrict information returned to a set of selected fields.",
              "enum": [
                "PROJECTION_UNDEFINED",
                "BASIC",
                "FULL"
              ],
              "type": "string",
              "location": "query"
            }
          }
        },
        "delete": {
          "path": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
          "parameterOrder": [
            "customerId",
            "resourceId"
          ],
          "parameters": {
            "resourceId": {
              "required": true,
              "description": "The unique ID the API service uses to identify the mobile device.",
              "location": "path",
              "type": "string"
            },
            "customerId": {
              "type": "string",
              "description": "The unique ID for the customer's G Suite account. As an account administrator, you can also use the `my_customer` alias to represent your account's `customerId`. The `customerId` is also returned as part of the [Users resource](/admin-sdk/directory/v1/reference/users).",
              "required": true,
              "location": "path"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/admin.directory.device.mobile"
          ],
          "httpMethod": "DELETE",
          "id": "directory.mobiledevices.delete",
          "description": "Removes a mobile device."
        }
      }
    }
  },
  "name": "admin",
  "basePath": "",
  "discoveryVersion": "v1",
  "batchPath": "batch",
  "documentationLink": "http://developers.google.com/admin-sdk/",
  "servicePath": "",
  "mtlsRootUrl": "https://admin.mtls.googleapis.com/",
  "description": "Admin SDK lets administrators of enterprise domains to view and manage resources like user, groups etc. It also provides audit and usage reports of domain.",
  "ownerDomain": "google.com",
  "ownerName": "Google",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/admin.directory.customer": {
          "description": "View and manage customer related information"
        },
        "https://www.googleapis.com/auth/admin.directory.resource.calendar": {
          "description": "View and manage the provisioning of calendar resources on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.user.alias.readonly": {
          "description": "View user aliases on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.chromeos.readonly": {
          "description": "View your Chrome OS devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.rolemanagement": {
          "description": "Manage delegated admin roles for your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.chromeos": {
          "description": "View and manage your Chrome OS devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.device.mobile": {
          "description": "View and manage your mobile devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.group.readonly": {
          "description": "View groups on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.customer.readonly": {
          "description": "View customer related information"
        },
        "https://www.googleapis.com/auth/admin.directory.user.security": {
          "description": "Manage data access permissions for users on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.resource.calendar.readonly": {
          "description": "View calendar resources on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.user.alias": {
          "description": "View and manage user aliases on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly": {
          "description": "View delegated admin roles for your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.domain": {
          "description": "View and manage the provisioning of domains for your customers"
        },
        "https://www.googleapis.com/auth/admin.directory.userschema.readonly": {
          "description": "View user schemas on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.group.member.readonly": {
          "description": "View group subscriptions on your domain"
        },
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "View and manage your data across Google Cloud Platform services"
        },
        "https://www.googleapis.com/auth/admin.directory.group.member": {
          "description": "View and manage group subscriptions on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.domain.readonly": {
          "description": "View domains related to your customers"
        },
        "https://www.googleapis.com/auth/admin.directory.userschema": {
          "description": "View and manage the provisioning of user schemas on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.orgunit": {
          "description": "View and manage organization units on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.orgunit.readonly": {
          "description": "View organization units on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.user": {
          "description": "View and manage the provisioning of users on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.mobile.readonly": {
          "description": "View your mobile devices' metadata"
        },
        "https://www.googleapis.com/auth/admin.directory.group": {
          "description": "View and manage the provisioning of groups on your domain"
        },
        "https://www.googleapis.com/auth/admin.directory.device.mobile.action": {
          "description": "Manage your mobile devices by performing administrative tasks"
        },
        "https://www.googleapis.com/auth/admin.directory.user.readonly": {
          "description": "View users on your domain"
        }
      }
    }
  },
  "protocol": "rest",
  "parameters": {
    "fields": {
      "location": "query",
      "type": "string",
      "description": "Selector specifying which fields to include in a partial response."
    },
    "alt": {
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "type": "string",
      "default": "json",
      "description": "Data format for response.",
      "location": "query",
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ]
    },
    "uploadType": {
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "type": "string",
      "location": "query"
    },
    "access_token": {
      "description": "OAuth access token.",
      "type": "string",
      "location": "query"
    },
    "callback": {
      "type": "string",
      "description": "JSONP",
      "location": "query"
    },
    "upload_protocol": {
      "type": "string",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "location": "query"
    },
    "key": {
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "type": "string",
      "location": "query"
    },
    "$.xgafv": {
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "enum": [
        "1",
        "2"
      ],
      "description": "V1 error format.",
      "location": "query",
      "type": "string"
    },
    "quotaUser": {
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "type": "string",
      "location": "query"
    },
    "oauth_token": {
      "location": "query",
      "description": "OAuth 2.0 token for the current user.",
      "type": "string"
    },
    "prettyPrint": {
      "description": "Returns response with indentations and line breaks.",
      "default": "true",
      "type": "boolean",
      "location": "query"
    }
  },
  "canonicalName": "directory",
  "rootUrl": "https://admin.googleapis.com/",
  "id": "admin:directory_v1",
  "revision": "20201124",
  "baseUrl": "https://admin.googleapis.com/"
}
