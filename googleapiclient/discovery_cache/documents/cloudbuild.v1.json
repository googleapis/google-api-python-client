{
  "canonicalName": "Cloud Build",
  "version_module": true,
  "kind": "discovery#restDescription",
  "parameters": {
    "callback": {
      "description": "JSONP",
      "location": "query",
      "type": "string"
    },
    "quotaUser": {
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "location": "query",
      "type": "string"
    },
    "upload_protocol": {
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "type": "string",
      "location": "query"
    },
    "access_token": {
      "type": "string",
      "location": "query",
      "description": "OAuth access token."
    },
    "prettyPrint": {
      "location": "query",
      "default": "true",
      "description": "Returns response with indentations and line breaks.",
      "type": "boolean"
    },
    "uploadType": {
      "location": "query",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "type": "string"
    },
    "oauth_token": {
      "description": "OAuth 2.0 token for the current user.",
      "location": "query",
      "type": "string"
    },
    "key": {
      "type": "string",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "location": "query"
    },
    "alt": {
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "type": "string",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "default": "json",
      "description": "Data format for response.",
      "location": "query"
    },
    "$.xgafv": {
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "description": "V1 error format.",
      "type": "string",
      "enum": [
        "1",
        "2"
      ],
      "location": "query"
    },
    "fields": {
      "description": "Selector specifying which fields to include in a partial response.",
      "location": "query",
      "type": "string"
    }
  },
  "resources": {
    "operations": {
      "methods": {
        "cancel": {
          "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
          "parameters": {
            "name": {
              "location": "path",
              "pattern": "^operations/.*$",
              "description": "The name of the operation resource to be cancelled.",
              "type": "string",
              "required": true
            }
          },
          "request": {
            "$ref": "CancelOperationRequest"
          },
          "response": {
            "$ref": "Empty"
          },
          "id": "cloudbuild.operations.cancel",
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "httpMethod": "POST",
          "path": "v1/{+name}:cancel",
          "parameterOrder": [
            "name"
          ],
          "flatPath": "v1/operations/{operationsId}:cancel"
        },
        "get": {
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "flatPath": "v1/operations/{operationsId}",
          "parameters": {
            "name": {
              "description": "The name of the operation resource.",
              "required": true,
              "location": "path",
              "pattern": "^operations/.*$",
              "type": "string"
            }
          },
          "response": {
            "$ref": "Operation"
          },
          "parameterOrder": [
            "name"
          ],
          "httpMethod": "GET",
          "path": "v1/{+name}",
          "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
          "id": "cloudbuild.operations.get"
        }
      }
    },
    "projects": {
      "resources": {
        "triggers": {
          "methods": {
            "list": {
              "parameters": {
                "pageToken": {
                  "description": "Token to provide to skip to a particular spot in the list.",
                  "location": "query",
                  "type": "string"
                },
                "pageSize": {
                  "format": "int32",
                  "location": "query",
                  "type": "integer",
                  "description": "Number of results to return in the list."
                },
                "projectId": {
                  "type": "string",
                  "description": "Required. ID of the project for which to list BuildTriggers.",
                  "location": "path",
                  "required": true
                }
              },
              "path": "v1/projects/{projectId}/triggers",
              "httpMethod": "GET",
              "response": {
                "$ref": "ListBuildTriggersResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Lists existing `BuildTrigger`s. This API is experimental.",
              "flatPath": "v1/projects/{projectId}/triggers",
              "id": "cloudbuild.projects.triggers.list",
              "parameterOrder": [
                "projectId"
              ]
            },
            "create": {
              "request": {
                "$ref": "BuildTrigger"
              },
              "parameters": {
                "projectId": {
                  "location": "path",
                  "type": "string",
                  "required": true,
                  "description": "Required. ID of the project for which to configure automatic builds."
                }
              },
              "flatPath": "v1/projects/{projectId}/triggers",
              "response": {
                "$ref": "BuildTrigger"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Creates a new `BuildTrigger`. This API is experimental.",
              "id": "cloudbuild.projects.triggers.create",
              "parameterOrder": [
                "projectId"
              ],
              "httpMethod": "POST",
              "path": "v1/projects/{projectId}/triggers"
            },
            "delete": {
              "path": "v1/projects/{projectId}/triggers/{triggerId}",
              "flatPath": "v1/projects/{projectId}/triggers/{triggerId}",
              "parameters": {
                "triggerId": {
                  "location": "path",
                  "description": "Required. ID of the `BuildTrigger` to delete.",
                  "required": true,
                  "type": "string"
                },
                "projectId": {
                  "description": "Required. ID of the project that owns the trigger.",
                  "type": "string",
                  "required": true,
                  "location": "path"
                }
              },
              "description": "Deletes a `BuildTrigger` by its project ID and trigger ID. This API is experimental.",
              "response": {
                "$ref": "Empty"
              },
              "parameterOrder": [
                "projectId",
                "triggerId"
              ],
              "httpMethod": "DELETE",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "id": "cloudbuild.projects.triggers.delete"
            },
            "get": {
              "flatPath": "v1/projects/{projectId}/triggers/{triggerId}",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "id": "cloudbuild.projects.triggers.get",
              "description": "Returns information about a `BuildTrigger`. This API is experimental.",
              "path": "v1/projects/{projectId}/triggers/{triggerId}",
              "response": {
                "$ref": "BuildTrigger"
              },
              "parameters": {
                "triggerId": {
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "description": "Required. Identifier (`id` or `name`) of the `BuildTrigger` to get."
                },
                "projectId": {
                  "description": "Required. ID of the project that owns the trigger.",
                  "location": "path",
                  "type": "string",
                  "required": true
                }
              },
              "parameterOrder": [
                "projectId",
                "triggerId"
              ],
              "httpMethod": "GET"
            },
            "patch": {
              "path": "v1/projects/{projectId}/triggers/{triggerId}",
              "description": "Updates a `BuildTrigger` by its project ID and trigger ID. This API is experimental.",
              "response": {
                "$ref": "BuildTrigger"
              },
              "request": {
                "$ref": "BuildTrigger"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "parameters": {
                "triggerId": {
                  "type": "string",
                  "description": "Required. ID of the `BuildTrigger` to update.",
                  "required": true,
                  "location": "path"
                },
                "projectId": {
                  "required": true,
                  "location": "path",
                  "type": "string",
                  "description": "Required. ID of the project that owns the trigger."
                }
              },
              "flatPath": "v1/projects/{projectId}/triggers/{triggerId}",
              "id": "cloudbuild.projects.triggers.patch",
              "parameterOrder": [
                "projectId",
                "triggerId"
              ],
              "httpMethod": "PATCH"
            },
            "run": {
              "parameters": {
                "projectId": {
                  "required": true,
                  "description": "Required. ID of the project.",
                  "location": "path",
                  "type": "string"
                },
                "triggerId": {
                  "required": true,
                  "type": "string",
                  "description": "Required. ID of the trigger.",
                  "location": "path"
                }
              },
              "flatPath": "v1/projects/{projectId}/triggers/{triggerId}:run",
              "request": {
                "$ref": "RepoSource"
              },
              "path": "v1/projects/{projectId}/triggers/{triggerId}:run",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Runs a `BuildTrigger` at a particular source revision.",
              "httpMethod": "POST",
              "id": "cloudbuild.projects.triggers.run",
              "parameterOrder": [
                "projectId",
                "triggerId"
              ],
              "response": {
                "$ref": "Operation"
              }
            }
          }
        },
        "locations": {
          "resources": {
            "operations": {
              "methods": {
                "get": {
                  "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
                  "parameterOrder": [
                    "name"
                  ],
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "path": "v1/{+name}",
                  "response": {
                    "$ref": "Operation"
                  },
                  "httpMethod": "GET",
                  "parameters": {
                    "name": {
                      "description": "The name of the operation resource.",
                      "required": true,
                      "pattern": "^projects/[^/]+/locations/[^/]+/operations/[^/]+$",
                      "location": "path",
                      "type": "string"
                    }
                  },
                  "id": "cloudbuild.projects.locations.operations.get"
                },
                "cancel": {
                  "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
                  "request": {
                    "$ref": "CancelOperationRequest"
                  },
                  "path": "v1/{+name}:cancel",
                  "parameterOrder": [
                    "name"
                  ],
                  "id": "cloudbuild.projects.locations.operations.cancel",
                  "response": {
                    "$ref": "Empty"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "httpMethod": "POST",
                  "parameters": {
                    "name": {
                      "type": "string",
                      "description": "The name of the operation resource to be cancelled.",
                      "location": "path",
                      "required": true,
                      "pattern": "^projects/[^/]+/locations/[^/]+/operations/[^/]+$"
                    }
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:cancel"
                }
              }
            },
            "builds": {
              "methods": {
                "list": {
                  "parameterOrder": [
                    "parent"
                  ],
                  "response": {
                    "$ref": "ListBuildsResponse"
                  },
                  "id": "cloudbuild.projects.locations.builds.list",
                  "httpMethod": "GET",
                  "path": "v1/{+parent}/builds",
                  "description": "Lists previously requested builds. Previously requested builds may still be in-progress, or may have finished successfully or unsuccessfully.",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "parameters": {
                    "pageToken": {
                      "type": "string",
                      "description": "The page token for the next page of Builds. If unspecified, the first page of results is returned. If the token is rejected for any reason, INVALID_ARGUMENT will be thrown. In this case, the token should be discarded, and pagination should be restarted from the first page of results. See https://google.aip.dev/158 for more.",
                      "location": "query"
                    },
                    "pageSize": {
                      "location": "query",
                      "type": "integer",
                      "description": "Number of results to return in the list.",
                      "format": "int32"
                    },
                    "parent": {
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "type": "string",
                      "description": "The parent of the collection of `Builds`. Format: `projects/{project}/locations/location`",
                      "location": "path",
                      "required": true
                    },
                    "projectId": {
                      "location": "query",
                      "description": "Required. ID of the project.",
                      "type": "string"
                    },
                    "filter": {
                      "description": "The raw filter text to constrain the results.",
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/builds"
                },
                "get": {
                  "response": {
                    "$ref": "Build"
                  },
                  "parameters": {
                    "name": {
                      "location": "path",
                      "required": true,
                      "description": "The name of the `Build` to retrieve. Format: `projects/{project}/locations/{location}/builds/{build}`",
                      "pattern": "^projects/[^/]+/locations/[^/]+/builds/[^/]+$",
                      "type": "string"
                    },
                    "projectId": {
                      "type": "string",
                      "location": "query",
                      "description": "Required. ID of the project."
                    },
                    "id": {
                      "description": "Required. ID of the build.",
                      "type": "string",
                      "location": "query"
                    }
                  },
                  "id": "cloudbuild.projects.locations.builds.get",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "path": "v1/{+name}",
                  "parameterOrder": [
                    "name"
                  ],
                  "description": "Returns information about a previously requested build. The `Build` that is returned includes its status (such as `SUCCESS`, `FAILURE`, or `WORKING`), and timing information.",
                  "httpMethod": "GET",
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/builds/{buildsId}"
                },
                "cancel": {
                  "parameterOrder": [
                    "name"
                  ],
                  "request": {
                    "$ref": "CancelBuildRequest"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "id": "cloudbuild.projects.locations.builds.cancel",
                  "httpMethod": "POST",
                  "parameters": {
                    "name": {
                      "required": true,
                      "location": "path",
                      "description": "The name of the `Build` to cancel. Format: `projects/{project}/locations/{location}/builds/{build}`",
                      "pattern": "^projects/[^/]+/locations/[^/]+/builds/[^/]+$",
                      "type": "string"
                    }
                  },
                  "path": "v1/{+name}:cancel",
                  "response": {
                    "$ref": "Build"
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/builds/{buildsId}:cancel",
                  "description": "Cancels a build in progress."
                },
                "retry": {
                  "parameterOrder": [
                    "name"
                  ],
                  "parameters": {
                    "name": {
                      "type": "string",
                      "required": true,
                      "location": "path",
                      "description": "The name of the `Build` to retry. Format: `projects/{project}/locations/{location}/builds/{build}`",
                      "pattern": "^projects/[^/]+/locations/[^/]+/builds/[^/]+$"
                    }
                  },
                  "description": "Creates a new build based on the specified build. This method creates a new build using the original build request, which may or may not result in an identical build. For triggered builds: * Triggered builds resolve to a precise revision; therefore a retry of a triggered build will result in a build that uses the same revision. For non-triggered builds that specify `RepoSource`: * If the original build built from the tip of a branch, the retried build will build from the tip of that branch, which may not be the same revision as the original build. * If the original build specified a commit sha or revision ID, the retried build will use the identical source. For builds that specify `StorageSource`: * If the original build pulled source from Google Cloud Storage without specifying the generation of the object, the new build will use the current object, which may be different from the original build source. * If the original build pulled source from Cloud Storage and specified the generation of the object, the new build will attempt to use the same object, which may or may not be available depending on the bucket's lifecycle management settings.",
                  "httpMethod": "POST",
                  "response": {
                    "$ref": "Operation"
                  },
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/builds/{buildsId}:retry",
                  "path": "v1/{+name}:retry",
                  "id": "cloudbuild.projects.locations.builds.retry",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "request": {
                    "$ref": "RetryBuildRequest"
                  }
                },
                "create": {
                  "response": {
                    "$ref": "Operation"
                  },
                  "path": "v1/{+parent}/builds",
                  "parameterOrder": [
                    "parent"
                  ],
                  "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/builds",
                  "description": "Starts a build with the specified configuration. This method returns a long-running `Operation`, which includes the build ID. Pass the build ID to `GetBuild` to determine the build status (such as `SUCCESS` or `FAILURE`).",
                  "request": {
                    "$ref": "Build"
                  },
                  "parameters": {
                    "parent": {
                      "required": true,
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "type": "string",
                      "description": "The parent resource where this build will be created. Format: `projects/{project}/locations/{location}`"
                    },
                    "projectId": {
                      "type": "string",
                      "description": "Required. ID of the project.",
                      "location": "query"
                    }
                  },
                  "httpMethod": "POST",
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "id": "cloudbuild.projects.locations.builds.create"
                }
              }
            }
          }
        },
        "builds": {
          "methods": {
            "cancel": {
              "id": "cloudbuild.projects.builds.cancel",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "parameters": {
                "projectId": {
                  "type": "string",
                  "required": true,
                  "location": "path",
                  "description": "Required. ID of the project."
                },
                "id": {
                  "description": "Required. ID of the build.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                }
              },
              "description": "Cancels a build in progress.",
              "request": {
                "$ref": "CancelBuildRequest"
              },
              "flatPath": "v1/projects/{projectId}/builds/{id}:cancel",
              "path": "v1/projects/{projectId}/builds/{id}:cancel",
              "parameterOrder": [
                "projectId",
                "id"
              ],
              "httpMethod": "POST",
              "response": {
                "$ref": "Build"
              }
            },
            "create": {
              "request": {
                "$ref": "Build"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "response": {
                "$ref": "Operation"
              },
              "parameterOrder": [
                "projectId"
              ],
              "description": "Starts a build with the specified configuration. This method returns a long-running `Operation`, which includes the build ID. Pass the build ID to `GetBuild` to determine the build status (such as `SUCCESS` or `FAILURE`).",
              "flatPath": "v1/projects/{projectId}/builds",
              "parameters": {
                "projectId": {
                  "required": true,
                  "location": "path",
                  "type": "string",
                  "description": "Required. ID of the project."
                },
                "parent": {
                  "description": "The parent resource where this build will be created. Format: `projects/{project}/locations/{location}`",
                  "type": "string",
                  "location": "query"
                }
              },
              "httpMethod": "POST",
              "path": "v1/projects/{projectId}/builds",
              "id": "cloudbuild.projects.builds.create"
            },
            "list": {
              "parameterOrder": [
                "projectId"
              ],
              "parameters": {
                "projectId": {
                  "description": "Required. ID of the project.",
                  "required": true,
                  "type": "string",
                  "location": "path"
                },
                "filter": {
                  "description": "The raw filter text to constrain the results.",
                  "type": "string",
                  "location": "query"
                },
                "pageSize": {
                  "format": "int32",
                  "description": "Number of results to return in the list.",
                  "type": "integer",
                  "location": "query"
                },
                "parent": {
                  "description": "The parent of the collection of `Builds`. Format: `projects/{project}/locations/location`",
                  "location": "query",
                  "type": "string"
                },
                "pageToken": {
                  "location": "query",
                  "description": "The page token for the next page of Builds. If unspecified, the first page of results is returned. If the token is rejected for any reason, INVALID_ARGUMENT will be thrown. In this case, the token should be discarded, and pagination should be restarted from the first page of results. See https://google.aip.dev/158 for more.",
                  "type": "string"
                }
              },
              "id": "cloudbuild.projects.builds.list",
              "flatPath": "v1/projects/{projectId}/builds",
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "response": {
                "$ref": "ListBuildsResponse"
              },
              "path": "v1/projects/{projectId}/builds",
              "httpMethod": "GET",
              "description": "Lists previously requested builds. Previously requested builds may still be in-progress, or may have finished successfully or unsuccessfully."
            },
            "retry": {
              "flatPath": "v1/projects/{projectId}/builds/{id}:retry",
              "parameterOrder": [
                "projectId",
                "id"
              ],
              "parameters": {
                "id": {
                  "type": "string",
                  "description": "Required. Build ID of the original build.",
                  "required": true,
                  "location": "path"
                },
                "projectId": {
                  "description": "Required. ID of the project.",
                  "type": "string",
                  "location": "path",
                  "required": true
                }
              },
              "request": {
                "$ref": "RetryBuildRequest"
              },
              "path": "v1/projects/{projectId}/builds/{id}:retry",
              "id": "cloudbuild.projects.builds.retry",
              "response": {
                "$ref": "Operation"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Creates a new build based on the specified build. This method creates a new build using the original build request, which may or may not result in an identical build. For triggered builds: * Triggered builds resolve to a precise revision; therefore a retry of a triggered build will result in a build that uses the same revision. For non-triggered builds that specify `RepoSource`: * If the original build built from the tip of a branch, the retried build will build from the tip of that branch, which may not be the same revision as the original build. * If the original build specified a commit sha or revision ID, the retried build will use the identical source. For builds that specify `StorageSource`: * If the original build pulled source from Google Cloud Storage without specifying the generation of the object, the new build will use the current object, which may be different from the original build source. * If the original build pulled source from Cloud Storage and specified the generation of the object, the new build will attempt to use the same object, which may or may not be available depending on the bucket's lifecycle management settings.",
              "httpMethod": "POST"
            },
            "get": {
              "id": "cloudbuild.projects.builds.get",
              "response": {
                "$ref": "Build"
              },
              "parameters": {
                "projectId": {
                  "description": "Required. ID of the project.",
                  "location": "path",
                  "required": true,
                  "type": "string"
                },
                "name": {
                  "location": "query",
                  "description": "The name of the `Build` to retrieve. Format: `projects/{project}/locations/{location}/builds/{build}`",
                  "type": "string"
                },
                "id": {
                  "type": "string",
                  "description": "Required. ID of the build.",
                  "required": true,
                  "location": "path"
                }
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "path": "v1/projects/{projectId}/builds/{id}",
              "httpMethod": "GET",
              "description": "Returns information about a previously requested build. The `Build` that is returned includes its status (such as `SUCCESS`, `FAILURE`, or `WORKING`), and timing information.",
              "parameterOrder": [
                "projectId",
                "id"
              ],
              "flatPath": "v1/projects/{projectId}/builds/{id}"
            }
          }
        }
      }
    }
  },
  "description": "Creates and manages builds on Google Cloud Platform.",
  "ownerName": "Google",
  "basePath": "",
  "baseUrl": "https://cloudbuild.googleapis.com/",
  "ownerDomain": "google.com",
  "servicePath": "",
  "revision": "20201203",
  "icons": {
    "x32": "http://www.google.com/images/icons/product/search-32.gif",
    "x16": "http://www.google.com/images/icons/product/search-16.gif"
  },
  "protocol": "rest",
  "schemas": {
    "CancelOperationRequest": {
      "id": "CancelOperationRequest",
      "type": "object",
      "description": "The request message for Operations.CancelOperation.",
      "properties": {}
    },
    "BuildOperationMetadata": {
      "properties": {
        "build": {
          "description": "The build that the operation is tracking.",
          "$ref": "Build"
        }
      },
      "type": "object",
      "id": "BuildOperationMetadata",
      "description": "Metadata for build operations."
    },
    "PushFilter": {
      "properties": {
        "invertRegex": {
          "type": "boolean",
          "description": "When true, only trigger a build if the revision regex does NOT match the git_ref regex."
        },
        "branch": {
          "type": "string",
          "description": "Regexes matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax"
        },
        "tag": {
          "description": "Regexes matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax",
          "type": "string"
        }
      },
      "type": "object",
      "description": "Push contains filter properties for matching GitHub git pushes.",
      "id": "PushFilter"
    },
    "SlackDelivery": {
      "properties": {
        "webhookUri": {
          "description": "The secret reference for the Slack webhook URI for sending messages to a channel.",
          "$ref": "NotifierSecretRef"
        }
      },
      "id": "SlackDelivery",
      "type": "object",
      "description": "SlackDelivery is the delivery configuration for delivering Slack messages via webhooks. See Slack webhook documentation at: https://api.slack.com/messaging/webhooks."
    },
    "BuildOptions": {
      "description": "Optional arguments to enable specific features of builds.",
      "properties": {
        "workerPool": {
          "description": "Option to specify a `WorkerPool` for the build. Format: projects/{project}/locations/{location}/workerPools/{workerPool} This field is experimental.",
          "type": "string"
        },
        "logging": {
          "enumDescriptions": [
            "The service determines the logging mode. The default is `LEGACY`. Do not rely on the default logging behavior as it may change in the future.",
            "Cloud Logging and Cloud Storage logging are enabled.",
            "Only Cloud Storage logging is enabled.",
            "This option is the same as CLOUD_LOGGING_ONLY.",
            "Only Cloud Logging is enabled. Note that logs for both the Cloud Console UI and Cloud SDK are based on Cloud Storage logs, so neither will provide logs if this option is chosen.",
            "Turn off all logging. No build logs will be captured. Next ID: 6"
          ],
          "enum": [
            "LOGGING_UNSPECIFIED",
            "LEGACY",
            "GCS_ONLY",
            "STACKDRIVER_ONLY",
            "CLOUD_LOGGING_ONLY",
            "NONE"
          ],
          "description": "Option to specify the logging mode, which determines if and where build logs are stored.",
          "type": "string"
        },
        "diskSizeGb": {
          "type": "string",
          "description": "Requested disk size for the VM that runs the build. Note that this is *NOT* \"disk free\"; some of the space will be used by the operating system and build utilities. Also note that this is the minimum disk size that will be allocated for the build -- the build may run with a larger disk than requested. At present, the maximum disk size is 1000GB; builds that request more than the maximum are rejected with an error.",
          "format": "int64"
        },
        "volumes": {
          "description": "Global list of volumes to mount for ALL build steps Each volume is created as an empty volume prior to starting the build process. Upon completion of the build, volumes and their contents are discarded. Global volume names and paths cannot conflict with the volumes defined a build step. Using a global volume in a build with only one step is not valid as it is indicative of a build request with an incorrect configuration.",
          "items": {
            "$ref": "Volume"
          },
          "type": "array"
        },
        "machineType": {
          "enumDescriptions": [
            "Standard machine type.",
            "Highcpu machine with 8 CPUs.",
            "Highcpu machine with 32 CPUs.",
            "Highcpu e2 machine with 8 CPUs.",
            "Highcpu e2 machine with 32 CPUs."
          ],
          "enum": [
            "UNSPECIFIED",
            "N1_HIGHCPU_8",
            "N1_HIGHCPU_32",
            "E2_HIGHCPU_8",
            "E2_HIGHCPU_32"
          ],
          "description": "Compute Engine machine type on which to run the build.",
          "type": "string"
        },
        "requestedVerifyOption": {
          "enum": [
            "NOT_VERIFIED",
            "VERIFIED"
          ],
          "type": "string",
          "enumDescriptions": [
            "Not a verifiable build. (default)",
            "Verified build."
          ],
          "description": "Requested verifiability options."
        },
        "substitutionOption": {
          "type": "string",
          "enumDescriptions": [
            "Fails the build if error in substitutions checks, like missing a substitution in the template or in the map.",
            "Do not fail the build if error in substitutions checks."
          ],
          "enum": [
            "MUST_MATCH",
            "ALLOW_LOOSE"
          ],
          "description": "Option to specify behavior when there is an error in the substitution checks. NOTE: this is always set to ALLOW_LOOSE for triggered builds and cannot be overridden in the build configuration file."
        },
        "secretEnv": {
          "type": "array",
          "description": "A list of global environment variables, which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`. These variables will be available to all build steps in this build.",
          "items": {
            "type": "string"
          }
        },
        "env": {
          "items": {
            "type": "string"
          },
          "description": "A list of global environment variable definitions that will exist for all build steps in this build. If a variable is defined in both globally and in a build step, the variable will use the build step value. The elements are of the form \"KEY=VALUE\" for the environment variable \"KEY\" being given the value \"VALUE\".",
          "type": "array"
        },
        "dynamicSubstitutions": {
          "description": "Option to specify whether or not to apply bash style string operations to the substitutions. NOTE: this is always enabled for triggered builds and cannot be overridden in the build configuration file.",
          "type": "boolean"
        },
        "logStreamingOption": {
          "type": "string",
          "description": "Option to define build log streaming behavior to Google Cloud Storage.",
          "enumDescriptions": [
            "Service may automatically determine build log streaming behavior.",
            "Build logs should be streamed to Google Cloud Storage.",
            "Build logs should not be streamed to Google Cloud Storage; they will be written when the build is completed."
          ],
          "enum": [
            "STREAM_DEFAULT",
            "STREAM_ON",
            "STREAM_OFF"
          ]
        },
        "sourceProvenanceHash": {
          "items": {
            "enumDescriptions": [
              "No hash requested.",
              "Use a sha256 hash.",
              "Use a md5 hash."
            ],
            "type": "string",
            "enum": [
              "NONE",
              "SHA256",
              "MD5"
            ]
          },
          "description": "Requested hash for SourceProvenance.",
          "type": "array"
        }
      },
      "type": "object",
      "id": "BuildOptions"
    },
    "Results": {
      "properties": {
        "numArtifacts": {
          "type": "string",
          "format": "int64",
          "description": "Number of artifacts uploaded. Only populated when artifacts are uploaded."
        },
        "artifactManifest": {
          "type": "string",
          "description": "Path to the artifact manifest. Only populated when artifacts are uploaded."
        },
        "artifactTiming": {
          "description": "Time to push all non-container artifacts.",
          "$ref": "TimeSpan"
        },
        "buildStepImages": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "List of build step digests, in the order corresponding to build step indices."
        },
        "buildStepOutputs": {
          "items": {
            "format": "byte",
            "type": "string"
          },
          "description": "List of build step outputs, produced by builder images, in the order corresponding to build step indices. [Cloud Builders](https://cloud.google.com/cloud-build/docs/cloud-builders) can produce this output by writing to `$BUILDER_OUTPUT/output`. Only the first 4KB of data is stored.",
          "type": "array"
        },
        "images": {
          "type": "array",
          "items": {
            "$ref": "BuiltImage"
          },
          "description": "Container images that were built as a part of the build."
        }
      },
      "type": "object",
      "description": "Artifacts created by the build pipeline.",
      "id": "Results"
    },
    "FileHashes": {
      "id": "FileHashes",
      "properties": {
        "fileHash": {
          "items": {
            "$ref": "Hash"
          },
          "type": "array",
          "description": "Collection of file hashes."
        }
      },
      "description": "Container message for hashes of byte content of files, used in SourceProvenance messages to verify integrity of source input to the build.",
      "type": "object"
    },
    "CancelBuildRequest": {
      "description": "Request to cancel an ongoing build.",
      "type": "object",
      "id": "CancelBuildRequest",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the `Build` to cancel. Format: `projects/{project}/locations/{location}/builds/{build}`"
        },
        "projectId": {
          "type": "string",
          "description": "Required. ID of the project."
        },
        "id": {
          "description": "Required. ID of the build.",
          "type": "string"
        }
      }
    },
    "Volume": {
      "description": "Volume describes a Docker container volume which is mounted into build steps in order to persist files across build step execution.",
      "type": "object",
      "id": "Volume",
      "properties": {
        "path": {
          "type": "string",
          "description": "Path at which to mount the volume. Paths must be absolute and cannot conflict with other volume paths on the same build step or with certain reserved volume paths."
        },
        "name": {
          "description": "Name of the volume to mount. Volume names must be unique per build step and must be valid names for Docker volumes. Each named volume must be used by at least two build steps.",
          "type": "string"
        }
      }
    },
    "BuiltImage": {
      "type": "object",
      "description": "An image built by the pipeline.",
      "id": "BuiltImage",
      "properties": {
        "pushTiming": {
          "readOnly": true,
          "description": "Output only. Stores timing information for pushing the specified image.",
          "$ref": "TimeSpan"
        },
        "digest": {
          "description": "Docker Registry 2.0 digest.",
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "Name used to push the container image to Google Container Registry, as presented to `docker push`."
        }
      }
    },
    "RetryBuildRequest": {
      "properties": {
        "name": {
          "description": "The name of the `Build` to retry. Format: `projects/{project}/locations/{location}/builds/{build}`",
          "type": "string"
        },
        "id": {
          "description": "Required. Build ID of the original build.",
          "type": "string"
        },
        "projectId": {
          "description": "Required. ID of the project.",
          "type": "string"
        }
      },
      "id": "RetryBuildRequest",
      "description": "Specifies a build to retry.",
      "type": "object"
    },
    "StorageSource": {
      "id": "StorageSource",
      "description": "Location of the source in an archive file in Google Cloud Storage.",
      "properties": {
        "generation": {
          "description": "Google Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used.",
          "format": "int64",
          "type": "string"
        },
        "object": {
          "description": "Google Cloud Storage object containing the source. This object must be a gzipped archive file (`.tar.gz`) containing source to build.",
          "type": "string"
        },
        "bucket": {
          "type": "string",
          "description": "Google Cloud Storage bucket containing the source (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements))."
        }
      },
      "type": "object"
    },
    "BuildStep": {
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier for this build step, used in `wait_for` to reference this build step as a dependency.",
          "type": "string"
        },
        "env": {
          "type": "array",
          "description": "A list of environment variable definitions to be used when running a step. The elements are of the form \"KEY=VALUE\" for the environment variable \"KEY\" being given the value \"VALUE\".",
          "items": {
            "type": "string"
          }
        },
        "status": {
          "readOnly": true,
          "description": "Output only. Status of the build step. At this time, build step status is only updated on build completion; step status is not updated in real-time as the build progresses.",
          "enumDescriptions": [
            "Status of the build is unknown.",
            "Build or step is queued; work has not yet begun.",
            "Build or step is being executed.",
            "Build or step finished successfully.",
            "Build or step failed to complete successfully.",
            "Build or step failed due to an internal cause.",
            "Build or step took longer than was allowed.",
            "Build or step was canceled by a user.",
            "Build was enqueued for longer than the value of `queue_ttl`."
          ],
          "type": "string",
          "enum": [
            "STATUS_UNKNOWN",
            "QUEUED",
            "WORKING",
            "SUCCESS",
            "FAILURE",
            "INTERNAL_ERROR",
            "TIMEOUT",
            "CANCELLED",
            "EXPIRED"
          ]
        },
        "dir": {
          "type": "string",
          "description": "Working directory to use when running this step's container. If this value is a relative path, it is relative to the build's working directory. If this value is absolute, it may be outside the build's working directory, in which case the contents of the path may not be persisted across build step executions, unless a `volume` for that path is specified. If the build specifies a `RepoSource` with `dir` and a step with a `dir`, which specifies an absolute path, the `RepoSource` `dir` is ignored for the step's execution."
        },
        "secretEnv": {
          "type": "array",
          "description": "A list of environment variables which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`.",
          "items": {
            "type": "string"
          }
        },
        "entrypoint": {
          "description": "Entrypoint to be used instead of the build step image's default entrypoint. If unset, the image's default entrypoint is used.",
          "type": "string"
        },
        "pullTiming": {
          "description": "Output only. Stores timing information for pulling this build step's builder image only.",
          "$ref": "TimeSpan",
          "readOnly": true
        },
        "timing": {
          "$ref": "TimeSpan",
          "description": "Output only. Stores timing information for executing this build step.",
          "readOnly": true
        },
        "timeout": {
          "format": "google-duration",
          "type": "string",
          "description": "Time limit for executing this build step. If not defined, the step has no time limit and will be allowed to continue to run until either it completes or the build itself times out."
        },
        "waitFor": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The ID(s) of the step(s) that this build step depends on. This build step will not start until all the build steps in `wait_for` have completed successfully. If `wait_for` is empty, this build step will start when all previous build steps in the `Build.Steps` list have completed successfully."
        },
        "name": {
          "type": "string",
          "description": "Required. The name of the container image that will run this particular build step. If the image is available in the host's Docker daemon's cache, it will be run directly. If not, the host will attempt to pull the image first, using the builder service account's credentials if necessary. The Docker daemon's cache will already have the latest versions of all of the officially supported build steps ([https://github.com/GoogleCloudPlatform/cloud-builders](https://github.com/GoogleCloudPlatform/cloud-builders)). The Docker daemon will also have cached many of the layers for some popular images, like \"ubuntu\", \"debian\", but they will be refreshed at the time you attempt to use them. If you built an image in a previous build step, it will be stored in the host's Docker daemon's cache and is available to use as the name for a later build step."
        },
        "volumes": {
          "description": "List of volumes to mount into the build step. Each volume is created as an empty volume prior to execution of the build step. Upon completion of the build, volumes and their contents are discarded. Using a named volume in only one step is not valid as it is indicative of a build request with an incorrect configuration.",
          "type": "array",
          "items": {
            "$ref": "Volume"
          }
        },
        "args": {
          "type": "array",
          "description": "A list of arguments that will be presented to the step when it is started. If the image used to run the step's container has an entrypoint, the `args` are used as arguments to that entrypoint. If the image does not define an entrypoint, the first element in args is used as the entrypoint, and the remainder will be used as arguments.",
          "items": {
            "type": "string"
          }
        }
      },
      "description": "A step in the build pipeline.",
      "id": "BuildStep"
    },
    "NotifierSecret": {
      "type": "object",
      "id": "NotifierSecret",
      "description": "NotifierSecret is the container that maps a secret name (reference) to its Google Cloud Secret Manager resource path.",
      "properties": {
        "name": {
          "description": "Name is the local name of the secret, such as the verbatim string \"my-smtp-password\".",
          "type": "string"
        },
        "value": {
          "type": "string",
          "description": "Value is interpreted to be a resource path for fetching the actual (versioned) secret data for this secret. For example, this would be a Google Cloud Secret Manager secret version resource path like: \"projects/my-project/secrets/my-secret/versions/latest\"."
        }
      }
    },
    "ListBuildsResponse": {
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "Token to receive the next page of results. This will be absent if the end of the response list has been reached."
        },
        "builds": {
          "items": {
            "$ref": "Build"
          },
          "description": "Builds will be sorted by `create_time`, descending.",
          "type": "array"
        }
      },
      "description": "Response including listed builds.",
      "type": "object",
      "id": "ListBuildsResponse"
    },
    "Status": {
      "properties": {
        "details": {
          "items": {
            "type": "object",
            "additionalProperties": {
              "description": "Properties of the object. Contains field @type with type URL.",
              "type": "any"
            }
          },
          "type": "array",
          "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use."
        },
        "code": {
          "format": "int32",
          "description": "The status code, which should be an enum value of google.rpc.Code.",
          "type": "integer"
        },
        "message": {
          "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.",
          "type": "string"
        }
      },
      "id": "Status",
      "type": "object",
      "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors)."
    },
    "ArtifactObjects": {
      "description": "Files in the workspace to upload to Cloud Storage upon successful completion of all build steps.",
      "properties": {
        "location": {
          "description": "Cloud Storage bucket and optional object path, in the form \"gs://bucket/path/to/somewhere/\". (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Files in the workspace matching any path pattern will be uploaded to Cloud Storage with this location as a prefix.",
          "type": "string"
        },
        "paths": {
          "items": {
            "type": "string"
          },
          "description": "Path globs used to match files in the build's workspace.",
          "type": "array"
        },
        "timing": {
          "readOnly": true,
          "$ref": "TimeSpan",
          "description": "Output only. Stores timing information for pushing all artifact objects."
        }
      },
      "id": "ArtifactObjects",
      "type": "object"
    },
    "BuildTrigger": {
      "description": "Configuration for an automated build in response to source repository changes.",
      "type": "object",
      "id": "BuildTrigger",
      "properties": {
        "createTime": {
          "description": "Output only. Time when the trigger was created.",
          "format": "google-datetime",
          "readOnly": true,
          "type": "string"
        },
        "filename": {
          "type": "string",
          "description": "Path, from the source root, to a file whose contents is used for the template."
        },
        "substitutions": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object",
          "description": "Substitutions for Build resource. The keys must match the following regular expression: `^_[A-Z0-9_]+$`."
        },
        "triggerTemplate": {
          "description": "Template describing the types of source changes to trigger a build. Branch and tag names in trigger templates are interpreted as regular expressions. Any branch or tag change that matches that regular expression will trigger a build. Mutually exclusive with `github`.",
          "$ref": "RepoSource"
        },
        "github": {
          "description": "GitHubEventsConfig describes the configuration of a trigger that creates a build whenever a GitHub event is received. Mutually exclusive with `trigger_template`.",
          "$ref": "GitHubEventsConfig"
        },
        "id": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. Unique identifier of the trigger."
        },
        "disabled": {
          "type": "boolean",
          "description": "If true, the trigger will never automatically execute a build."
        },
        "name": {
          "description": "User-assigned name of the trigger. Must be unique within the project. Trigger names must meet the following requirements: + They must contain only alphanumeric characters and dashes. + They can be 1-64 characters long. + They must begin and end with an alphanumeric character.",
          "type": "string"
        },
        "ignoredFiles": {
          "description": "ignored_files and included_files are file glob matches using https://golang.org/pkg/path/filepath/#Match extended with support for \"**\". If ignored_files and changed files are both empty, then they are not used to determine whether or not to trigger a build. If ignored_files is not empty, then we ignore any files that match any of the ignored_file globs. If the change has no files that are outside of the ignored_files globs, then we do not trigger a build.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "build": {
          "description": "Contents of the build template.",
          "$ref": "Build"
        },
        "description": {
          "type": "string",
          "description": "Human-readable description of this trigger."
        },
        "tags": {
          "description": "Tags for annotation of a `BuildTrigger`",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "includedFiles": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "If any of the files altered in the commit pass the ignored_files filter and included_files is empty, then as far as this filter is concerned, we should trigger the build. If any of the files altered in the commit pass the ignored_files filter and included_files is not empty, then we make sure that at least one of those files matches a included_files glob. If not, then we do not trigger a build."
        }
      }
    },
    "Empty": {
      "type": "object",
      "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON representation for `Empty` is empty JSON object `{}`.",
      "id": "Empty",
      "properties": {}
    },
    "NotifierSpec": {
      "description": "NotifierSpec is the configuration container for notifications.",
      "id": "NotifierSpec",
      "type": "object",
      "properties": {
        "notification": {
          "description": "The configuration of this particular notifier.",
          "$ref": "Notification"
        },
        "secrets": {
          "description": "Configurations for secret resources used by this particular notifier.",
          "type": "array",
          "items": {
            "$ref": "NotifierSecret"
          }
        }
      }
    },
    "ListBuildTriggersResponse": {
      "properties": {
        "nextPageToken": {
          "description": "Token to receive the next page of results.",
          "type": "string"
        },
        "triggers": {
          "type": "array",
          "description": "`BuildTriggers` for the project, sorted by `create_time` descending.",
          "items": {
            "$ref": "BuildTrigger"
          }
        }
      },
      "type": "object",
      "id": "ListBuildTriggersResponse",
      "description": "Response containing existing `BuildTriggers`."
    },
    "Notification": {
      "id": "Notification",
      "type": "object",
      "properties": {
        "filter": {
          "type": "string",
          "description": "The filter string to use for notification filtering. Currently, this is assumed to be a CEL program. See https://opensource.google/projects/cel for more."
        },
        "httpDelivery": {
          "description": "Configuration for HTTP delivery.",
          "$ref": "HTTPDelivery"
        },
        "slackDelivery": {
          "description": "Configuration for Slack delivery.",
          "$ref": "SlackDelivery"
        },
        "structDelivery": {
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object."
          },
          "description": "Escape hatch for users to supply custom delivery configs.",
          "type": "object"
        },
        "smtpDelivery": {
          "description": "Configuration for SMTP (email) delivery.",
          "$ref": "SMTPDelivery"
        }
      },
      "description": "Notification is the container which holds the data that is relevant to this particular notification."
    },
    "Secret": {
      "type": "object",
      "id": "Secret",
      "properties": {
        "secretEnv": {
          "additionalProperties": {
            "format": "byte",
            "type": "string"
          },
          "type": "object",
          "description": "Map of environment variable name to its encrypted value. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step. Values can be at most 64 KB in size. There can be at most 100 secret values across all of a build's secrets."
        },
        "kmsKeyName": {
          "description": "Cloud KMS key name to use to decrypt these envs.",
          "type": "string"
        }
      },
      "description": "Pairs a set of secret environment variables containing encrypted values with the Cloud KMS key to use to decrypt the value."
    },
    "ArtifactResult": {
      "type": "object",
      "description": "An artifact that was uploaded during a build. This is a single record in the artifact manifest JSON file.",
      "properties": {
        "fileHash": {
          "description": "The file hash of the artifact.",
          "type": "array",
          "items": {
            "$ref": "FileHashes"
          }
        },
        "location": {
          "type": "string",
          "description": "The path of an artifact in a Google Cloud Storage bucket, with the generation number. For example, `gs://mybucket/path/to/output.jar#generation`."
        }
      },
      "id": "ArtifactResult"
    },
    "SMTPDelivery": {
      "properties": {
        "port": {
          "type": "string",
          "description": "The SMTP port of the server."
        },
        "fromAddress": {
          "type": "string",
          "description": "This is the SMTP account/email that appears in the `From:` of the email. If empty, it is assumed to be sender."
        },
        "password": {
          "description": "The SMTP sender's password.",
          "$ref": "NotifierSecretRef"
        },
        "senderAddress": {
          "description": "This is the SMTP account/email that is used to send the message.",
          "type": "string"
        },
        "server": {
          "type": "string",
          "description": "The address of the SMTP server."
        },
        "recipientAddresses": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "This is the list of addresses to which we send the email (i.e. in the `To:` of the email)."
        }
      },
      "type": "object",
      "id": "SMTPDelivery",
      "description": "SMTPDelivery is the delivery configuration for an SMTP (email) notification."
    },
    "TimeSpan": {
      "properties": {
        "endTime": {
          "format": "google-datetime",
          "description": "End of time span.",
          "type": "string"
        },
        "startTime": {
          "description": "Start of time span.",
          "type": "string",
          "format": "google-datetime"
        }
      },
      "description": "Start and end times for a build execution phase.",
      "type": "object",
      "id": "TimeSpan"
    },
    "Artifacts": {
      "type": "object",
      "id": "Artifacts",
      "description": "Artifacts produced by a build that should be uploaded upon successful completion of all build steps.",
      "properties": {
        "objects": {
          "$ref": "ArtifactObjects",
          "description": "A list of objects to be uploaded to Cloud Storage upon successful completion of all build steps. Files in the workspace matching specified paths globs will be uploaded to the specified Cloud Storage location using the builder service account's credentials. The location and generation of the uploaded objects will be stored in the Build resource's results field. If any objects fail to be pushed, the build is marked FAILURE."
        },
        "images": {
          "description": "A list of images to be pushed upon the successful completion of all build steps. The images will be pushed using the builder service account's credentials. The digests of the pushed images will be stored in the Build resource's results field. If any of the images fail to be pushed, the build is marked FAILURE.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      }
    },
    "Build": {
      "type": "object",
      "description": "A build resource in the Cloud Build API. At a high level, a `Build` describes where to find source code, how to build it (for example, the builder image to run on the source), and where to store the built artifacts. Fields can include the following variables, which will be expanded when the build is created: - $PROJECT_ID: the project ID of the build. - $BUILD_ID: the autogenerated ID of the build. - $REPO_NAME: the source repository name specified by RepoSource. - $BRANCH_NAME: the branch name specified by RepoSource. - $TAG_NAME: the tag name specified by RepoSource. - $REVISION_ID or $COMMIT_SHA: the commit SHA specified by RepoSource or resolved from the specified branch or tag. - $SHORT_SHA: first 7 characters of $REVISION_ID or $COMMIT_SHA.",
      "id": "Build",
      "properties": {
        "status": {
          "enumDescriptions": [
            "Status of the build is unknown.",
            "Build or step is queued; work has not yet begun.",
            "Build or step is being executed.",
            "Build or step finished successfully.",
            "Build or step failed to complete successfully.",
            "Build or step failed due to an internal cause.",
            "Build or step took longer than was allowed.",
            "Build or step was canceled by a user.",
            "Build was enqueued for longer than the value of `queue_ttl`."
          ],
          "readOnly": true,
          "type": "string",
          "description": "Output only. Status of the build.",
          "enum": [
            "STATUS_UNKNOWN",
            "QUEUED",
            "WORKING",
            "SUCCESS",
            "FAILURE",
            "INTERNAL_ERROR",
            "TIMEOUT",
            "CANCELLED",
            "EXPIRED"
          ]
        },
        "images": {
          "description": "A list of images to be pushed upon the successful completion of all build steps. The images are pushed using the builder service account's credentials. The digests of the pushed images will be stored in the `Build` resource's results field. If any of the images fail to be pushed, the build status is marked `FAILURE`.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "startTime": {
          "format": "google-datetime",
          "type": "string",
          "readOnly": true,
          "description": "Output only. Time at which execution of the build was started."
        },
        "secrets": {
          "description": "Secrets to decrypt using Cloud Key Management Service.",
          "type": "array",
          "items": {
            "$ref": "Secret"
          }
        },
        "options": {
          "description": "Special options for this build.",
          "$ref": "BuildOptions"
        },
        "steps": {
          "items": {
            "$ref": "BuildStep"
          },
          "description": "Required. The operations to be performed on the workspace.",
          "type": "array"
        },
        "artifacts": {
          "$ref": "Artifacts",
          "description": "Artifacts produced by the build that should be uploaded upon successful completion of all build steps."
        },
        "id": {
          "type": "string",
          "description": "Output only. Unique identifier of the build.",
          "readOnly": true
        },
        "createTime": {
          "readOnly": true,
          "format": "google-datetime",
          "description": "Output only. Time at which the request to create the build was received.",
          "type": "string"
        },
        "finishTime": {
          "readOnly": true,
          "type": "string",
          "format": "google-datetime",
          "description": "Output only. Time at which execution of the build was finished. The difference between finish_time and start_time is the duration of the build's execution."
        },
        "timeout": {
          "description": "Amount of time that this build should be allowed to run, to second granularity. If this amount of time elapses, work on the build will cease and the build status will be `TIMEOUT`. `timeout` starts ticking from `startTime`. Default time is ten minutes.",
          "format": "google-duration",
          "type": "string"
        },
        "timing": {
          "type": "object",
          "readOnly": true,
          "description": "Output only. Stores timing information for phases of the build. Valid keys are: * BUILD: time to execute all build steps * PUSH: time to push all specified images. * FETCHSOURCE: time to fetch source. If the build does not specify source or images, these keys will not be included.",
          "additionalProperties": {
            "$ref": "TimeSpan"
          }
        },
        "name": {
          "type": "string",
          "readOnly": true,
          "description": "Output only. The 'Build' name with format: `projects/{project}/locations/{location}/builds/{build}`, where {build} is a unique identifier generated by the service."
        },
        "substitutions": {
          "description": "Substitutions data for `Build` resource.",
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "serviceAccount": {
          "type": "string",
          "description": "IAM service account whose credentials will be used at build runtime. Must be of the format `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`. ACCOUNT can be email address or uniqueId of the service account. This field is in alpha and is not publicly available."
        },
        "logsBucket": {
          "description": "Google Cloud Storage bucket where logs should be written (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Logs file names will be of the format `${logs_bucket}/log-${build_id}.txt`.",
          "type": "string"
        },
        "sourceProvenance": {
          "description": "Output only. A permanent fixed identifier for source.",
          "readOnly": true,
          "$ref": "SourceProvenance"
        },
        "buildTriggerId": {
          "readOnly": true,
          "type": "string",
          "description": "Output only. The ID of the `BuildTrigger` that triggered this build, if it was triggered automatically."
        },
        "source": {
          "description": "The location of the source files to build.",
          "$ref": "Source"
        },
        "projectId": {
          "description": "Output only. ID of the project.",
          "type": "string",
          "readOnly": true
        },
        "statusDetail": {
          "description": "Output only. Customer-readable message about the current status.",
          "type": "string",
          "readOnly": true
        },
        "queueTtl": {
          "format": "google-duration",
          "description": "TTL in queue for this build. If provided and the build is enqueued longer than this value, the build will expire and the build status will be `EXPIRED`. The TTL starts ticking from create_time.",
          "type": "string"
        },
        "results": {
          "description": "Output only. Results of the build.",
          "readOnly": true,
          "$ref": "Results"
        },
        "logUrl": {
          "readOnly": true,
          "description": "Output only. URL to logs for this build in Google Cloud Console.",
          "type": "string"
        },
        "tags": {
          "description": "Tags for annotation of a `Build`. These are not docker tags.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "GitHubEventsConfig": {
      "id": "GitHubEventsConfig",
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "description": "Owner of the repository. For example: The owner for https://github.com/googlecloudplatform/cloud-builders is \"googlecloudplatform\"."
        },
        "pullRequest": {
          "$ref": "PullRequestFilter",
          "description": "filter to match changes in pull requests."
        },
        "push": {
          "description": "filter to match changes in refs like branches, tags.",
          "$ref": "PushFilter"
        },
        "name": {
          "type": "string",
          "description": "Name of the repository. For example: The name for https://github.com/googlecloudplatform/cloud-builders is \"cloud-builders\"."
        },
        "installationId": {
          "type": "string",
          "format": "int64",
          "description": "The installationID that emits the GitHub event."
        }
      },
      "description": "GitHubEventsConfig describes the configuration of a trigger that creates a build whenever a GitHub event is received. This message is experimental."
    },
    "NotifierSecretRef": {
      "type": "object",
      "description": "NotifierSecretRef contains the reference to a secret stored in the corresponding NotifierSpec.",
      "properties": {
        "secretRef": {
          "description": "The value of `secret_ref` should be a `name` that is registered in a `Secret` in the `secrets` list of the `Spec`.",
          "type": "string"
        }
      },
      "id": "NotifierSecretRef"
    },
    "Source": {
      "description": "Location of the source in a supported storage service.",
      "properties": {
        "repoSource": {
          "$ref": "RepoSource",
          "description": "If provided, get the source from this location in a Cloud Source Repository."
        },
        "storageSource": {
          "$ref": "StorageSource",
          "description": "If provided, get the source from this location in Google Cloud Storage."
        }
      },
      "id": "Source",
      "type": "object"
    },
    "NotifierMetadata": {
      "description": "NotifierMetadata contains the data which can be used to reference or describe this notifier.",
      "type": "object",
      "id": "NotifierMetadata",
      "properties": {
        "name": {
          "type": "string",
          "description": "The human-readable and user-given name for the notifier. For example: \"repo-merge-email-notifier\"."
        },
        "notifier": {
          "description": "The string representing the name and version of notifier to deploy. Expected to be of the form of \"/:\". For example: \"gcr.io/my-project/notifiers/smtp:1.2.34\".",
          "type": "string"
        }
      }
    },
    "SourceProvenance": {
      "properties": {
        "fileHashes": {
          "additionalProperties": {
            "$ref": "FileHashes"
          },
          "description": "Output only. Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. Note that `FileHashes` will only be populated if `BuildOptions` has requested a `SourceProvenanceHash`. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (`.tar.gz`), the `FileHash` will be for the single path to that file.",
          "readOnly": true,
          "type": "object"
        },
        "resolvedRepoSource": {
          "description": "A copy of the build's `source.repo_source`, if exists, with any revisions resolved.",
          "$ref": "RepoSource"
        },
        "resolvedStorageSource": {
          "description": "A copy of the build's `source.storage_source`, if exists, with any generations resolved.",
          "$ref": "StorageSource"
        }
      },
      "id": "SourceProvenance",
      "type": "object",
      "description": "Provenance of the source. Ways to find the original source, or verify that some source was used for this build."
    },
    "RepoSource": {
      "description": "Location of the source in a Google Cloud Source Repository.",
      "type": "object",
      "id": "RepoSource",
      "properties": {
        "tagName": {
          "type": "string",
          "description": "Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax"
        },
        "commitSha": {
          "type": "string",
          "description": "Explicit commit SHA to build."
        },
        "dir": {
          "description": "Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's `dir` is specified and is an absolute path, this value is ignored for that step's execution.",
          "type": "string"
        },
        "projectId": {
          "type": "string",
          "description": "ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed."
        },
        "repoName": {
          "description": "Required. Name of the Cloud Source Repository.",
          "type": "string"
        },
        "substitutions": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Substitutions to use in a triggered build. Should only be used with RunBuildTrigger",
          "type": "object"
        },
        "branchName": {
          "description": "Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax",
          "type": "string"
        },
        "invertRegex": {
          "description": "Only trigger a build if the revision regex does NOT match the revision regex.",
          "type": "boolean"
        }
      }
    },
    "Operation": {
      "type": "object",
      "properties": {
        "error": {
          "$ref": "Status",
          "description": "The error result of the operation in case of failure or cancellation."
        },
        "response": {
          "additionalProperties": {
            "description": "Properties of the object. Contains field @type with type URL.",
            "type": "any"
          },
          "description": "The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
          "type": "object"
        },
        "name": {
          "type": "string",
          "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`."
        },
        "metadata": {
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @type with type URL."
          },
          "type": "object",
          "description": "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any."
        },
        "done": {
          "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
          "type": "boolean"
        }
      },
      "description": "This resource represents a long-running operation that is the result of a network API call.",
      "id": "Operation"
    },
    "NotifierConfig": {
      "id": "NotifierConfig",
      "properties": {
        "metadata": {
          "$ref": "NotifierMetadata",
          "description": "Metadata for referring to/handling/deploying this notifier."
        },
        "spec": {
          "$ref": "NotifierSpec",
          "description": "The actual configuration for this notifier."
        },
        "apiVersion": {
          "description": "The API version of this configuration format.",
          "type": "string"
        },
        "kind": {
          "description": "The type of notifier to use (e.g. SMTPNotifier).",
          "type": "string"
        }
      },
      "type": "object",
      "description": "NotifierConfig is the top-level configuration message."
    },
    "PullRequestFilter": {
      "type": "object",
      "description": "PullRequestFilter contains filter properties for matching GitHub Pull Requests.",
      "id": "PullRequestFilter",
      "properties": {
        "commentControl": {
          "type": "string",
          "enumDescriptions": [
            "Do not require comments on Pull Requests before builds are triggered.",
            "Enforce that repository owners or collaborators must comment on Pull Requests before builds are triggered.",
            "Enforce that repository owners or collaborators must comment on external contributors' Pull Requests before builds are triggered."
          ],
          "enum": [
            "COMMENTS_DISABLED",
            "COMMENTS_ENABLED",
            "COMMENTS_ENABLED_FOR_EXTERNAL_CONTRIBUTORS_ONLY"
          ],
          "description": "Configure builds to run whether a repository owner or collaborator need to comment `/gcbrun`."
        },
        "invertRegex": {
          "type": "boolean",
          "description": "If true, branches that do NOT match the git_ref will trigger a build."
        },
        "branch": {
          "description": "Regex of branches to match. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax",
          "type": "string"
        }
      }
    },
    "Hash": {
      "description": "Container message for hash values.",
      "type": "object",
      "id": "Hash",
      "properties": {
        "type": {
          "enumDescriptions": [
            "No hash requested.",
            "Use a sha256 hash.",
            "Use a md5 hash."
          ],
          "type": "string",
          "description": "The type of hash that was performed.",
          "enum": [
            "NONE",
            "SHA256",
            "MD5"
          ]
        },
        "value": {
          "description": "The hash value.",
          "type": "string",
          "format": "byte"
        }
      }
    },
    "HTTPDelivery": {
      "description": "HTTPDelivery is the delivery configuration for an HTTP notification.",
      "id": "HTTPDelivery",
      "type": "object",
      "properties": {
        "uri": {
          "type": "string",
          "description": "The URI to which JSON-containing HTTP POST requests should be sent."
        }
      }
    }
  },
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "View and manage your data across Google Cloud Platform services"
        }
      }
    }
  },
  "batchPath": "batch",
  "id": "cloudbuild:v1",
  "name": "cloudbuild",
  "rootUrl": "https://cloudbuild.googleapis.com/",
  "discoveryVersion": "v1",
  "fullyEncodeReservedExpansion": true,
  "title": "Cloud Build API",
  "documentationLink": "https://cloud.google.com/cloud-build/docs/",
  "mtlsRootUrl": "https://cloudbuild.mtls.googleapis.com/",
  "version": "v1"
}
