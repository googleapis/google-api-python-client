{
  "discoveryVersion": "v1",
  "canonicalName": "Real-time Bidding",
  "ownerDomain": "google.com",
  "kind": "discovery#restDescription",
  "version": "v1alpha",
  "servicePath": "",
  "version_module": true,
  "parameters": {
    "alt": {
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "location": "query",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "default": "json",
      "type": "string",
      "description": "Data format for response."
    },
    "$.xgafv": {
      "enum": [
        "1",
        "2"
      ],
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "location": "query",
      "type": "string",
      "description": "V1 error format."
    },
    "fields": {
      "type": "string",
      "description": "Selector specifying which fields to include in a partial response.",
      "location": "query"
    },
    "upload_protocol": {
      "location": "query",
      "type": "string",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
    },
    "quotaUser": {
      "location": "query",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "type": "string"
    },
    "prettyPrint": {
      "description": "Returns response with indentations and line breaks.",
      "type": "boolean",
      "location": "query",
      "default": "true"
    },
    "oauth_token": {
      "type": "string",
      "description": "OAuth 2.0 token for the current user.",
      "location": "query"
    },
    "callback": {
      "location": "query",
      "description": "JSONP",
      "type": "string"
    },
    "uploadType": {
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "location": "query",
      "type": "string"
    },
    "access_token": {
      "location": "query",
      "description": "OAuth access token.",
      "type": "string"
    },
    "key": {
      "location": "query",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "type": "string"
    }
  },
  "fullyEncodeReservedExpansion": true,
  "documentationLink": "https://developers.google.com/authorized-buyers/apis/realtimebidding/reference/rest/",
  "mtlsRootUrl": "https://realtimebidding.mtls.googleapis.com/",
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/realtime-bidding": {
          "description": "See, create, edit, and delete your Authorized Buyers and Open Bidding account entities"
        }
      }
    }
  },
  "revision": "20210124",
  "batchPath": "batch",
  "basePath": "",
  "description": "Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.",
  "baseUrl": "https://realtimebidding.googleapis.com/",
  "resources": {
    "bidders": {
      "resources": {
        "biddingFunctions": {
          "methods": {
            "create": {
              "request": {
                "$ref": "BiddingFunction"
              },
              "flatPath": "v1alpha/bidders/{biddersId}/biddingFunctions",
              "id": "realtimebidding.bidders.biddingFunctions.create",
              "response": {
                "$ref": "BiddingFunction"
              },
              "scopes": [
                "https://www.googleapis.com/auth/realtime-bidding"
              ],
              "parameters": {
                "parent": {
                  "type": "string",
                  "required": true,
                  "pattern": "^bidders/[^/]+$",
                  "description": "Required. The name of the bidder for which to create the bidding function. Format: `bidders/{bidderAccountId}`",
                  "location": "path"
                }
              },
              "httpMethod": "POST",
              "path": "v1alpha/{+parent}/biddingFunctions",
              "parameterOrder": [
                "parent"
              ],
              "description": "Creates a new bidding function."
            },
            "list": {
              "flatPath": "v1alpha/bidders/{biddersId}/biddingFunctions",
              "parameterOrder": [
                "parent"
              ],
              "scopes": [
                "https://www.googleapis.com/auth/realtime-bidding"
              ],
              "description": "Lists the bidding functions that a bidder currently has registered.",
              "id": "realtimebidding.bidders.biddingFunctions.list",
              "response": {
                "$ref": "ListBiddingFunctionsResponse"
              },
              "httpMethod": "GET",
              "parameters": {
                "parent": {
                  "description": "Required. Name of the bidder whose bidding functions will be listed. Format: `bidders/{bidder_account_id}`",
                  "type": "string",
                  "location": "path",
                  "required": true,
                  "pattern": "^bidders/[^/]+$"
                },
                "pageSize": {
                  "format": "int32",
                  "description": "The maximum number of bidding functions to return.",
                  "type": "integer",
                  "location": "query"
                },
                "pageToken": {
                  "description": "A token identifying a page of results the server should return. This value is received from a previous `ListBiddingFunctions` call in ListBiddingFunctionsResponse.nextPageToken.",
                  "type": "string",
                  "location": "query"
                }
              },
              "path": "v1alpha/{+parent}/biddingFunctions"
            }
          }
        }
      }
    }
  },
  "name": "realtimebidding",
  "rootUrl": "https://realtimebidding.googleapis.com/",
  "title": "Real-time Bidding API",
  "icons": {
    "x32": "http://www.google.com/images/icons/product/search-32.gif",
    "x16": "http://www.google.com/images/icons/product/search-16.gif"
  },
  "protocol": "rest",
  "id": "realtimebidding:v1alpha",
  "ownerName": "Google",
  "schemas": {
    "ListBiddingFunctionsResponse": {
      "type": "object",
      "id": "ListBiddingFunctionsResponse",
      "description": "A response containing a list of a bidder's bidding functions.",
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "A token which can be passed to a subsequent call to the `ListBiddingFunctions` method to retrieve the next page of results in ListBiddingFunctionsRequest.pageToken."
        },
        "biddingFunctions": {
          "type": "array",
          "description": "A list of a bidder's bidding functions.",
          "items": {
            "$ref": "BiddingFunction"
          }
        }
      }
    },
    "BiddingFunction": {
      "id": "BiddingFunction",
      "description": "The bidding function to be executed as part of the TURTLEDOVE simulation experiment bidding flow.",
      "properties": {
        "biddingFunction": {
          "description": "The raw Javascript source code of the bidding function. The function takes in a Javascript object, `inputs`, that contains the following named fields: `openrtbContextualBidRequest` OR `googleContextualBidRequest`, `customContextualSignal`, `interestBasedBidData`, `interestGroupData`, `recentImpressionAges`, and returns the bid price CPM (double). Example: ``` /* Returns a bid price CPM (double). * * @param {Object} inputs an object with the * following named fields: * - openrtbContextualBidRequest * OR googleContextualBidRequest * - customContextualSignal * - interestBasedBidData * - interestGroupData * - recentImpressionAges */ function biddingFunction(inputs) { ... return inputs.interestBasedBidData.cpm * inputs.customContextualSignals.placementMultiplier; } ```",
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "The name of the bidding function that must follow the pattern: `bidders/{bidder_account_id}/biddingFunctions/{bidding_function_name}`."
        }
      },
      "type": "object"
    }
  }
}
